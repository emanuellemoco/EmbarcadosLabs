
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076c4  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004076c4  004076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  004076cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000304  204009d0  0040809c  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20400cd4  004083a0  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cd8  0040a3a4  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b7cd  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003eaa  00000000  00000000  0003c224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006b69  00000000  00000000  000400ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a80  00000000  00000000  00046c37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000af8  00000000  00000000  000476b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000224f6  00000000  00000000  000481af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000108e6  00000000  00000000  0006a6a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000907c1  00000000  00000000  0007af8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002370  00000000  00000000  0010b74c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2c 40 20 f1 16 40 00 ed 16 40 00 ed 16 40 00     .,@ ..@...@...@.
  400010:	ed 16 40 00 ed 16 40 00 ed 16 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ed 16 40 00 ed 16 40 00 00 00 00 00 ed 16 40 00     ..@...@.......@.
  40003c:	ed 16 40 00 ed 16 40 00 ed 16 40 00 d9 19 40 00     ..@...@...@...@.
  40004c:	0d 1c 40 00 ed 16 40 00 ed 16 40 00 ed 16 40 00     ..@...@...@...@.
  40005c:	ed 16 40 00 ed 16 40 00 00 00 00 00 51 12 40 00     ..@...@.....Q.@.
  40006c:	65 12 40 00 79 12 40 00 ed 16 40 00 ed 16 40 00     e.@.y.@...@...@.
  40007c:	ed 16 40 00 8d 12 40 00 a1 12 40 00 ed 16 40 00     ..@...@...@...@.
  40008c:	ed 16 40 00 ed 16 40 00 ed 16 40 00 ed 16 40 00     ..@...@...@...@.
  40009c:	ed 16 40 00 89 19 40 00 ed 16 40 00 ed 16 40 00     ..@...@...@...@.
  4000ac:	b1 19 40 00 ed 16 40 00 ed 16 40 00 ed 16 40 00     ..@...@...@...@.
  4000bc:	ed 16 40 00 ed 16 40 00 ed 16 40 00 ed 16 40 00     ..@...@...@...@.
  4000cc:	ed 16 40 00 00 00 00 00 ed 16 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ed 16 40 00 ed 16 40 00 ed 16 40 00 ed 16 40 00     ..@...@...@...@.
  4000ec:	ed 16 40 00 ed 16 40 00 ed 16 40 00 ed 16 40 00     ..@...@...@...@.
  4000fc:	ed 16 40 00 ed 16 40 00 ed 16 40 00 ed 16 40 00     ..@...@...@...@.
  40010c:	ed 16 40 00 ed 16 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ed 16 40 00 ed 16 40 00 ed 16 40 00     ......@...@...@.
  40012c:	ed 16 40 00 ed 16 40 00 00 00 00 00 ed 16 40 00     ..@...@.......@.
  40013c:	ed 16 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	004076cc 	.word	0x004076cc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004076cc 	.word	0x004076cc
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	004076cc 	.word	0x004076cc
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  400344:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400346:	4d2a      	ldr	r5, [pc, #168]	; (4003f0 <rtc_set_date+0xac>)
  400348:	fba5 4603 	umull	r4, r6, r5, r3
  40034c:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  40034e:	9c03      	ldr	r4, [sp, #12]
  400350:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400352:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400356:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  40035a:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40035e:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400362:	fba5 6402 	umull	r6, r4, r5, r2
  400366:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400368:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40036c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400370:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  400378:	4b1e      	ldr	r3, [pc, #120]	; (4003f4 <rtc_set_date+0xb0>)
  40037a:	fba3 4301 	umull	r4, r3, r3, r1
  40037e:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400380:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  400384:	4b1c      	ldr	r3, [pc, #112]	; (4003f8 <rtc_set_date+0xb4>)
  400386:	fba3 4301 	umull	r4, r3, r3, r1
  40038a:	095b      	lsrs	r3, r3, #5
  40038c:	fba5 6403 	umull	r6, r4, r5, r3
  400390:	08e4      	lsrs	r4, r4, #3
  400392:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  400396:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40039a:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  40039c:	fba5 4301 	umull	r4, r3, r5, r1
  4003a0:	08db      	lsrs	r3, r3, #3
  4003a2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  4003a6:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  4003ae:	fba5 1503 	umull	r1, r5, r5, r3
  4003b2:	08ed      	lsrs	r5, r5, #3
  4003b4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  4003b8:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003bc:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  4003c0:	6983      	ldr	r3, [r0, #24]
  4003c2:	f013 0f04 	tst.w	r3, #4
  4003c6:	d0fb      	beq.n	4003c0 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  4003c8:	6803      	ldr	r3, [r0, #0]
  4003ca:	f043 0302 	orr.w	r3, r3, #2
  4003ce:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  4003d0:	6983      	ldr	r3, [r0, #24]
  4003d2:	f013 0f01 	tst.w	r3, #1
  4003d6:	d0fb      	beq.n	4003d0 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  4003d8:	2301      	movs	r3, #1
  4003da:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  4003dc:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  4003de:	6803      	ldr	r3, [r0, #0]
  4003e0:	f023 0302 	bic.w	r3, r3, #2
  4003e4:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  4003e6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4003e8:	f000 0002 	and.w	r0, r0, #2
  4003ec:	bc70      	pop	{r4, r5, r6}
  4003ee:	4770      	bx	lr
  4003f0:	cccccccd 	.word	0xcccccccd
  4003f4:	10624dd3 	.word	0x10624dd3
  4003f8:	51eb851f 	.word	0x51eb851f

004003fc <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  4003fc:	b430      	push	{r4, r5}
  4003fe:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400400:	460c      	mov	r4, r1
  400402:	b151      	cbz	r1, 40041a <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400404:	4c12      	ldr	r4, [pc, #72]	; (400450 <rtc_set_date_alarm+0x54>)
  400406:	fba4 1402 	umull	r1, r4, r4, r2
  40040a:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  40040c:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400410:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400414:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400416:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40041a:	b15b      	cbz	r3, 400434 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041c:	4a0c      	ldr	r2, [pc, #48]	; (400450 <rtc_set_date_alarm+0x54>)
  40041e:	fba2 3205 	umull	r3, r2, r2, r5
  400422:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400424:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  400428:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  40042c:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40042e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  400432:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  400434:	6942      	ldr	r2, [r0, #20]
  400436:	4b07      	ldr	r3, [pc, #28]	; (400454 <rtc_set_date_alarm+0x58>)
  400438:	4013      	ands	r3, r2
  40043a:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  40043c:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  40043e:	6942      	ldr	r2, [r0, #20]
  400440:	4b05      	ldr	r3, [pc, #20]	; (400458 <rtc_set_date_alarm+0x5c>)
  400442:	4313      	orrs	r3, r2
  400444:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  400446:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400448:	f000 0008 	and.w	r0, r0, #8
  40044c:	bc30      	pop	{r4, r5}
  40044e:	4770      	bx	lr
  400450:	cccccccd 	.word	0xcccccccd
  400454:	7f7fffff 	.word	0x7f7fffff
  400458:	80800000 	.word	0x80800000

0040045c <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  40045c:	6980      	ldr	r0, [r0, #24]
}
  40045e:	4770      	bx	lr

00400460 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400460:	61c1      	str	r1, [r0, #28]
  400462:	4770      	bx	lr

00400464 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400464:	4b03      	ldr	r3, [pc, #12]	; (400474 <rtt_init+0x10>)
  400466:	681b      	ldr	r3, [r3, #0]
  400468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  40046c:	4319      	orrs	r1, r3
  40046e:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400470:	2000      	movs	r0, #0
  400472:	4770      	bx	lr
  400474:	204009ec 	.word	0x204009ec

00400478 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  400478:	b941      	cbnz	r1, 40048c <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40047a:	4a09      	ldr	r2, [pc, #36]	; (4004a0 <rtt_sel_source+0x28>)
  40047c:	6813      	ldr	r3, [r2, #0]
  40047e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400482:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400484:	6802      	ldr	r2, [r0, #0]
  400486:	4313      	orrs	r3, r2
  400488:	6003      	str	r3, [r0, #0]
  40048a:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  40048c:	4a04      	ldr	r2, [pc, #16]	; (4004a0 <rtt_sel_source+0x28>)
  40048e:	6813      	ldr	r3, [r2, #0]
  400490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400494:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400496:	6802      	ldr	r2, [r0, #0]
  400498:	4313      	orrs	r3, r2
  40049a:	6003      	str	r3, [r0, #0]
  40049c:	4770      	bx	lr
  40049e:	bf00      	nop
  4004a0:	204009ec 	.word	0x204009ec

004004a4 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4004a4:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4004a6:	4b03      	ldr	r3, [pc, #12]	; (4004b4 <rtt_enable_interrupt+0x10>)
  4004a8:	681b      	ldr	r3, [r3, #0]
  4004aa:	4319      	orrs	r1, r3
  4004ac:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4004ae:	6001      	str	r1, [r0, #0]
  4004b0:	4770      	bx	lr
  4004b2:	bf00      	nop
  4004b4:	204009ec 	.word	0x204009ec

004004b8 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4004b8:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4004ba:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4004be:	4b02      	ldr	r3, [pc, #8]	; (4004c8 <rtt_disable_interrupt+0x10>)
  4004c0:	681b      	ldr	r3, [r3, #0]
  4004c2:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4004c4:	6001      	str	r1, [r0, #0]
  4004c6:	4770      	bx	lr
  4004c8:	204009ec 	.word	0x204009ec

004004cc <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4004cc:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4004ce:	6883      	ldr	r3, [r0, #8]
  4004d0:	429a      	cmp	r2, r3
  4004d2:	d003      	beq.n	4004dc <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4004d4:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4004d6:	6883      	ldr	r3, [r0, #8]
  4004d8:	4293      	cmp	r3, r2
  4004da:	d1fb      	bne.n	4004d4 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4004dc:	4618      	mov	r0, r3
  4004de:	4770      	bx	lr

004004e0 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4004e0:	68c0      	ldr	r0, [r0, #12]
}
  4004e2:	4770      	bx	lr

004004e4 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4004e4:	b570      	push	{r4, r5, r6, lr}
  4004e6:	4606      	mov	r6, r0
  4004e8:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4004ea:	6804      	ldr	r4, [r0, #0]
  4004ec:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  4004f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  4004f4:	4809      	ldr	r0, [pc, #36]	; (40051c <rtt_write_alarm_time+0x38>)
  4004f6:	4b0a      	ldr	r3, [pc, #40]	; (400520 <rtt_write_alarm_time+0x3c>)
  4004f8:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  4004fa:	b92d      	cbnz	r5, 400508 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  4004fc:	f04f 33ff 	mov.w	r3, #4294967295
  400500:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400502:	b924      	cbnz	r4, 40050e <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400504:	2000      	movs	r0, #0
  400506:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400508:	3d01      	subs	r5, #1
  40050a:	6075      	str	r5, [r6, #4]
  40050c:	e7f9      	b.n	400502 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  40050e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400512:	4802      	ldr	r0, [pc, #8]	; (40051c <rtt_write_alarm_time+0x38>)
  400514:	4b03      	ldr	r3, [pc, #12]	; (400524 <rtt_write_alarm_time+0x40>)
  400516:	4798      	blx	r3
  400518:	e7f4      	b.n	400504 <rtt_write_alarm_time+0x20>
  40051a:	bf00      	nop
  40051c:	400e1830 	.word	0x400e1830
  400520:	004004b9 	.word	0x004004b9
  400524:	004004a5 	.word	0x004004a5

00400528 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  400528:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40052a:	4b07      	ldr	r3, [pc, #28]	; (400548 <spi_enable_clock+0x20>)
  40052c:	4298      	cmp	r0, r3
  40052e:	d003      	beq.n	400538 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400530:	4b06      	ldr	r3, [pc, #24]	; (40054c <spi_enable_clock+0x24>)
  400532:	4298      	cmp	r0, r3
  400534:	d004      	beq.n	400540 <spi_enable_clock+0x18>
  400536:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  400538:	2015      	movs	r0, #21
  40053a:	4b05      	ldr	r3, [pc, #20]	; (400550 <spi_enable_clock+0x28>)
  40053c:	4798      	blx	r3
  40053e:	bd08      	pop	{r3, pc}
  400540:	202a      	movs	r0, #42	; 0x2a
  400542:	4b03      	ldr	r3, [pc, #12]	; (400550 <spi_enable_clock+0x28>)
  400544:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400546:	e7f6      	b.n	400536 <spi_enable_clock+0xe>
  400548:	40008000 	.word	0x40008000
  40054c:	40058000 	.word	0x40058000
  400550:	004013d5 	.word	0x004013d5

00400554 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400554:	6843      	ldr	r3, [r0, #4]
  400556:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40055a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40055c:	6843      	ldr	r3, [r0, #4]
  40055e:	0409      	lsls	r1, r1, #16
  400560:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400564:	4319      	orrs	r1, r3
  400566:	6041      	str	r1, [r0, #4]
  400568:	4770      	bx	lr

0040056a <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40056a:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40056c:	f643 2499 	movw	r4, #15001	; 0x3a99
  400570:	6905      	ldr	r5, [r0, #16]
  400572:	f015 0f02 	tst.w	r5, #2
  400576:	d103      	bne.n	400580 <spi_write+0x16>
		if (!timeout--) {
  400578:	3c01      	subs	r4, #1
  40057a:	d1f9      	bne.n	400570 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40057c:	2001      	movs	r0, #1
  40057e:	e00c      	b.n	40059a <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400580:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400582:	f014 0f02 	tst.w	r4, #2
  400586:	d006      	beq.n	400596 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  400588:	0412      	lsls	r2, r2, #16
  40058a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  40058e:	4311      	orrs	r1, r2
		if (uc_last) {
  400590:	b10b      	cbz	r3, 400596 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400592:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  400596:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  400598:	2000      	movs	r0, #0
}
  40059a:	bc30      	pop	{r4, r5}
  40059c:	4770      	bx	lr

0040059e <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  40059e:	b932      	cbnz	r2, 4005ae <spi_set_clock_polarity+0x10>
  4005a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4005a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005a6:	f023 0301 	bic.w	r3, r3, #1
  4005aa:	6303      	str	r3, [r0, #48]	; 0x30
  4005ac:	4770      	bx	lr
  4005ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4005b2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005b4:	f043 0301 	orr.w	r3, r3, #1
  4005b8:	6303      	str	r3, [r0, #48]	; 0x30
  4005ba:	4770      	bx	lr

004005bc <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4005bc:	b932      	cbnz	r2, 4005cc <spi_set_clock_phase+0x10>
  4005be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4005c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005c4:	f023 0302 	bic.w	r3, r3, #2
  4005c8:	6303      	str	r3, [r0, #48]	; 0x30
  4005ca:	4770      	bx	lr
  4005cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4005d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005d2:	f043 0302 	orr.w	r3, r3, #2
  4005d6:	6303      	str	r3, [r0, #48]	; 0x30
  4005d8:	4770      	bx	lr

004005da <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4005da:	2a04      	cmp	r2, #4
  4005dc:	d003      	beq.n	4005e6 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4005de:	b16a      	cbz	r2, 4005fc <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4005e0:	2a08      	cmp	r2, #8
  4005e2:	d016      	beq.n	400612 <spi_configure_cs_behavior+0x38>
  4005e4:	4770      	bx	lr
  4005e6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4005ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005ec:	f023 0308 	bic.w	r3, r3, #8
  4005f0:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4005f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005f4:	f043 0304 	orr.w	r3, r3, #4
  4005f8:	6303      	str	r3, [r0, #48]	; 0x30
  4005fa:	4770      	bx	lr
  4005fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400600:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400602:	f023 0308 	bic.w	r3, r3, #8
  400606:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  400608:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40060a:	f023 0304 	bic.w	r3, r3, #4
  40060e:	6303      	str	r3, [r0, #48]	; 0x30
  400610:	4770      	bx	lr
  400612:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400616:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400618:	f043 0308 	orr.w	r3, r3, #8
  40061c:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  40061e:	e7e1      	b.n	4005e4 <spi_configure_cs_behavior+0xa>

00400620 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400620:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400624:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40062a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40062c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40062e:	431a      	orrs	r2, r3
  400630:	630a      	str	r2, [r1, #48]	; 0x30
  400632:	4770      	bx	lr

00400634 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400634:	1e43      	subs	r3, r0, #1
  400636:	4419      	add	r1, r3
  400638:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40063c:	1e43      	subs	r3, r0, #1
  40063e:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400640:	bf94      	ite	ls
  400642:	b200      	sxthls	r0, r0
		return -1;
  400644:	f04f 30ff 	movhi.w	r0, #4294967295
}
  400648:	4770      	bx	lr

0040064a <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40064a:	b17a      	cbz	r2, 40066c <spi_set_baudrate_div+0x22>
{
  40064c:	b410      	push	{r4}
  40064e:	4614      	mov	r4, r2
  400650:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400654:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40065a:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40065c:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  40065e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400662:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400664:	2000      	movs	r0, #0
}
  400666:	f85d 4b04 	ldr.w	r4, [sp], #4
  40066a:	4770      	bx	lr
        return -1;
  40066c:	f04f 30ff 	mov.w	r0, #4294967295
  400670:	4770      	bx	lr

00400672 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400672:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400674:	0189      	lsls	r1, r1, #6
  400676:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400678:	2402      	movs	r4, #2
  40067a:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40067c:	f04f 31ff 	mov.w	r1, #4294967295
  400680:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400682:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400684:	605a      	str	r2, [r3, #4]
}
  400686:	f85d 4b04 	ldr.w	r4, [sp], #4
  40068a:	4770      	bx	lr

0040068c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40068c:	0189      	lsls	r1, r1, #6
  40068e:	2305      	movs	r3, #5
  400690:	5043      	str	r3, [r0, r1]
  400692:	4770      	bx	lr

00400694 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400694:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  400698:	61ca      	str	r2, [r1, #28]
  40069a:	4770      	bx	lr

0040069c <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  40069c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4006a0:	624a      	str	r2, [r1, #36]	; 0x24
  4006a2:	4770      	bx	lr

004006a4 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006a4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4006a8:	6a08      	ldr	r0, [r1, #32]
}
  4006aa:	4770      	bx	lr

004006ac <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4006ac:	b4f0      	push	{r4, r5, r6, r7}
  4006ae:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4006b0:	2402      	movs	r4, #2
  4006b2:	9401      	str	r4, [sp, #4]
  4006b4:	2408      	movs	r4, #8
  4006b6:	9402      	str	r4, [sp, #8]
  4006b8:	2420      	movs	r4, #32
  4006ba:	9403      	str	r4, [sp, #12]
  4006bc:	2480      	movs	r4, #128	; 0x80
  4006be:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4006c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4006c2:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4006c4:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4006c6:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4006ca:	d814      	bhi.n	4006f6 <tc_find_mck_divisor+0x4a>
  4006cc:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4006ce:	42a0      	cmp	r0, r4
  4006d0:	d217      	bcs.n	400702 <tc_find_mck_divisor+0x56>
  4006d2:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4006d4:	af01      	add	r7, sp, #4
  4006d6:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4006da:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4006de:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4006e0:	4284      	cmp	r4, r0
  4006e2:	d30a      	bcc.n	4006fa <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4006e4:	4286      	cmp	r6, r0
  4006e6:	d90d      	bls.n	400704 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4006e8:	3501      	adds	r5, #1
	for (ul_index = 0;
  4006ea:	2d05      	cmp	r5, #5
  4006ec:	d1f3      	bne.n	4006d6 <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4006ee:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4006f0:	b006      	add	sp, #24
  4006f2:	bcf0      	pop	{r4, r5, r6, r7}
  4006f4:	4770      	bx	lr
			return 0;
  4006f6:	2000      	movs	r0, #0
  4006f8:	e7fa      	b.n	4006f0 <tc_find_mck_divisor+0x44>
  4006fa:	2000      	movs	r0, #0
  4006fc:	e7f8      	b.n	4006f0 <tc_find_mck_divisor+0x44>
	return 1;
  4006fe:	2001      	movs	r0, #1
  400700:	e7f6      	b.n	4006f0 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400702:	2500      	movs	r5, #0
	if (p_uldiv) {
  400704:	b12a      	cbz	r2, 400712 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  400706:	a906      	add	r1, sp, #24
  400708:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  40070c:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400710:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400712:	2b00      	cmp	r3, #0
  400714:	d0f3      	beq.n	4006fe <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  400716:	601d      	str	r5, [r3, #0]
	return 1;
  400718:	2001      	movs	r0, #1
  40071a:	e7e9      	b.n	4006f0 <tc_find_mck_divisor+0x44>

0040071c <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  40071c:	4b01      	ldr	r3, [pc, #4]	; (400724 <gfx_mono_set_framebuffer+0x8>)
  40071e:	6018      	str	r0, [r3, #0]
  400720:	4770      	bx	lr
  400722:	bf00      	nop
  400724:	204009f0 	.word	0x204009f0

00400728 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  400728:	4b02      	ldr	r3, [pc, #8]	; (400734 <gfx_mono_framebuffer_put_byte+0xc>)
  40072a:	681b      	ldr	r3, [r3, #0]
  40072c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  400730:	5442      	strb	r2, [r0, r1]
  400732:	4770      	bx	lr
  400734:	204009f0 	.word	0x204009f0

00400738 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400738:	4b02      	ldr	r3, [pc, #8]	; (400744 <gfx_mono_framebuffer_get_byte+0xc>)
  40073a:	681b      	ldr	r3, [r3, #0]
  40073c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400740:	5c40      	ldrb	r0, [r0, r1]
  400742:	4770      	bx	lr
  400744:	204009f0 	.word	0x204009f0

00400748 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  40074c:	1884      	adds	r4, r0, r2
  40074e:	2c80      	cmp	r4, #128	; 0x80
  400750:	dd02      	ble.n	400758 <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  400752:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  400756:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  400758:	b322      	cbz	r2, 4007a4 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  40075a:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  40075c:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400760:	2601      	movs	r6, #1
  400762:	fa06 f101 	lsl.w	r1, r6, r1
  400766:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  400768:	2b01      	cmp	r3, #1
  40076a:	d01d      	beq.n	4007a8 <gfx_mono_generic_draw_horizontal_line+0x60>
  40076c:	2b00      	cmp	r3, #0
  40076e:	d035      	beq.n	4007dc <gfx_mono_generic_draw_horizontal_line+0x94>
  400770:	2b02      	cmp	r3, #2
  400772:	d117      	bne.n	4007a4 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400774:	3801      	subs	r0, #1
  400776:	b2c7      	uxtb	r7, r0
  400778:	19d4      	adds	r4, r2, r7
  40077a:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  40077c:	f8df a090 	ldr.w	sl, [pc, #144]	; 400810 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400780:	f04f 0900 	mov.w	r9, #0
  400784:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400814 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400788:	4621      	mov	r1, r4
  40078a:	4628      	mov	r0, r5
  40078c:	47d0      	blx	sl
			temp ^= pixelmask;
  40078e:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400792:	464b      	mov	r3, r9
  400794:	b2d2      	uxtb	r2, r2
  400796:	4621      	mov	r1, r4
  400798:	4628      	mov	r0, r5
  40079a:	47c0      	blx	r8
  40079c:	3c01      	subs	r4, #1
  40079e:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4007a0:	42bc      	cmp	r4, r7
  4007a2:	d1f1      	bne.n	400788 <gfx_mono_generic_draw_horizontal_line+0x40>
  4007a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007a8:	3801      	subs	r0, #1
  4007aa:	b2c7      	uxtb	r7, r0
  4007ac:	19d4      	adds	r4, r2, r7
  4007ae:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4007b0:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400810 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4007b4:	f04f 0900 	mov.w	r9, #0
  4007b8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400814 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4007bc:	4621      	mov	r1, r4
  4007be:	4628      	mov	r0, r5
  4007c0:	47d0      	blx	sl
			temp |= pixelmask;
  4007c2:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4007c6:	464b      	mov	r3, r9
  4007c8:	b2d2      	uxtb	r2, r2
  4007ca:	4621      	mov	r1, r4
  4007cc:	4628      	mov	r0, r5
  4007ce:	47c0      	blx	r8
  4007d0:	3c01      	subs	r4, #1
  4007d2:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4007d4:	42bc      	cmp	r4, r7
  4007d6:	d1f1      	bne.n	4007bc <gfx_mono_generic_draw_horizontal_line+0x74>
  4007d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007dc:	3801      	subs	r0, #1
  4007de:	b2c7      	uxtb	r7, r0
  4007e0:	19d4      	adds	r4, r2, r7
  4007e2:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4007e4:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400810 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4007e8:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4007ea:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400814 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4007ee:	4621      	mov	r1, r4
  4007f0:	4628      	mov	r0, r5
  4007f2:	47c0      	blx	r8
			temp &= ~pixelmask;
  4007f4:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4007f8:	2300      	movs	r3, #0
  4007fa:	b2d2      	uxtb	r2, r2
  4007fc:	4621      	mov	r1, r4
  4007fe:	4628      	mov	r0, r5
  400800:	47c8      	blx	r9
  400802:	3c01      	subs	r4, #1
  400804:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400806:	42bc      	cmp	r4, r7
  400808:	d1f1      	bne.n	4007ee <gfx_mono_generic_draw_horizontal_line+0xa6>
  40080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40080e:	bf00      	nop
  400810:	00400c05 	.word	0x00400c05
  400814:	00400b01 	.word	0x00400b01

00400818 <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  400818:	2a00      	cmp	r2, #0
  40081a:	d048      	beq.n	4008ae <gfx_mono_generic_draw_vertical_line+0x96>
{
  40081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400820:	4614      	mov	r4, r2
  400822:	461f      	mov	r7, r3
  400824:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  400826:	1e4a      	subs	r2, r1, #1
  400828:	4422      	add	r2, r4
  40082a:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  40082c:	4291      	cmp	r1, r2
  40082e:	d031      	beq.n	400894 <gfx_mono_generic_draw_vertical_line+0x7c>
  400830:	2a1f      	cmp	r2, #31
  400832:	bf28      	it	cs
  400834:	221f      	movcs	r2, #31
  400836:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  400838:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  40083a:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  40083e:	f001 0207 	and.w	r2, r1, #7
  400842:	23ff      	movs	r3, #255	; 0xff
  400844:	fa03 f202 	lsl.w	r2, r3, r2
  400848:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  40084a:	f005 0507 	and.w	r5, r5, #7
  40084e:	f1c5 0507 	rsb	r5, r5, #7
  400852:	fa43 f505 	asr.w	r5, r3, r5
  400856:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  400858:	4544      	cmp	r4, r8
  40085a:	d020      	beq.n	40089e <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  40085c:	463b      	mov	r3, r7
  40085e:	4601      	mov	r1, r0
  400860:	4620      	mov	r0, r4
  400862:	f8df 904c 	ldr.w	r9, [pc, #76]	; 4008b0 <gfx_mono_generic_draw_vertical_line+0x98>
  400866:	47c8      	blx	r9

		while (++y1page < y2page) {
  400868:	3401      	adds	r4, #1
  40086a:	45a0      	cmp	r8, r4
  40086c:	d90a      	bls.n	400884 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  40086e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  400872:	463b      	mov	r3, r7
  400874:	4652      	mov	r2, sl
  400876:	4631      	mov	r1, r6
  400878:	4620      	mov	r0, r4
  40087a:	47c8      	blx	r9
		while (++y1page < y2page) {
  40087c:	3401      	adds	r4, #1
  40087e:	b2e4      	uxtb	r4, r4
  400880:	45a0      	cmp	r8, r4
  400882:	d8f6      	bhi.n	400872 <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  400884:	463b      	mov	r3, r7
  400886:	462a      	mov	r2, r5
  400888:	4631      	mov	r1, r6
  40088a:	4640      	mov	r0, r8
  40088c:	4c08      	ldr	r4, [pc, #32]	; (4008b0 <gfx_mono_generic_draw_vertical_line+0x98>)
  40088e:	47a0      	blx	r4
  400890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400894:	461a      	mov	r2, r3
  400896:	4b07      	ldr	r3, [pc, #28]	; (4008b4 <gfx_mono_generic_draw_vertical_line+0x9c>)
  400898:	4798      	blx	r3
		return;
  40089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  40089e:	463b      	mov	r3, r7
  4008a0:	402a      	ands	r2, r5
  4008a2:	4601      	mov	r1, r0
  4008a4:	4620      	mov	r0, r4
  4008a6:	4c02      	ldr	r4, [pc, #8]	; (4008b0 <gfx_mono_generic_draw_vertical_line+0x98>)
  4008a8:	47a0      	blx	r4
  4008aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4008ae:	4770      	bx	lr
  4008b0:	00400c11 	.word	0x00400c11
  4008b4:	00400ba1 	.word	0x00400ba1

004008b8 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4008b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4008bc:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  4008c0:	b18b      	cbz	r3, 4008e6 <gfx_mono_generic_draw_filled_rect+0x2e>
  4008c2:	461c      	mov	r4, r3
  4008c4:	4690      	mov	r8, r2
  4008c6:	4606      	mov	r6, r0
  4008c8:	1e4d      	subs	r5, r1, #1
  4008ca:	b2ed      	uxtb	r5, r5
  4008cc:	442c      	add	r4, r5
  4008ce:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4008d0:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4008ec <gfx_mono_generic_draw_filled_rect+0x34>
  4008d4:	463b      	mov	r3, r7
  4008d6:	4642      	mov	r2, r8
  4008d8:	4621      	mov	r1, r4
  4008da:	4630      	mov	r0, r6
  4008dc:	47c8      	blx	r9
  4008de:	3c01      	subs	r4, #1
  4008e0:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4008e2:	42ac      	cmp	r4, r5
  4008e4:	d1f6      	bne.n	4008d4 <gfx_mono_generic_draw_filled_rect+0x1c>
  4008e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008ea:	bf00      	nop
  4008ec:	00400749 	.word	0x00400749

004008f0 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  4008f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4008f4:	b085      	sub	sp, #20
  4008f6:	4681      	mov	r9, r0
  4008f8:	9100      	str	r1, [sp, #0]
  4008fa:	9301      	str	r3, [sp, #4]
  4008fc:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  400900:	b17a      	cbz	r2, 400922 <gfx_mono_generic_draw_filled_circle+0x32>
  400902:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  400904:	0055      	lsls	r5, r2, #1
  400906:	f1c5 0503 	rsb	r5, r5, #3
  40090a:	2701      	movs	r7, #1
  40090c:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  400910:	f00b 0303 	and.w	r3, fp, #3
  400914:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  400916:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 400a08 <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  40091a:	f00b 030c 	and.w	r3, fp, #12
  40091e:	9303      	str	r3, [sp, #12]
  400920:	e04d      	b.n	4009be <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  400922:	461a      	mov	r2, r3
  400924:	4b37      	ldr	r3, [pc, #220]	; (400a04 <gfx_mono_generic_draw_filled_circle+0x114>)
  400926:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  400928:	b005      	add	sp, #20
  40092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  40092e:	9b00      	ldr	r3, [sp, #0]
  400930:	1b19      	subs	r1, r3, r4
  400932:	eb09 0006 	add.w	r0, r9, r6
  400936:	9b01      	ldr	r3, [sp, #4]
  400938:	463a      	mov	r2, r7
  40093a:	b2c9      	uxtb	r1, r1
  40093c:	b2c0      	uxtb	r0, r0
  40093e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400940:	1c72      	adds	r2, r6, #1
  400942:	9900      	ldr	r1, [sp, #0]
  400944:	1b89      	subs	r1, r1, r6
  400946:	eb09 0004 	add.w	r0, r9, r4
  40094a:	9b01      	ldr	r3, [sp, #4]
  40094c:	b2d2      	uxtb	r2, r2
  40094e:	b2c9      	uxtb	r1, r1
  400950:	b2c0      	uxtb	r0, r0
  400952:	47d0      	blx	sl
  400954:	e038      	b.n	4009c8 <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  400956:	9b00      	ldr	r3, [sp, #0]
  400958:	1b19      	subs	r1, r3, r4
  40095a:	eba9 0006 	sub.w	r0, r9, r6
  40095e:	9b01      	ldr	r3, [sp, #4]
  400960:	463a      	mov	r2, r7
  400962:	b2c9      	uxtb	r1, r1
  400964:	b2c0      	uxtb	r0, r0
  400966:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400968:	1c72      	adds	r2, r6, #1
  40096a:	9900      	ldr	r1, [sp, #0]
  40096c:	1b89      	subs	r1, r1, r6
  40096e:	eba9 0004 	sub.w	r0, r9, r4
  400972:	9b01      	ldr	r3, [sp, #4]
  400974:	b2d2      	uxtb	r2, r2
  400976:	b2c9      	uxtb	r1, r1
  400978:	b2c0      	uxtb	r0, r0
  40097a:	47d0      	blx	sl
  40097c:	e027      	b.n	4009ce <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  40097e:	eba9 0006 	sub.w	r0, r9, r6
  400982:	9b01      	ldr	r3, [sp, #4]
  400984:	463a      	mov	r2, r7
  400986:	9900      	ldr	r1, [sp, #0]
  400988:	b2c0      	uxtb	r0, r0
  40098a:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  40098c:	1c72      	adds	r2, r6, #1
  40098e:	eba9 0004 	sub.w	r0, r9, r4
  400992:	9b01      	ldr	r3, [sp, #4]
  400994:	b2d2      	uxtb	r2, r2
  400996:	9900      	ldr	r1, [sp, #0]
  400998:	b2c0      	uxtb	r0, r0
  40099a:	47d0      	blx	sl
  40099c:	e01a      	b.n	4009d4 <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  40099e:	2d00      	cmp	r5, #0
  4009a0:	db2b      	blt.n	4009fa <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  4009a2:	1ba4      	subs	r4, r4, r6
  4009a4:	350a      	adds	r5, #10
  4009a6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  4009aa:	b225      	sxth	r5, r4
			--offset_y;
  4009ac:	3e01      	subs	r6, #1
  4009ae:	b2f6      	uxtb	r6, r6
  4009b0:	f108 0801 	add.w	r8, r8, #1
  4009b4:	1c7b      	adds	r3, r7, #1
  4009b6:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  4009b8:	42be      	cmp	r6, r7
  4009ba:	d3b5      	bcc.n	400928 <gfx_mono_generic_draw_filled_circle+0x38>
  4009bc:	461f      	mov	r7, r3
  4009be:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  4009c2:	9b02      	ldr	r3, [sp, #8]
  4009c4:	2b00      	cmp	r3, #0
  4009c6:	d1b2      	bne.n	40092e <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  4009c8:	9b03      	ldr	r3, [sp, #12]
  4009ca:	2b00      	cmp	r3, #0
  4009cc:	d1c3      	bne.n	400956 <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  4009ce:	f01b 0f30 	tst.w	fp, #48	; 0x30
  4009d2:	d1d4      	bne.n	40097e <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  4009d4:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  4009d8:	d0e1      	beq.n	40099e <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  4009da:	eb09 0006 	add.w	r0, r9, r6
  4009de:	9b01      	ldr	r3, [sp, #4]
  4009e0:	463a      	mov	r2, r7
  4009e2:	9900      	ldr	r1, [sp, #0]
  4009e4:	b2c0      	uxtb	r0, r0
  4009e6:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  4009e8:	1c72      	adds	r2, r6, #1
  4009ea:	eb09 0004 	add.w	r0, r9, r4
  4009ee:	9b01      	ldr	r3, [sp, #4]
  4009f0:	b2d2      	uxtb	r2, r2
  4009f2:	9900      	ldr	r1, [sp, #0]
  4009f4:	b2c0      	uxtb	r0, r0
  4009f6:	47d0      	blx	sl
  4009f8:	e7d1      	b.n	40099e <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  4009fa:	3506      	adds	r5, #6
  4009fc:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  400a00:	b22d      	sxth	r5, r5
  400a02:	e7d5      	b.n	4009b0 <gfx_mono_generic_draw_filled_circle+0xc0>
  400a04:	00400ba1 	.word	0x00400ba1
  400a08:	00400819 	.word	0x00400819

00400a0c <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400a10:	b083      	sub	sp, #12
  400a12:	4604      	mov	r4, r0
  400a14:	4688      	mov	r8, r1
  400a16:	4691      	mov	r9, r2
  400a18:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400a1a:	7a5b      	ldrb	r3, [r3, #9]
  400a1c:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400a20:	2100      	movs	r1, #0
  400a22:	9100      	str	r1, [sp, #0]
  400a24:	4649      	mov	r1, r9
  400a26:	4640      	mov	r0, r8
  400a28:	4d21      	ldr	r5, [pc, #132]	; (400ab0 <gfx_mono_draw_char+0xa4>)
  400a2a:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400a2c:	f89b 3000 	ldrb.w	r3, [fp]
  400a30:	b113      	cbz	r3, 400a38 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400a32:	b003      	add	sp, #12
  400a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400a38:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400a3c:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400a3e:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400a42:	bf18      	it	ne
  400a44:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400a46:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400a4a:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400a4e:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400a50:	fb17 f70a 	smulbb	r7, r7, sl
  400a54:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400a58:	f8db 3004 	ldr.w	r3, [fp, #4]
  400a5c:	fa13 f787 	uxtah	r7, r3, r7
  400a60:	e01f      	b.n	400aa2 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400a62:	0064      	lsls	r4, r4, #1
  400a64:	b2e4      	uxtb	r4, r4
  400a66:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400a68:	b2eb      	uxtb	r3, r5
  400a6a:	429e      	cmp	r6, r3
  400a6c:	d910      	bls.n	400a90 <gfx_mono_draw_char+0x84>
  400a6e:	b2eb      	uxtb	r3, r5
  400a70:	eb08 0003 	add.w	r0, r8, r3
  400a74:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400a76:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400a7a:	bf08      	it	eq
  400a7c:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400a80:	f014 0f80 	tst.w	r4, #128	; 0x80
  400a84:	d0ed      	beq.n	400a62 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400a86:	2201      	movs	r2, #1
  400a88:	4649      	mov	r1, r9
  400a8a:	4b0a      	ldr	r3, [pc, #40]	; (400ab4 <gfx_mono_draw_char+0xa8>)
  400a8c:	4798      	blx	r3
  400a8e:	e7e8      	b.n	400a62 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400a90:	f109 0901 	add.w	r9, r9, #1
  400a94:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400a98:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400a9c:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400aa0:	d0c7      	beq.n	400a32 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400aa2:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400aa6:	2e00      	cmp	r6, #0
  400aa8:	d0f2      	beq.n	400a90 <gfx_mono_draw_char+0x84>
  400aaa:	2500      	movs	r5, #0
  400aac:	462c      	mov	r4, r5
  400aae:	e7de      	b.n	400a6e <gfx_mono_draw_char+0x62>
  400ab0:	004008b9 	.word	0x004008b9
  400ab4:	00400ba1 	.word	0x00400ba1

00400ab8 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400abc:	4604      	mov	r4, r0
  400abe:	4690      	mov	r8, r2
  400ac0:	461d      	mov	r5, r3
  400ac2:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400ac4:	4f0d      	ldr	r7, [pc, #52]	; (400afc <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400ac6:	460e      	mov	r6, r1
  400ac8:	e008      	b.n	400adc <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400aca:	7a6a      	ldrb	r2, [r5, #9]
  400acc:	3201      	adds	r2, #1
  400ace:	4442      	add	r2, r8
  400ad0:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400ad4:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400ad6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400ada:	b16b      	cbz	r3, 400af8 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400adc:	7820      	ldrb	r0, [r4, #0]
  400ade:	280a      	cmp	r0, #10
  400ae0:	d0f3      	beq.n	400aca <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400ae2:	280d      	cmp	r0, #13
  400ae4:	d0f7      	beq.n	400ad6 <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400ae6:	462b      	mov	r3, r5
  400ae8:	4642      	mov	r2, r8
  400aea:	4649      	mov	r1, r9
  400aec:	47b8      	blx	r7
			x += font->width;
  400aee:	7a2b      	ldrb	r3, [r5, #8]
  400af0:	4499      	add	r9, r3
  400af2:	fa5f f989 	uxtb.w	r9, r9
  400af6:	e7ee      	b.n	400ad6 <gfx_mono_draw_string+0x1e>
}
  400af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400afc:	00400a0d 	.word	0x00400a0d

00400b00 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400b00:	b570      	push	{r4, r5, r6, lr}
  400b02:	4604      	mov	r4, r0
  400b04:	460d      	mov	r5, r1
  400b06:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400b08:	b91b      	cbnz	r3, 400b12 <gfx_mono_ssd1306_put_byte+0x12>
  400b0a:	4b0d      	ldr	r3, [pc, #52]	; (400b40 <gfx_mono_ssd1306_put_byte+0x40>)
  400b0c:	4798      	blx	r3
  400b0e:	42b0      	cmp	r0, r6
  400b10:	d015      	beq.n	400b3e <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400b12:	4632      	mov	r2, r6
  400b14:	4629      	mov	r1, r5
  400b16:	4620      	mov	r0, r4
  400b18:	4b0a      	ldr	r3, [pc, #40]	; (400b44 <gfx_mono_ssd1306_put_byte+0x44>)
  400b1a:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400b1c:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400b20:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400b24:	4c08      	ldr	r4, [pc, #32]	; (400b48 <gfx_mono_ssd1306_put_byte+0x48>)
  400b26:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400b28:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400b2c:	f040 0010 	orr.w	r0, r0, #16
  400b30:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400b32:	f005 000f 	and.w	r0, r5, #15
  400b36:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400b38:	4630      	mov	r0, r6
  400b3a:	4b04      	ldr	r3, [pc, #16]	; (400b4c <gfx_mono_ssd1306_put_byte+0x4c>)
  400b3c:	4798      	blx	r3
  400b3e:	bd70      	pop	{r4, r5, r6, pc}
  400b40:	00400739 	.word	0x00400739
  400b44:	00400729 	.word	0x00400729
  400b48:	00400c55 	.word	0x00400c55
  400b4c:	00400e75 	.word	0x00400e75

00400b50 <gfx_mono_ssd1306_init>:
{
  400b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400b54:	480d      	ldr	r0, [pc, #52]	; (400b8c <gfx_mono_ssd1306_init+0x3c>)
  400b56:	4b0e      	ldr	r3, [pc, #56]	; (400b90 <gfx_mono_ssd1306_init+0x40>)
  400b58:	4798      	blx	r3
	ssd1306_init();
  400b5a:	4b0e      	ldr	r3, [pc, #56]	; (400b94 <gfx_mono_ssd1306_init+0x44>)
  400b5c:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400b5e:	2040      	movs	r0, #64	; 0x40
  400b60:	4b0d      	ldr	r3, [pc, #52]	; (400b98 <gfx_mono_ssd1306_init+0x48>)
  400b62:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b64:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b66:	f04f 0801 	mov.w	r8, #1
  400b6a:	462f      	mov	r7, r5
  400b6c:	4e0b      	ldr	r6, [pc, #44]	; (400b9c <gfx_mono_ssd1306_init+0x4c>)
{
  400b6e:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400b70:	4643      	mov	r3, r8
  400b72:	463a      	mov	r2, r7
  400b74:	b2e1      	uxtb	r1, r4
  400b76:	4628      	mov	r0, r5
  400b78:	47b0      	blx	r6
  400b7a:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400b7c:	2c80      	cmp	r4, #128	; 0x80
  400b7e:	d1f7      	bne.n	400b70 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400b80:	3501      	adds	r5, #1
  400b82:	b2ed      	uxtb	r5, r5
  400b84:	2d04      	cmp	r5, #4
  400b86:	d1f2      	bne.n	400b6e <gfx_mono_ssd1306_init+0x1e>
  400b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b8c:	204009f4 	.word	0x204009f4
  400b90:	0040071d 	.word	0x0040071d
  400b94:	00400c95 	.word	0x00400c95
  400b98:	00400c55 	.word	0x00400c55
  400b9c:	00400b01 	.word	0x00400b01

00400ba0 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400ba0:	09c3      	lsrs	r3, r0, #7
  400ba2:	d12a      	bne.n	400bfa <gfx_mono_ssd1306_draw_pixel+0x5a>
  400ba4:	291f      	cmp	r1, #31
  400ba6:	d828      	bhi.n	400bfa <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400bac:	4614      	mov	r4, r2
  400bae:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400bb0:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400bb2:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400bb6:	2201      	movs	r2, #1
  400bb8:	fa02 f701 	lsl.w	r7, r2, r1
  400bbc:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400bc0:	4601      	mov	r1, r0
  400bc2:	4630      	mov	r0, r6
  400bc4:	4b0d      	ldr	r3, [pc, #52]	; (400bfc <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400bc6:	4798      	blx	r3
  400bc8:	4602      	mov	r2, r0
	switch (color) {
  400bca:	2c01      	cmp	r4, #1
  400bcc:	d009      	beq.n	400be2 <gfx_mono_ssd1306_draw_pixel+0x42>
  400bce:	b164      	cbz	r4, 400bea <gfx_mono_ssd1306_draw_pixel+0x4a>
  400bd0:	2c02      	cmp	r4, #2
  400bd2:	d00e      	beq.n	400bf2 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400bd4:	2300      	movs	r3, #0
  400bd6:	4629      	mov	r1, r5
  400bd8:	4630      	mov	r0, r6
  400bda:	4c09      	ldr	r4, [pc, #36]	; (400c00 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400bdc:	47a0      	blx	r4
  400bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400be2:	ea48 0200 	orr.w	r2, r8, r0
  400be6:	b2d2      	uxtb	r2, r2
		break;
  400be8:	e7f4      	b.n	400bd4 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400bea:	ea20 0207 	bic.w	r2, r0, r7
  400bee:	b2d2      	uxtb	r2, r2
		break;
  400bf0:	e7f0      	b.n	400bd4 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400bf2:	ea88 0200 	eor.w	r2, r8, r0
  400bf6:	b2d2      	uxtb	r2, r2
		break;
  400bf8:	e7ec      	b.n	400bd4 <gfx_mono_ssd1306_draw_pixel+0x34>
  400bfa:	4770      	bx	lr
  400bfc:	00400739 	.word	0x00400739
  400c00:	00400b01 	.word	0x00400b01

00400c04 <gfx_mono_ssd1306_get_byte>:
{
  400c04:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400c06:	4b01      	ldr	r3, [pc, #4]	; (400c0c <gfx_mono_ssd1306_get_byte+0x8>)
  400c08:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400c0a:	bd08      	pop	{r3, pc}
  400c0c:	00400739 	.word	0x00400739

00400c10 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400c12:	4605      	mov	r5, r0
  400c14:	460e      	mov	r6, r1
  400c16:	4617      	mov	r7, r2
  400c18:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400c1a:	4b0c      	ldr	r3, [pc, #48]	; (400c4c <gfx_mono_ssd1306_mask_byte+0x3c>)
  400c1c:	4798      	blx	r3
  400c1e:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  400c20:	2c01      	cmp	r4, #1
  400c22:	d008      	beq.n	400c36 <gfx_mono_ssd1306_mask_byte+0x26>
  400c24:	b154      	cbz	r4, 400c3c <gfx_mono_ssd1306_mask_byte+0x2c>
  400c26:	2c02      	cmp	r4, #2
  400c28:	d00c      	beq.n	400c44 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400c2a:	2300      	movs	r3, #0
  400c2c:	4631      	mov	r1, r6
  400c2e:	4628      	mov	r0, r5
  400c30:	4c07      	ldr	r4, [pc, #28]	; (400c50 <gfx_mono_ssd1306_mask_byte+0x40>)
  400c32:	47a0      	blx	r4
  400c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  400c36:	433a      	orrs	r2, r7
  400c38:	b2d2      	uxtb	r2, r2
		break;
  400c3a:	e7f6      	b.n	400c2a <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400c3c:	ea20 0207 	bic.w	r2, r0, r7
  400c40:	b2d2      	uxtb	r2, r2
		break;
  400c42:	e7f2      	b.n	400c2a <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  400c44:	407a      	eors	r2, r7
  400c46:	b2d2      	uxtb	r2, r2
		break;
  400c48:	e7ef      	b.n	400c2a <gfx_mono_ssd1306_mask_byte+0x1a>
  400c4a:	bf00      	nop
  400c4c:	00400739 	.word	0x00400739
  400c50:	00400b01 	.word	0x00400b01

00400c54 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400c54:	b538      	push	{r3, r4, r5, lr}
  400c56:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400c58:	2208      	movs	r2, #8
  400c5a:	4b09      	ldr	r3, [pc, #36]	; (400c80 <ssd1306_write_command+0x2c>)
  400c5c:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400c5e:	4c09      	ldr	r4, [pc, #36]	; (400c84 <ssd1306_write_command+0x30>)
  400c60:	2101      	movs	r1, #1
  400c62:	4620      	mov	r0, r4
  400c64:	4b08      	ldr	r3, [pc, #32]	; (400c88 <ssd1306_write_command+0x34>)
  400c66:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400c68:	2301      	movs	r3, #1
  400c6a:	461a      	mov	r2, r3
  400c6c:	4629      	mov	r1, r5
  400c6e:	4620      	mov	r0, r4
  400c70:	4c06      	ldr	r4, [pc, #24]	; (400c8c <ssd1306_write_command+0x38>)
  400c72:	47a0      	blx	r4
	delay_us(10);
  400c74:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400c78:	4b05      	ldr	r3, [pc, #20]	; (400c90 <ssd1306_write_command+0x3c>)
  400c7a:	4798      	blx	r3
  400c7c:	bd38      	pop	{r3, r4, r5, pc}
  400c7e:	bf00      	nop
  400c80:	400e1000 	.word	0x400e1000
  400c84:	40008000 	.word	0x40008000
  400c88:	00400555 	.word	0x00400555
  400c8c:	0040056b 	.word	0x0040056b
  400c90:	20400001 	.word	0x20400001

00400c94 <ssd1306_init>:
{
  400c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400c98:	4d66      	ldr	r5, [pc, #408]	; (400e34 <ssd1306_init+0x1a0>)
  400c9a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400c9e:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ca0:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ca4:	4b64      	ldr	r3, [pc, #400]	; (400e38 <ssd1306_init+0x1a4>)
  400ca6:	2708      	movs	r7, #8
  400ca8:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400caa:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400cae:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400cb0:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cb4:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400cb6:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cb8:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cbc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400cbe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400cc2:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400cc4:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400cc6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400cca:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400ccc:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400cce:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400cd2:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400cd4:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400cd6:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400cda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400cdc:	f022 0208 	bic.w	r2, r2, #8
  400ce0:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ce2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400ce4:	f022 0208 	bic.w	r2, r2, #8
  400ce8:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400cea:	601f      	str	r7, [r3, #0]
  400cec:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400cee:	631f      	str	r7, [r3, #48]	; 0x30
  400cf0:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400cf2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400e70 <ssd1306_init+0x1dc>
  400cf6:	2300      	movs	r3, #0
  400cf8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400cfc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d00:	4640      	mov	r0, r8
  400d02:	4c4e      	ldr	r4, [pc, #312]	; (400e3c <ssd1306_init+0x1a8>)
  400d04:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400d06:	2300      	movs	r3, #0
  400d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400d0c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d10:	4640      	mov	r0, r8
  400d12:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400d14:	2300      	movs	r3, #0
  400d16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400d1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d1e:	4640      	mov	r0, r8
  400d20:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400d22:	2300      	movs	r3, #0
  400d24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400d28:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d2c:	4640      	mov	r0, r8
  400d2e:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400d30:	2300      	movs	r3, #0
  400d32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400d36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d3a:	4640      	mov	r0, r8
  400d3c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400d3e:	2300      	movs	r3, #0
  400d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400d44:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400d48:	4640      	mov	r0, r8
  400d4a:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400d4c:	4c3c      	ldr	r4, [pc, #240]	; (400e40 <ssd1306_init+0x1ac>)
  400d4e:	f04f 0902 	mov.w	r9, #2
  400d52:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400d56:	f04f 0880 	mov.w	r8, #128	; 0x80
  400d5a:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400d5e:	6863      	ldr	r3, [r4, #4]
  400d60:	f043 0301 	orr.w	r3, r3, #1
  400d64:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400d66:	463a      	mov	r2, r7
  400d68:	2101      	movs	r1, #1
  400d6a:	4620      	mov	r0, r4
  400d6c:	4b35      	ldr	r3, [pc, #212]	; (400e44 <ssd1306_init+0x1b0>)
  400d6e:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400d70:	2200      	movs	r2, #0
  400d72:	2101      	movs	r1, #1
  400d74:	4620      	mov	r0, r4
  400d76:	4b34      	ldr	r3, [pc, #208]	; (400e48 <ssd1306_init+0x1b4>)
  400d78:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400d7a:	2200      	movs	r2, #0
  400d7c:	2101      	movs	r1, #1
  400d7e:	4620      	mov	r0, r4
  400d80:	4b32      	ldr	r3, [pc, #200]	; (400e4c <ssd1306_init+0x1b8>)
  400d82:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400d84:	6863      	ldr	r3, [r4, #4]
  400d86:	f023 0302 	bic.w	r3, r3, #2
  400d8a:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400d8c:	2200      	movs	r2, #0
  400d8e:	2101      	movs	r1, #1
  400d90:	4620      	mov	r0, r4
  400d92:	4b2f      	ldr	r3, [pc, #188]	; (400e50 <ssd1306_init+0x1bc>)
  400d94:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400d96:	6863      	ldr	r3, [r4, #4]
  400d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400d9c:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400d9e:	6863      	ldr	r3, [r4, #4]
  400da0:	f043 0310 	orr.w	r3, r3, #16
  400da4:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  400da6:	492b      	ldr	r1, [pc, #172]	; (400e54 <ssd1306_init+0x1c0>)
  400da8:	482b      	ldr	r0, [pc, #172]	; (400e58 <ssd1306_init+0x1c4>)
  400daa:	4b2c      	ldr	r3, [pc, #176]	; (400e5c <ssd1306_init+0x1c8>)
  400dac:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400dae:	b2c2      	uxtb	r2, r0
  400db0:	2101      	movs	r1, #1
  400db2:	4620      	mov	r0, r4
  400db4:	4b2a      	ldr	r3, [pc, #168]	; (400e60 <ssd1306_init+0x1cc>)
  400db6:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400db8:	4620      	mov	r0, r4
  400dba:	4b2a      	ldr	r3, [pc, #168]	; (400e64 <ssd1306_init+0x1d0>)
  400dbc:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400dbe:	2301      	movs	r3, #1
  400dc0:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400dc2:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400dc4:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400dc8:	4c27      	ldr	r4, [pc, #156]	; (400e68 <ssd1306_init+0x1d4>)
  400dca:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400dcc:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400dce:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400dd2:	47a0      	blx	r4
  400dd4:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400dd6:	20a8      	movs	r0, #168	; 0xa8
  400dd8:	4c24      	ldr	r4, [pc, #144]	; (400e6c <ssd1306_init+0x1d8>)
  400dda:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ddc:	201f      	movs	r0, #31
  400dde:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400de0:	20d3      	movs	r0, #211	; 0xd3
  400de2:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400de4:	2000      	movs	r0, #0
  400de6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400de8:	2040      	movs	r0, #64	; 0x40
  400dea:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400dec:	20a1      	movs	r0, #161	; 0xa1
  400dee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400df0:	20c8      	movs	r0, #200	; 0xc8
  400df2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400df4:	20da      	movs	r0, #218	; 0xda
  400df6:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400df8:	4648      	mov	r0, r9
  400dfa:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400dfc:	2081      	movs	r0, #129	; 0x81
  400dfe:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400e00:	208f      	movs	r0, #143	; 0x8f
  400e02:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400e04:	20a4      	movs	r0, #164	; 0xa4
  400e06:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400e08:	20a6      	movs	r0, #166	; 0xa6
  400e0a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400e0c:	20d5      	movs	r0, #213	; 0xd5
  400e0e:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400e10:	4640      	mov	r0, r8
  400e12:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400e14:	208d      	movs	r0, #141	; 0x8d
  400e16:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400e18:	2014      	movs	r0, #20
  400e1a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400e1c:	20db      	movs	r0, #219	; 0xdb
  400e1e:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400e20:	2040      	movs	r0, #64	; 0x40
  400e22:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400e24:	20d9      	movs	r0, #217	; 0xd9
  400e26:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400e28:	20f1      	movs	r0, #241	; 0xf1
  400e2a:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400e2c:	20af      	movs	r0, #175	; 0xaf
  400e2e:	47a0      	blx	r4
  400e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400e34:	400e1200 	.word	0x400e1200
  400e38:	400e1000 	.word	0x400e1000
  400e3c:	0040115d 	.word	0x0040115d
  400e40:	40008000 	.word	0x40008000
  400e44:	004005db 	.word	0x004005db
  400e48:	0040059f 	.word	0x0040059f
  400e4c:	004005bd 	.word	0x004005bd
  400e50:	00400621 	.word	0x00400621
  400e54:	08f0d180 	.word	0x08f0d180
  400e58:	000f4240 	.word	0x000f4240
  400e5c:	00400635 	.word	0x00400635
  400e60:	0040064b 	.word	0x0040064b
  400e64:	00400529 	.word	0x00400529
  400e68:	20400001 	.word	0x20400001
  400e6c:	00400c55 	.word	0x00400c55
  400e70:	400e1400 	.word	0x400e1400

00400e74 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400e74:	b538      	push	{r3, r4, r5, lr}
  400e76:	4605      	mov	r5, r0
  400e78:	2208      	movs	r2, #8
  400e7a:	4b09      	ldr	r3, [pc, #36]	; (400ea0 <ssd1306_write_data+0x2c>)
  400e7c:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400e7e:	4c09      	ldr	r4, [pc, #36]	; (400ea4 <ssd1306_write_data+0x30>)
  400e80:	2101      	movs	r1, #1
  400e82:	4620      	mov	r0, r4
  400e84:	4b08      	ldr	r3, [pc, #32]	; (400ea8 <ssd1306_write_data+0x34>)
  400e86:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400e88:	2301      	movs	r3, #1
  400e8a:	461a      	mov	r2, r3
  400e8c:	4629      	mov	r1, r5
  400e8e:	4620      	mov	r0, r4
  400e90:	4c06      	ldr	r4, [pc, #24]	; (400eac <ssd1306_write_data+0x38>)
  400e92:	47a0      	blx	r4
	delay_us(10);
  400e94:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400e98:	4b05      	ldr	r3, [pc, #20]	; (400eb0 <ssd1306_write_data+0x3c>)
  400e9a:	4798      	blx	r3
  400e9c:	bd38      	pop	{r3, r4, r5, pc}
  400e9e:	bf00      	nop
  400ea0:	400e1000 	.word	0x400e1000
  400ea4:	40008000 	.word	0x40008000
  400ea8:	00400555 	.word	0x00400555
  400eac:	0040056b 	.word	0x0040056b
  400eb0:	20400001 	.word	0x20400001

00400eb4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400eb4:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400eb6:	4810      	ldr	r0, [pc, #64]	; (400ef8 <sysclk_init+0x44>)
  400eb8:	4b10      	ldr	r3, [pc, #64]	; (400efc <sysclk_init+0x48>)
  400eba:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400ebc:	213e      	movs	r1, #62	; 0x3e
  400ebe:	2000      	movs	r0, #0
  400ec0:	4b0f      	ldr	r3, [pc, #60]	; (400f00 <sysclk_init+0x4c>)
  400ec2:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400ec4:	4c0f      	ldr	r4, [pc, #60]	; (400f04 <sysclk_init+0x50>)
  400ec6:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400ec8:	2800      	cmp	r0, #0
  400eca:	d0fc      	beq.n	400ec6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400ecc:	4b0e      	ldr	r3, [pc, #56]	; (400f08 <sysclk_init+0x54>)
  400ece:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400ed0:	4a0e      	ldr	r2, [pc, #56]	; (400f0c <sysclk_init+0x58>)
  400ed2:	4b0f      	ldr	r3, [pc, #60]	; (400f10 <sysclk_init+0x5c>)
  400ed4:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400ed6:	4c0f      	ldr	r4, [pc, #60]	; (400f14 <sysclk_init+0x60>)
  400ed8:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400eda:	2800      	cmp	r0, #0
  400edc:	d0fc      	beq.n	400ed8 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400ede:	2002      	movs	r0, #2
  400ee0:	4b0d      	ldr	r3, [pc, #52]	; (400f18 <sysclk_init+0x64>)
  400ee2:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400ee4:	2000      	movs	r0, #0
  400ee6:	4b0d      	ldr	r3, [pc, #52]	; (400f1c <sysclk_init+0x68>)
  400ee8:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400eea:	4b0d      	ldr	r3, [pc, #52]	; (400f20 <sysclk_init+0x6c>)
  400eec:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400eee:	4802      	ldr	r0, [pc, #8]	; (400ef8 <sysclk_init+0x44>)
  400ef0:	4b02      	ldr	r3, [pc, #8]	; (400efc <sysclk_init+0x48>)
  400ef2:	4798      	blx	r3
  400ef4:	bd10      	pop	{r4, pc}
  400ef6:	bf00      	nop
  400ef8:	11e1a300 	.word	0x11e1a300
  400efc:	004018c5 	.word	0x004018c5
  400f00:	00401351 	.word	0x00401351
  400f04:	004013a5 	.word	0x004013a5
  400f08:	004013b5 	.word	0x004013b5
  400f0c:	20183f01 	.word	0x20183f01
  400f10:	400e0600 	.word	0x400e0600
  400f14:	004013c5 	.word	0x004013c5
  400f18:	004012b5 	.word	0x004012b5
  400f1c:	004012ed 	.word	0x004012ed
  400f20:	004017b9 	.word	0x004017b9

00400f24 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400f26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f2a:	4b48      	ldr	r3, [pc, #288]	; (40104c <board_init+0x128>)
  400f2c:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400f2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f32:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400f36:	4b46      	ldr	r3, [pc, #280]	; (401050 <board_init+0x12c>)
  400f38:	2200      	movs	r2, #0
  400f3a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400f3e:	695a      	ldr	r2, [r3, #20]
  400f40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400f44:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400f46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400f4a:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400f4e:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400f52:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400f56:	f007 0007 	and.w	r0, r7, #7
  400f5a:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400f5c:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400f60:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400f64:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400f68:	f3bf 8f4f 	dsb	sy
  400f6c:	f04f 34ff 	mov.w	r4, #4294967295
  400f70:	fa04 fc00 	lsl.w	ip, r4, r0
  400f74:	fa06 f000 	lsl.w	r0, r6, r0
  400f78:	fa04 f40e 	lsl.w	r4, r4, lr
  400f7c:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400f80:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400f82:	463a      	mov	r2, r7
  400f84:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400f86:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400f8a:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400f8e:	3a01      	subs	r2, #1
  400f90:	4423      	add	r3, r4
  400f92:	f1b2 3fff 	cmp.w	r2, #4294967295
  400f96:	d1f6      	bne.n	400f86 <board_init+0x62>
        } while(sets--);
  400f98:	3e01      	subs	r6, #1
  400f9a:	4460      	add	r0, ip
  400f9c:	f1b6 3fff 	cmp.w	r6, #4294967295
  400fa0:	d1ef      	bne.n	400f82 <board_init+0x5e>
  400fa2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400fa6:	4b2a      	ldr	r3, [pc, #168]	; (401050 <board_init+0x12c>)
  400fa8:	695a      	ldr	r2, [r3, #20]
  400faa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400fae:	615a      	str	r2, [r3, #20]
  400fb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400fb4:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400fb8:	4a26      	ldr	r2, [pc, #152]	; (401054 <board_init+0x130>)
  400fba:	4927      	ldr	r1, [pc, #156]	; (401058 <board_init+0x134>)
  400fbc:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400fbe:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400fc2:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400fc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400fc8:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400fcc:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400fd0:	f022 0201 	bic.w	r2, r2, #1
  400fd4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400fd8:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400fdc:	f022 0201 	bic.w	r2, r2, #1
  400fe0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400fe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400fe8:	f3bf 8f6f 	isb	sy
  400fec:	200a      	movs	r0, #10
  400fee:	4c1b      	ldr	r4, [pc, #108]	; (40105c <board_init+0x138>)
  400ff0:	47a0      	blx	r4
  400ff2:	200b      	movs	r0, #11
  400ff4:	47a0      	blx	r4
  400ff6:	200c      	movs	r0, #12
  400ff8:	47a0      	blx	r4
  400ffa:	2010      	movs	r0, #16
  400ffc:	47a0      	blx	r4
  400ffe:	2011      	movs	r0, #17
  401000:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401002:	4b17      	ldr	r3, [pc, #92]	; (401060 <board_init+0x13c>)
  401004:	f44f 7280 	mov.w	r2, #256	; 0x100
  401008:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40100a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40100e:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401010:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  401014:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401018:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  40101a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40101e:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  401020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  401024:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  401026:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  401028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  40102c:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40102e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  401032:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  401034:	6f59      	ldr	r1, [r3, #116]	; 0x74
  401036:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40103a:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  40103c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401040:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401044:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40104a:	bf00      	nop
  40104c:	400e1850 	.word	0x400e1850
  401050:	e000ed00 	.word	0xe000ed00
  401054:	400e0c00 	.word	0x400e0c00
  401058:	5a00080c 	.word	0x5a00080c
  40105c:	004013d5 	.word	0x004013d5
  401060:	400e1200 	.word	0x400e1200

00401064 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401064:	6301      	str	r1, [r0, #48]	; 0x30
  401066:	4770      	bx	lr

00401068 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  401068:	6341      	str	r1, [r0, #52]	; 0x34
  40106a:	4770      	bx	lr

0040106c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40106c:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  40106e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401072:	d03a      	beq.n	4010ea <pio_set_peripheral+0x7e>
  401074:	d813      	bhi.n	40109e <pio_set_peripheral+0x32>
  401076:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40107a:	d025      	beq.n	4010c8 <pio_set_peripheral+0x5c>
  40107c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401080:	d10a      	bne.n	401098 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401082:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401084:	4313      	orrs	r3, r2
  401086:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401088:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40108a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40108c:	400b      	ands	r3, r1
  40108e:	ea23 0302 	bic.w	r3, r3, r2
  401092:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401094:	6042      	str	r2, [r0, #4]
  401096:	4770      	bx	lr
	switch (ul_type) {
  401098:	2900      	cmp	r1, #0
  40109a:	d1fb      	bne.n	401094 <pio_set_peripheral+0x28>
  40109c:	4770      	bx	lr
  40109e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4010a2:	d021      	beq.n	4010e8 <pio_set_peripheral+0x7c>
  4010a4:	d809      	bhi.n	4010ba <pio_set_peripheral+0x4e>
  4010a6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4010aa:	d1f3      	bne.n	401094 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010ac:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4010ae:	4313      	orrs	r3, r2
  4010b0:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4010b2:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4010b4:	4313      	orrs	r3, r2
  4010b6:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4010b8:	e7ec      	b.n	401094 <pio_set_peripheral+0x28>
	switch (ul_type) {
  4010ba:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4010be:	d013      	beq.n	4010e8 <pio_set_peripheral+0x7c>
  4010c0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4010c4:	d010      	beq.n	4010e8 <pio_set_peripheral+0x7c>
  4010c6:	e7e5      	b.n	401094 <pio_set_peripheral+0x28>
{
  4010c8:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010ca:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4010cc:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4010ce:	43d3      	mvns	r3, r2
  4010d0:	4021      	ands	r1, r4
  4010d2:	461c      	mov	r4, r3
  4010d4:	4019      	ands	r1, r3
  4010d6:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4010d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4010da:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4010dc:	400b      	ands	r3, r1
  4010de:	4023      	ands	r3, r4
  4010e0:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4010e2:	6042      	str	r2, [r0, #4]
}
  4010e4:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4010ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4010ec:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4010ee:	400b      	ands	r3, r1
  4010f0:	ea23 0302 	bic.w	r3, r3, r2
  4010f4:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4010f6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4010f8:	4313      	orrs	r3, r2
  4010fa:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4010fc:	e7ca      	b.n	401094 <pio_set_peripheral+0x28>

004010fe <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4010fe:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401100:	f012 0f01 	tst.w	r2, #1
  401104:	d10d      	bne.n	401122 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401106:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401108:	f012 0f0a 	tst.w	r2, #10
  40110c:	d00b      	beq.n	401126 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40110e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401110:	f012 0f02 	tst.w	r2, #2
  401114:	d109      	bne.n	40112a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401116:	f012 0f08 	tst.w	r2, #8
  40111a:	d008      	beq.n	40112e <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40111c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  401120:	e005      	b.n	40112e <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  401122:	6641      	str	r1, [r0, #100]	; 0x64
  401124:	e7f0      	b.n	401108 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  401126:	6241      	str	r1, [r0, #36]	; 0x24
  401128:	e7f2      	b.n	401110 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40112a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  40112e:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401130:	6001      	str	r1, [r0, #0]
  401132:	4770      	bx	lr

00401134 <pio_set_output>:
{
  401134:	b410      	push	{r4}
  401136:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401138:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40113a:	b94c      	cbnz	r4, 401150 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  40113c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  40113e:	b14b      	cbz	r3, 401154 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401140:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401142:	b94a      	cbnz	r2, 401158 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401144:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  401146:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401148:	6001      	str	r1, [r0, #0]
}
  40114a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40114e:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401150:	6641      	str	r1, [r0, #100]	; 0x64
  401152:	e7f4      	b.n	40113e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401154:	6541      	str	r1, [r0, #84]	; 0x54
  401156:	e7f4      	b.n	401142 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401158:	6301      	str	r1, [r0, #48]	; 0x30
  40115a:	e7f4      	b.n	401146 <pio_set_output+0x12>

0040115c <pio_configure>:
{
  40115c:	b570      	push	{r4, r5, r6, lr}
  40115e:	b082      	sub	sp, #8
  401160:	4605      	mov	r5, r0
  401162:	4616      	mov	r6, r2
  401164:	461c      	mov	r4, r3
	switch (ul_type) {
  401166:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40116a:	d014      	beq.n	401196 <pio_configure+0x3a>
  40116c:	d90a      	bls.n	401184 <pio_configure+0x28>
  40116e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401172:	d024      	beq.n	4011be <pio_configure+0x62>
  401174:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401178:	d021      	beq.n	4011be <pio_configure+0x62>
  40117a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40117e:	d017      	beq.n	4011b0 <pio_configure+0x54>
		return 0;
  401180:	2000      	movs	r0, #0
  401182:	e01a      	b.n	4011ba <pio_configure+0x5e>
	switch (ul_type) {
  401184:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401188:	d005      	beq.n	401196 <pio_configure+0x3a>
  40118a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40118e:	d002      	beq.n	401196 <pio_configure+0x3a>
  401190:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401194:	d1f4      	bne.n	401180 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401196:	4632      	mov	r2, r6
  401198:	4628      	mov	r0, r5
  40119a:	4b11      	ldr	r3, [pc, #68]	; (4011e0 <pio_configure+0x84>)
  40119c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40119e:	f014 0f01 	tst.w	r4, #1
  4011a2:	d102      	bne.n	4011aa <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4011a4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4011a6:	2001      	movs	r0, #1
  4011a8:	e007      	b.n	4011ba <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4011aa:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  4011ac:	2001      	movs	r0, #1
  4011ae:	e004      	b.n	4011ba <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  4011b0:	461a      	mov	r2, r3
  4011b2:	4631      	mov	r1, r6
  4011b4:	4b0b      	ldr	r3, [pc, #44]	; (4011e4 <pio_configure+0x88>)
  4011b6:	4798      	blx	r3
	return 1;
  4011b8:	2001      	movs	r0, #1
}
  4011ba:	b002      	add	sp, #8
  4011bc:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  4011be:	f004 0301 	and.w	r3, r4, #1
  4011c2:	9300      	str	r3, [sp, #0]
  4011c4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4011c8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4011cc:	bf14      	ite	ne
  4011ce:	2200      	movne	r2, #0
  4011d0:	2201      	moveq	r2, #1
  4011d2:	4631      	mov	r1, r6
  4011d4:	4628      	mov	r0, r5
  4011d6:	4c04      	ldr	r4, [pc, #16]	; (4011e8 <pio_configure+0x8c>)
  4011d8:	47a0      	blx	r4
	return 1;
  4011da:	2001      	movs	r0, #1
		break;
  4011dc:	e7ed      	b.n	4011ba <pio_configure+0x5e>
  4011de:	bf00      	nop
  4011e0:	0040106d 	.word	0x0040106d
  4011e4:	004010ff 	.word	0x004010ff
  4011e8:	00401135 	.word	0x00401135

004011ec <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4011ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4011ee:	420b      	tst	r3, r1
}
  4011f0:	bf14      	ite	ne
  4011f2:	2001      	movne	r0, #1
  4011f4:	2000      	moveq	r0, #0
  4011f6:	4770      	bx	lr

004011f8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4011f8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4011fa:	4770      	bx	lr

004011fc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4011fc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4011fe:	4770      	bx	lr

00401200 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401204:	4604      	mov	r4, r0
  401206:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401208:	4b0e      	ldr	r3, [pc, #56]	; (401244 <pio_handler_process+0x44>)
  40120a:	4798      	blx	r3
  40120c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40120e:	4620      	mov	r0, r4
  401210:	4b0d      	ldr	r3, [pc, #52]	; (401248 <pio_handler_process+0x48>)
  401212:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401214:	4005      	ands	r5, r0
  401216:	d013      	beq.n	401240 <pio_handler_process+0x40>
  401218:	4c0c      	ldr	r4, [pc, #48]	; (40124c <pio_handler_process+0x4c>)
  40121a:	f104 0660 	add.w	r6, r4, #96	; 0x60
  40121e:	e003      	b.n	401228 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401220:	42b4      	cmp	r4, r6
  401222:	d00d      	beq.n	401240 <pio_handler_process+0x40>
  401224:	3410      	adds	r4, #16
		while (status != 0) {
  401226:	b15d      	cbz	r5, 401240 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401228:	6820      	ldr	r0, [r4, #0]
  40122a:	4540      	cmp	r0, r8
  40122c:	d1f8      	bne.n	401220 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40122e:	6861      	ldr	r1, [r4, #4]
  401230:	4229      	tst	r1, r5
  401232:	d0f5      	beq.n	401220 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401234:	68e3      	ldr	r3, [r4, #12]
  401236:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401238:	6863      	ldr	r3, [r4, #4]
  40123a:	ea25 0503 	bic.w	r5, r5, r3
  40123e:	e7ef      	b.n	401220 <pio_handler_process+0x20>
  401240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401244:	004011f9 	.word	0x004011f9
  401248:	004011fd 	.word	0x004011fd
  40124c:	20400bf4 	.word	0x20400bf4

00401250 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401250:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401252:	210a      	movs	r1, #10
  401254:	4801      	ldr	r0, [pc, #4]	; (40125c <PIOA_Handler+0xc>)
  401256:	4b02      	ldr	r3, [pc, #8]	; (401260 <PIOA_Handler+0x10>)
  401258:	4798      	blx	r3
  40125a:	bd08      	pop	{r3, pc}
  40125c:	400e0e00 	.word	0x400e0e00
  401260:	00401201 	.word	0x00401201

00401264 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401264:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401266:	210b      	movs	r1, #11
  401268:	4801      	ldr	r0, [pc, #4]	; (401270 <PIOB_Handler+0xc>)
  40126a:	4b02      	ldr	r3, [pc, #8]	; (401274 <PIOB_Handler+0x10>)
  40126c:	4798      	blx	r3
  40126e:	bd08      	pop	{r3, pc}
  401270:	400e1000 	.word	0x400e1000
  401274:	00401201 	.word	0x00401201

00401278 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401278:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40127a:	210c      	movs	r1, #12
  40127c:	4801      	ldr	r0, [pc, #4]	; (401284 <PIOC_Handler+0xc>)
  40127e:	4b02      	ldr	r3, [pc, #8]	; (401288 <PIOC_Handler+0x10>)
  401280:	4798      	blx	r3
  401282:	bd08      	pop	{r3, pc}
  401284:	400e1200 	.word	0x400e1200
  401288:	00401201 	.word	0x00401201

0040128c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  40128c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40128e:	2110      	movs	r1, #16
  401290:	4801      	ldr	r0, [pc, #4]	; (401298 <PIOD_Handler+0xc>)
  401292:	4b02      	ldr	r3, [pc, #8]	; (40129c <PIOD_Handler+0x10>)
  401294:	4798      	blx	r3
  401296:	bd08      	pop	{r3, pc}
  401298:	400e1400 	.word	0x400e1400
  40129c:	00401201 	.word	0x00401201

004012a0 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4012a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4012a2:	2111      	movs	r1, #17
  4012a4:	4801      	ldr	r0, [pc, #4]	; (4012ac <PIOE_Handler+0xc>)
  4012a6:	4b02      	ldr	r3, [pc, #8]	; (4012b0 <PIOE_Handler+0x10>)
  4012a8:	4798      	blx	r3
  4012aa:	bd08      	pop	{r3, pc}
  4012ac:	400e1600 	.word	0x400e1600
  4012b0:	00401201 	.word	0x00401201

004012b4 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4012b4:	2803      	cmp	r0, #3
  4012b6:	d011      	beq.n	4012dc <pmc_mck_set_division+0x28>
  4012b8:	2804      	cmp	r0, #4
  4012ba:	d012      	beq.n	4012e2 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4012bc:	2802      	cmp	r0, #2
  4012be:	bf0c      	ite	eq
  4012c0:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4012c4:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4012c6:	4a08      	ldr	r2, [pc, #32]	; (4012e8 <pmc_mck_set_division+0x34>)
  4012c8:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4012ce:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4012d0:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4012d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012d4:	f013 0f08 	tst.w	r3, #8
  4012d8:	d0fb      	beq.n	4012d2 <pmc_mck_set_division+0x1e>
}
  4012da:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4012dc:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4012e0:	e7f1      	b.n	4012c6 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4012e2:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4012e6:	e7ee      	b.n	4012c6 <pmc_mck_set_division+0x12>
  4012e8:	400e0600 	.word	0x400e0600

004012ec <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4012ec:	4a17      	ldr	r2, [pc, #92]	; (40134c <pmc_switch_mck_to_pllack+0x60>)
  4012ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4012f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4012f4:	4318      	orrs	r0, r3
  4012f6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4012f8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4012fa:	f013 0f08 	tst.w	r3, #8
  4012fe:	d10a      	bne.n	401316 <pmc_switch_mck_to_pllack+0x2a>
  401300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401304:	4911      	ldr	r1, [pc, #68]	; (40134c <pmc_switch_mck_to_pllack+0x60>)
  401306:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401308:	f012 0f08 	tst.w	r2, #8
  40130c:	d103      	bne.n	401316 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40130e:	3b01      	subs	r3, #1
  401310:	d1f9      	bne.n	401306 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401312:	2001      	movs	r0, #1
  401314:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  401316:	4a0d      	ldr	r2, [pc, #52]	; (40134c <pmc_switch_mck_to_pllack+0x60>)
  401318:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40131a:	f023 0303 	bic.w	r3, r3, #3
  40131e:	f043 0302 	orr.w	r3, r3, #2
  401322:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401324:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401326:	f013 0f08 	tst.w	r3, #8
  40132a:	d10a      	bne.n	401342 <pmc_switch_mck_to_pllack+0x56>
  40132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401330:	4906      	ldr	r1, [pc, #24]	; (40134c <pmc_switch_mck_to_pllack+0x60>)
  401332:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401334:	f012 0f08 	tst.w	r2, #8
  401338:	d105      	bne.n	401346 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40133a:	3b01      	subs	r3, #1
  40133c:	d1f9      	bne.n	401332 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40133e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401340:	4770      	bx	lr
	return 0;
  401342:	2000      	movs	r0, #0
  401344:	4770      	bx	lr
  401346:	2000      	movs	r0, #0
  401348:	4770      	bx	lr
  40134a:	bf00      	nop
  40134c:	400e0600 	.word	0x400e0600

00401350 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401350:	b9a0      	cbnz	r0, 40137c <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401352:	480e      	ldr	r0, [pc, #56]	; (40138c <pmc_switch_mainck_to_xtal+0x3c>)
  401354:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401356:	0209      	lsls	r1, r1, #8
  401358:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40135a:	4a0d      	ldr	r2, [pc, #52]	; (401390 <pmc_switch_mainck_to_xtal+0x40>)
  40135c:	401a      	ands	r2, r3
  40135e:	4b0d      	ldr	r3, [pc, #52]	; (401394 <pmc_switch_mainck_to_xtal+0x44>)
  401360:	4313      	orrs	r3, r2
  401362:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401364:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401366:	4602      	mov	r2, r0
  401368:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40136a:	f013 0f01 	tst.w	r3, #1
  40136e:	d0fb      	beq.n	401368 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401370:	4a06      	ldr	r2, [pc, #24]	; (40138c <pmc_switch_mainck_to_xtal+0x3c>)
  401372:	6a11      	ldr	r1, [r2, #32]
  401374:	4b08      	ldr	r3, [pc, #32]	; (401398 <pmc_switch_mainck_to_xtal+0x48>)
  401376:	430b      	orrs	r3, r1
  401378:	6213      	str	r3, [r2, #32]
  40137a:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40137c:	4903      	ldr	r1, [pc, #12]	; (40138c <pmc_switch_mainck_to_xtal+0x3c>)
  40137e:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401380:	4a06      	ldr	r2, [pc, #24]	; (40139c <pmc_switch_mainck_to_xtal+0x4c>)
  401382:	401a      	ands	r2, r3
  401384:	4b06      	ldr	r3, [pc, #24]	; (4013a0 <pmc_switch_mainck_to_xtal+0x50>)
  401386:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401388:	620b      	str	r3, [r1, #32]
  40138a:	4770      	bx	lr
  40138c:	400e0600 	.word	0x400e0600
  401390:	ffc8fffc 	.word	0xffc8fffc
  401394:	00370001 	.word	0x00370001
  401398:	01370000 	.word	0x01370000
  40139c:	fec8fffc 	.word	0xfec8fffc
  4013a0:	01370002 	.word	0x01370002

004013a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4013a4:	4b02      	ldr	r3, [pc, #8]	; (4013b0 <pmc_osc_is_ready_mainck+0xc>)
  4013a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4013a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4013ac:	4770      	bx	lr
  4013ae:	bf00      	nop
  4013b0:	400e0600 	.word	0x400e0600

004013b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4013b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4013b8:	4b01      	ldr	r3, [pc, #4]	; (4013c0 <pmc_disable_pllack+0xc>)
  4013ba:	629a      	str	r2, [r3, #40]	; 0x28
  4013bc:	4770      	bx	lr
  4013be:	bf00      	nop
  4013c0:	400e0600 	.word	0x400e0600

004013c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4013c4:	4b02      	ldr	r3, [pc, #8]	; (4013d0 <pmc_is_locked_pllack+0xc>)
  4013c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4013c8:	f000 0002 	and.w	r0, r0, #2
  4013cc:	4770      	bx	lr
  4013ce:	bf00      	nop
  4013d0:	400e0600 	.word	0x400e0600

004013d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4013d4:	283f      	cmp	r0, #63	; 0x3f
  4013d6:	d81e      	bhi.n	401416 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4013d8:	281f      	cmp	r0, #31
  4013da:	d80c      	bhi.n	4013f6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4013dc:	4b11      	ldr	r3, [pc, #68]	; (401424 <pmc_enable_periph_clk+0x50>)
  4013de:	699a      	ldr	r2, [r3, #24]
  4013e0:	2301      	movs	r3, #1
  4013e2:	4083      	lsls	r3, r0
  4013e4:	4393      	bics	r3, r2
  4013e6:	d018      	beq.n	40141a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4013e8:	2301      	movs	r3, #1
  4013ea:	fa03 f000 	lsl.w	r0, r3, r0
  4013ee:	4b0d      	ldr	r3, [pc, #52]	; (401424 <pmc_enable_periph_clk+0x50>)
  4013f0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4013f2:	2000      	movs	r0, #0
  4013f4:	4770      	bx	lr
		ul_id -= 32;
  4013f6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4013f8:	4b0a      	ldr	r3, [pc, #40]	; (401424 <pmc_enable_periph_clk+0x50>)
  4013fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4013fe:	2301      	movs	r3, #1
  401400:	4083      	lsls	r3, r0
  401402:	4393      	bics	r3, r2
  401404:	d00b      	beq.n	40141e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  401406:	2301      	movs	r3, #1
  401408:	fa03 f000 	lsl.w	r0, r3, r0
  40140c:	4b05      	ldr	r3, [pc, #20]	; (401424 <pmc_enable_periph_clk+0x50>)
  40140e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  401412:	2000      	movs	r0, #0
  401414:	4770      	bx	lr
		return 1;
  401416:	2001      	movs	r0, #1
  401418:	4770      	bx	lr
	return 0;
  40141a:	2000      	movs	r0, #0
  40141c:	4770      	bx	lr
  40141e:	2000      	movs	r0, #0
}
  401420:	4770      	bx	lr
  401422:	bf00      	nop
  401424:	400e0600 	.word	0x400e0600

00401428 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  401428:	4770      	bx	lr
	...

0040142c <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  40142c:	4a10      	ldr	r2, [pc, #64]	; (401470 <pmc_enable_waitmode+0x44>)
  40142e:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401430:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  401438:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40143a:	6a11      	ldr	r1, [r2, #32]
  40143c:	4b0d      	ldr	r3, [pc, #52]	; (401474 <pmc_enable_waitmode+0x48>)
  40143e:	430b      	orrs	r3, r1
  401440:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401442:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401444:	f013 0f08 	tst.w	r3, #8
  401448:	d0fb      	beq.n	401442 <pmc_enable_waitmode+0x16>
  40144a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  40144e:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401450:	3b01      	subs	r3, #1
  401452:	d1fc      	bne.n	40144e <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  401454:	4a06      	ldr	r2, [pc, #24]	; (401470 <pmc_enable_waitmode+0x44>)
  401456:	6a13      	ldr	r3, [r2, #32]
  401458:	f013 0f08 	tst.w	r3, #8
  40145c:	d0fb      	beq.n	401456 <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  40145e:	4a04      	ldr	r2, [pc, #16]	; (401470 <pmc_enable_waitmode+0x44>)
  401460:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401462:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  401466:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  40146a:	6713      	str	r3, [r2, #112]	; 0x70
  40146c:	4770      	bx	lr
  40146e:	bf00      	nop
  401470:	400e0600 	.word	0x400e0600
  401474:	00370004 	.word	0x00370004

00401478 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  40147c:	1e43      	subs	r3, r0, #1
  40147e:	2b04      	cmp	r3, #4
  401480:	f200 8107 	bhi.w	401692 <pmc_sleep+0x21a>
  401484:	e8df f013 	tbh	[pc, r3, lsl #1]
  401488:	00050005 	.word	0x00050005
  40148c:	00150015 	.word	0x00150015
  401490:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  401492:	4a81      	ldr	r2, [pc, #516]	; (401698 <pmc_sleep+0x220>)
  401494:	6913      	ldr	r3, [r2, #16]
  401496:	f023 0304 	bic.w	r3, r3, #4
  40149a:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  40149c:	2201      	movs	r2, #1
  40149e:	4b7f      	ldr	r3, [pc, #508]	; (40169c <pmc_sleep+0x224>)
  4014a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4014a2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4014a6:	b662      	cpsie	i
  __ASM volatile ("dsb");
  4014a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  4014ac:	bf30      	wfi
  4014ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4014b2:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  4014b4:	2803      	cmp	r0, #3
  4014b6:	bf0c      	ite	eq
  4014b8:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  4014ba:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  4014be:	4b78      	ldr	r3, [pc, #480]	; (4016a0 <pmc_sleep+0x228>)
  4014c0:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  4014c2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4014c4:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  4014c8:	2200      	movs	r2, #0
  4014ca:	4b74      	ldr	r3, [pc, #464]	; (40169c <pmc_sleep+0x224>)
  4014cc:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  4014ce:	2201      	movs	r2, #1
  4014d0:	4b74      	ldr	r3, [pc, #464]	; (4016a4 <pmc_sleep+0x22c>)
  4014d2:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  4014d4:	4b74      	ldr	r3, [pc, #464]	; (4016a8 <pmc_sleep+0x230>)
  4014d6:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  4014d8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  4014da:	4a74      	ldr	r2, [pc, #464]	; (4016ac <pmc_sleep+0x234>)
  4014dc:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4014e0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4014e2:	4a73      	ldr	r2, [pc, #460]	; (4016b0 <pmc_sleep+0x238>)
  4014e4:	433a      	orrs	r2, r7
  4014e6:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  4014e8:	f005 0903 	and.w	r9, r5, #3
  4014ec:	f1b9 0f01 	cmp.w	r9, #1
  4014f0:	f240 8089 	bls.w	401606 <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4014f4:	f025 0103 	bic.w	r1, r5, #3
  4014f8:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4014fc:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014fe:	461a      	mov	r2, r3
  401500:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401502:	f013 0f08 	tst.w	r3, #8
  401506:	d0fb      	beq.n	401500 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  401508:	f011 0f70 	tst.w	r1, #112	; 0x70
  40150c:	d008      	beq.n	401520 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40150e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  401512:	4b65      	ldr	r3, [pc, #404]	; (4016a8 <pmc_sleep+0x230>)
  401514:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401516:	461a      	mov	r2, r3
  401518:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40151a:	f013 0f08 	tst.w	r3, #8
  40151e:	d0fb      	beq.n	401518 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  401520:	4b64      	ldr	r3, [pc, #400]	; (4016b4 <pmc_sleep+0x23c>)
  401522:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401524:	4a60      	ldr	r2, [pc, #384]	; (4016a8 <pmc_sleep+0x230>)
  401526:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401528:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40152c:	d0fb      	beq.n	401526 <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40152e:	4a5e      	ldr	r2, [pc, #376]	; (4016a8 <pmc_sleep+0x230>)
  401530:	6a11      	ldr	r1, [r2, #32]
  401532:	4b61      	ldr	r3, [pc, #388]	; (4016b8 <pmc_sleep+0x240>)
  401534:	400b      	ands	r3, r1
  401536:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40153a:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40153c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40153e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401542:	d0fb      	beq.n	40153c <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  401544:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  401548:	4a58      	ldr	r2, [pc, #352]	; (4016ac <pmc_sleep+0x234>)
  40154a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  40154c:	2c04      	cmp	r4, #4
  40154e:	d05c      	beq.n	40160a <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401550:	4c52      	ldr	r4, [pc, #328]	; (40169c <pmc_sleep+0x224>)
  401552:	2301      	movs	r3, #1
  401554:	7023      	strb	r3, [r4, #0]
  401556:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40155a:	b662      	cpsie	i

		pmc_enable_waitmode();
  40155c:	4b57      	ldr	r3, [pc, #348]	; (4016bc <pmc_sleep+0x244>)
  40155e:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401560:	b672      	cpsid	i
  401562:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  401566:	2300      	movs	r3, #0
  401568:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  40156a:	f017 0f02 	tst.w	r7, #2
  40156e:	d055      	beq.n	40161c <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401570:	4a4d      	ldr	r2, [pc, #308]	; (4016a8 <pmc_sleep+0x230>)
  401572:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401574:	4952      	ldr	r1, [pc, #328]	; (4016c0 <pmc_sleep+0x248>)
  401576:	4019      	ands	r1, r3
  401578:	4b52      	ldr	r3, [pc, #328]	; (4016c4 <pmc_sleep+0x24c>)
  40157a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40157c:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40157e:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401580:	4b51      	ldr	r3, [pc, #324]	; (4016c8 <pmc_sleep+0x250>)
  401582:	400b      	ands	r3, r1
  401584:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401588:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  40158a:	4b50      	ldr	r3, [pc, #320]	; (4016cc <pmc_sleep+0x254>)
  40158c:	4033      	ands	r3, r6
  40158e:	2b00      	cmp	r3, #0
  401590:	d06e      	beq.n	401670 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  401592:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  401596:	4b44      	ldr	r3, [pc, #272]	; (4016a8 <pmc_sleep+0x230>)
  401598:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  40159a:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  40159c:	f1b9 0f02 	cmp.w	r9, #2
  4015a0:	d104      	bne.n	4015ac <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4015a2:	4a41      	ldr	r2, [pc, #260]	; (4016a8 <pmc_sleep+0x230>)
  4015a4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015a6:	f013 0f02 	tst.w	r3, #2
  4015aa:	d0fb      	beq.n	4015a4 <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  4015ac:	4a3e      	ldr	r2, [pc, #248]	; (4016a8 <pmc_sleep+0x230>)
  4015ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4015b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  4015b4:	f005 0070 	and.w	r0, r5, #112	; 0x70
  4015b8:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  4015ba:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4015bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015be:	f013 0f08 	tst.w	r3, #8
  4015c2:	d0fb      	beq.n	4015bc <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  4015c4:	4b39      	ldr	r3, [pc, #228]	; (4016ac <pmc_sleep+0x234>)
  4015c6:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  4015ca:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4015ce:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4015d0:	461a      	mov	r2, r3
  4015d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015d4:	f013 0f08 	tst.w	r3, #8
  4015d8:	d0fb      	beq.n	4015d2 <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  4015da:	4a33      	ldr	r2, [pc, #204]	; (4016a8 <pmc_sleep+0x230>)
  4015dc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4015de:	420b      	tst	r3, r1
  4015e0:	d0fc      	beq.n	4015dc <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4015e2:	2200      	movs	r2, #0
  4015e4:	4b2f      	ldr	r3, [pc, #188]	; (4016a4 <pmc_sleep+0x22c>)
  4015e6:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4015e8:	4b39      	ldr	r3, [pc, #228]	; (4016d0 <pmc_sleep+0x258>)
  4015ea:	681b      	ldr	r3, [r3, #0]
  4015ec:	b11b      	cbz	r3, 4015f6 <pmc_sleep+0x17e>
			callback_clocks_restored();
  4015ee:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4015f0:	2200      	movs	r2, #0
  4015f2:	4b37      	ldr	r3, [pc, #220]	; (4016d0 <pmc_sleep+0x258>)
  4015f4:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4015f6:	2201      	movs	r2, #1
  4015f8:	4b28      	ldr	r3, [pc, #160]	; (40169c <pmc_sleep+0x224>)
  4015fa:	701a      	strb	r2, [r3, #0]
  4015fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401600:	b662      	cpsie	i
  401602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  401606:	4629      	mov	r1, r5
  401608:	e77e      	b.n	401508 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40160a:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  40160e:	6a11      	ldr	r1, [r2, #32]
  401610:	4b30      	ldr	r3, [pc, #192]	; (4016d4 <pmc_sleep+0x25c>)
  401612:	400b      	ands	r3, r1
  401614:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401618:	6213      	str	r3, [r2, #32]
  40161a:	e799      	b.n	401550 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  40161c:	f017 0f01 	tst.w	r7, #1
  401620:	d0b3      	beq.n	40158a <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  401622:	4b21      	ldr	r3, [pc, #132]	; (4016a8 <pmc_sleep+0x230>)
  401624:	6a1b      	ldr	r3, [r3, #32]
  401626:	f013 0f01 	tst.w	r3, #1
  40162a:	d10b      	bne.n	401644 <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40162c:	491e      	ldr	r1, [pc, #120]	; (4016a8 <pmc_sleep+0x230>)
  40162e:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  401630:	4a29      	ldr	r2, [pc, #164]	; (4016d8 <pmc_sleep+0x260>)
  401632:	401a      	ands	r2, r3
  401634:	4b29      	ldr	r3, [pc, #164]	; (4016dc <pmc_sleep+0x264>)
  401636:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401638:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40163a:	460a      	mov	r2, r1
  40163c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40163e:	f013 0f01 	tst.w	r3, #1
  401642:	d0fb      	beq.n	40163c <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  401644:	4b18      	ldr	r3, [pc, #96]	; (4016a8 <pmc_sleep+0x230>)
  401646:	6a1b      	ldr	r3, [r3, #32]
  401648:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40164c:	d108      	bne.n	401660 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40164e:	4a16      	ldr	r2, [pc, #88]	; (4016a8 <pmc_sleep+0x230>)
  401650:	6a11      	ldr	r1, [r2, #32]
  401652:	4b23      	ldr	r3, [pc, #140]	; (4016e0 <pmc_sleep+0x268>)
  401654:	430b      	orrs	r3, r1
  401656:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401658:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40165a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40165e:	d0fb      	beq.n	401658 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401660:	4a11      	ldr	r2, [pc, #68]	; (4016a8 <pmc_sleep+0x230>)
  401662:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  401664:	4b18      	ldr	r3, [pc, #96]	; (4016c8 <pmc_sleep+0x250>)
  401666:	400b      	ands	r3, r1
  401668:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  40166c:	6213      	str	r3, [r2, #32]
  40166e:	e78c      	b.n	40158a <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401670:	2100      	movs	r1, #0
  401672:	e793      	b.n	40159c <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  401674:	4a08      	ldr	r2, [pc, #32]	; (401698 <pmc_sleep+0x220>)
  401676:	6913      	ldr	r3, [r2, #16]
  401678:	f043 0304 	orr.w	r3, r3, #4
  40167c:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  40167e:	4a19      	ldr	r2, [pc, #100]	; (4016e4 <pmc_sleep+0x26c>)
  401680:	4b19      	ldr	r3, [pc, #100]	; (4016e8 <pmc_sleep+0x270>)
  401682:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  401684:	2201      	movs	r2, #1
  401686:	4b05      	ldr	r3, [pc, #20]	; (40169c <pmc_sleep+0x224>)
  401688:	701a      	strb	r2, [r3, #0]
  40168a:	f3bf 8f5f 	dmb	sy
  40168e:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401690:	bf30      	wfi
  401692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401696:	bf00      	nop
  401698:	e000ed00 	.word	0xe000ed00
  40169c:	20400018 	.word	0x20400018
  4016a0:	00401429 	.word	0x00401429
  4016a4:	20400c64 	.word	0x20400c64
  4016a8:	400e0600 	.word	0x400e0600
  4016ac:	400e0c00 	.word	0x400e0c00
  4016b0:	00370008 	.word	0x00370008
  4016b4:	004013b5 	.word	0x004013b5
  4016b8:	fec8ffff 	.word	0xfec8ffff
  4016bc:	0040142d 	.word	0x0040142d
  4016c0:	fec8fffc 	.word	0xfec8fffc
  4016c4:	01370002 	.word	0x01370002
  4016c8:	ffc8ff87 	.word	0xffc8ff87
  4016cc:	07ff0000 	.word	0x07ff0000
  4016d0:	20400c68 	.word	0x20400c68
  4016d4:	ffc8fffe 	.word	0xffc8fffe
  4016d8:	ffc8fffc 	.word	0xffc8fffc
  4016dc:	00370001 	.word	0x00370001
  4016e0:	01370000 	.word	0x01370000
  4016e4:	a5000004 	.word	0xa5000004
  4016e8:	400e1810 	.word	0x400e1810

004016ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4016ec:	e7fe      	b.n	4016ec <Dummy_Handler>
	...

004016f0 <Reset_Handler>:
{
  4016f0:	b500      	push	{lr}
  4016f2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4016f4:	4b25      	ldr	r3, [pc, #148]	; (40178c <Reset_Handler+0x9c>)
  4016f6:	4a26      	ldr	r2, [pc, #152]	; (401790 <Reset_Handler+0xa0>)
  4016f8:	429a      	cmp	r2, r3
  4016fa:	d010      	beq.n	40171e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4016fc:	4b25      	ldr	r3, [pc, #148]	; (401794 <Reset_Handler+0xa4>)
  4016fe:	4a23      	ldr	r2, [pc, #140]	; (40178c <Reset_Handler+0x9c>)
  401700:	429a      	cmp	r2, r3
  401702:	d20c      	bcs.n	40171e <Reset_Handler+0x2e>
  401704:	3b01      	subs	r3, #1
  401706:	1a9b      	subs	r3, r3, r2
  401708:	f023 0303 	bic.w	r3, r3, #3
  40170c:	3304      	adds	r3, #4
  40170e:	4413      	add	r3, r2
  401710:	491f      	ldr	r1, [pc, #124]	; (401790 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401712:	f851 0b04 	ldr.w	r0, [r1], #4
  401716:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40171a:	429a      	cmp	r2, r3
  40171c:	d1f9      	bne.n	401712 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40171e:	4b1e      	ldr	r3, [pc, #120]	; (401798 <Reset_Handler+0xa8>)
  401720:	4a1e      	ldr	r2, [pc, #120]	; (40179c <Reset_Handler+0xac>)
  401722:	429a      	cmp	r2, r3
  401724:	d20a      	bcs.n	40173c <Reset_Handler+0x4c>
  401726:	3b01      	subs	r3, #1
  401728:	1a9b      	subs	r3, r3, r2
  40172a:	f023 0303 	bic.w	r3, r3, #3
  40172e:	3304      	adds	r3, #4
  401730:	4413      	add	r3, r2
                *pDest++ = 0;
  401732:	2100      	movs	r1, #0
  401734:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401738:	4293      	cmp	r3, r2
  40173a:	d1fb      	bne.n	401734 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40173c:	4a18      	ldr	r2, [pc, #96]	; (4017a0 <Reset_Handler+0xb0>)
  40173e:	4b19      	ldr	r3, [pc, #100]	; (4017a4 <Reset_Handler+0xb4>)
  401740:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401744:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401746:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40174a:	fab3 f383 	clz	r3, r3
  40174e:	095b      	lsrs	r3, r3, #5
  401750:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401752:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401754:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401758:	2200      	movs	r2, #0
  40175a:	4b13      	ldr	r3, [pc, #76]	; (4017a8 <Reset_Handler+0xb8>)
  40175c:	701a      	strb	r2, [r3, #0]
	return flags;
  40175e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401760:	4a12      	ldr	r2, [pc, #72]	; (4017ac <Reset_Handler+0xbc>)
  401762:	6813      	ldr	r3, [r2, #0]
  401764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401768:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40176a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40176e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401772:	b129      	cbz	r1, 401780 <Reset_Handler+0x90>
		cpu_irq_enable();
  401774:	2201      	movs	r2, #1
  401776:	4b0c      	ldr	r3, [pc, #48]	; (4017a8 <Reset_Handler+0xb8>)
  401778:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40177a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40177e:	b662      	cpsie	i
        __libc_init_array();
  401780:	4b0b      	ldr	r3, [pc, #44]	; (4017b0 <Reset_Handler+0xc0>)
  401782:	4798      	blx	r3
        main();
  401784:	4b0b      	ldr	r3, [pc, #44]	; (4017b4 <Reset_Handler+0xc4>)
  401786:	4798      	blx	r3
  401788:	e7fe      	b.n	401788 <Reset_Handler+0x98>
  40178a:	bf00      	nop
  40178c:	20400000 	.word	0x20400000
  401790:	004076cc 	.word	0x004076cc
  401794:	204009d0 	.word	0x204009d0
  401798:	20400cd4 	.word	0x20400cd4
  40179c:	204009d0 	.word	0x204009d0
  4017a0:	e000ed00 	.word	0xe000ed00
  4017a4:	00400000 	.word	0x00400000
  4017a8:	20400018 	.word	0x20400018
  4017ac:	e000ed88 	.word	0xe000ed88
  4017b0:	0040238d 	.word	0x0040238d
  4017b4:	00401e81 	.word	0x00401e81

004017b8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4017b8:	4b3b      	ldr	r3, [pc, #236]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  4017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017bc:	f003 0303 	and.w	r3, r3, #3
  4017c0:	2b01      	cmp	r3, #1
  4017c2:	d01d      	beq.n	401800 <SystemCoreClockUpdate+0x48>
  4017c4:	b183      	cbz	r3, 4017e8 <SystemCoreClockUpdate+0x30>
  4017c6:	2b02      	cmp	r3, #2
  4017c8:	d036      	beq.n	401838 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4017ca:	4b37      	ldr	r3, [pc, #220]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  4017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4017ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4017d2:	2b70      	cmp	r3, #112	; 0x70
  4017d4:	d05f      	beq.n	401896 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4017d6:	4b34      	ldr	r3, [pc, #208]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  4017d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4017da:	4934      	ldr	r1, [pc, #208]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  4017dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4017e0:	680b      	ldr	r3, [r1, #0]
  4017e2:	40d3      	lsrs	r3, r2
  4017e4:	600b      	str	r3, [r1, #0]
  4017e6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4017e8:	4b31      	ldr	r3, [pc, #196]	; (4018b0 <SystemCoreClockUpdate+0xf8>)
  4017ea:	695b      	ldr	r3, [r3, #20]
  4017ec:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4017f0:	bf14      	ite	ne
  4017f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4017f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4017fa:	4b2c      	ldr	r3, [pc, #176]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  4017fc:	601a      	str	r2, [r3, #0]
  4017fe:	e7e4      	b.n	4017ca <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401800:	4b29      	ldr	r3, [pc, #164]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  401802:	6a1b      	ldr	r3, [r3, #32]
  401804:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401808:	d003      	beq.n	401812 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40180a:	4a2a      	ldr	r2, [pc, #168]	; (4018b4 <SystemCoreClockUpdate+0xfc>)
  40180c:	4b27      	ldr	r3, [pc, #156]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  40180e:	601a      	str	r2, [r3, #0]
  401810:	e7db      	b.n	4017ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401812:	4a29      	ldr	r2, [pc, #164]	; (4018b8 <SystemCoreClockUpdate+0x100>)
  401814:	4b25      	ldr	r3, [pc, #148]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  401816:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401818:	4b23      	ldr	r3, [pc, #140]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  40181a:	6a1b      	ldr	r3, [r3, #32]
  40181c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401820:	2b10      	cmp	r3, #16
  401822:	d005      	beq.n	401830 <SystemCoreClockUpdate+0x78>
  401824:	2b20      	cmp	r3, #32
  401826:	d1d0      	bne.n	4017ca <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401828:	4a22      	ldr	r2, [pc, #136]	; (4018b4 <SystemCoreClockUpdate+0xfc>)
  40182a:	4b20      	ldr	r3, [pc, #128]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  40182c:	601a      	str	r2, [r3, #0]
          break;
  40182e:	e7cc      	b.n	4017ca <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401830:	4a22      	ldr	r2, [pc, #136]	; (4018bc <SystemCoreClockUpdate+0x104>)
  401832:	4b1e      	ldr	r3, [pc, #120]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  401834:	601a      	str	r2, [r3, #0]
          break;
  401836:	e7c8      	b.n	4017ca <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401838:	4b1b      	ldr	r3, [pc, #108]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  40183a:	6a1b      	ldr	r3, [r3, #32]
  40183c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401840:	d016      	beq.n	401870 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401842:	4a1c      	ldr	r2, [pc, #112]	; (4018b4 <SystemCoreClockUpdate+0xfc>)
  401844:	4b19      	ldr	r3, [pc, #100]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  401846:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401848:	4b17      	ldr	r3, [pc, #92]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  40184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40184c:	f003 0303 	and.w	r3, r3, #3
  401850:	2b02      	cmp	r3, #2
  401852:	d1ba      	bne.n	4017ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401854:	4a14      	ldr	r2, [pc, #80]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  401856:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401858:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40185a:	4814      	ldr	r0, [pc, #80]	; (4018ac <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40185c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401860:	6803      	ldr	r3, [r0, #0]
  401862:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401866:	b2d2      	uxtb	r2, r2
  401868:	fbb3 f3f2 	udiv	r3, r3, r2
  40186c:	6003      	str	r3, [r0, #0]
  40186e:	e7ac      	b.n	4017ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401870:	4a11      	ldr	r2, [pc, #68]	; (4018b8 <SystemCoreClockUpdate+0x100>)
  401872:	4b0e      	ldr	r3, [pc, #56]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  401874:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401876:	4b0c      	ldr	r3, [pc, #48]	; (4018a8 <SystemCoreClockUpdate+0xf0>)
  401878:	6a1b      	ldr	r3, [r3, #32]
  40187a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40187e:	2b10      	cmp	r3, #16
  401880:	d005      	beq.n	40188e <SystemCoreClockUpdate+0xd6>
  401882:	2b20      	cmp	r3, #32
  401884:	d1e0      	bne.n	401848 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401886:	4a0b      	ldr	r2, [pc, #44]	; (4018b4 <SystemCoreClockUpdate+0xfc>)
  401888:	4b08      	ldr	r3, [pc, #32]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  40188a:	601a      	str	r2, [r3, #0]
          break;
  40188c:	e7dc      	b.n	401848 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40188e:	4a0b      	ldr	r2, [pc, #44]	; (4018bc <SystemCoreClockUpdate+0x104>)
  401890:	4b06      	ldr	r3, [pc, #24]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  401892:	601a      	str	r2, [r3, #0]
          break;
  401894:	e7d8      	b.n	401848 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401896:	4a05      	ldr	r2, [pc, #20]	; (4018ac <SystemCoreClockUpdate+0xf4>)
  401898:	6813      	ldr	r3, [r2, #0]
  40189a:	4909      	ldr	r1, [pc, #36]	; (4018c0 <SystemCoreClockUpdate+0x108>)
  40189c:	fba1 1303 	umull	r1, r3, r1, r3
  4018a0:	085b      	lsrs	r3, r3, #1
  4018a2:	6013      	str	r3, [r2, #0]
  4018a4:	4770      	bx	lr
  4018a6:	bf00      	nop
  4018a8:	400e0600 	.word	0x400e0600
  4018ac:	2040001c 	.word	0x2040001c
  4018b0:	400e1810 	.word	0x400e1810
  4018b4:	00b71b00 	.word	0x00b71b00
  4018b8:	003d0900 	.word	0x003d0900
  4018bc:	007a1200 	.word	0x007a1200
  4018c0:	aaaaaaab 	.word	0xaaaaaaab

004018c4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4018c4:	4b16      	ldr	r3, [pc, #88]	; (401920 <system_init_flash+0x5c>)
  4018c6:	4298      	cmp	r0, r3
  4018c8:	d913      	bls.n	4018f2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4018ca:	4b16      	ldr	r3, [pc, #88]	; (401924 <system_init_flash+0x60>)
  4018cc:	4298      	cmp	r0, r3
  4018ce:	d915      	bls.n	4018fc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4018d0:	4b15      	ldr	r3, [pc, #84]	; (401928 <system_init_flash+0x64>)
  4018d2:	4298      	cmp	r0, r3
  4018d4:	d916      	bls.n	401904 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4018d6:	4b15      	ldr	r3, [pc, #84]	; (40192c <system_init_flash+0x68>)
  4018d8:	4298      	cmp	r0, r3
  4018da:	d917      	bls.n	40190c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4018dc:	4b14      	ldr	r3, [pc, #80]	; (401930 <system_init_flash+0x6c>)
  4018de:	4298      	cmp	r0, r3
  4018e0:	d918      	bls.n	401914 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4018e2:	4b14      	ldr	r3, [pc, #80]	; (401934 <system_init_flash+0x70>)
  4018e4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4018e6:	bf94      	ite	ls
  4018e8:	4a13      	ldrls	r2, [pc, #76]	; (401938 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4018ea:	4a14      	ldrhi	r2, [pc, #80]	; (40193c <system_init_flash+0x78>)
  4018ec:	4b14      	ldr	r3, [pc, #80]	; (401940 <system_init_flash+0x7c>)
  4018ee:	601a      	str	r2, [r3, #0]
  4018f0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4018f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4018f6:	4b12      	ldr	r3, [pc, #72]	; (401940 <system_init_flash+0x7c>)
  4018f8:	601a      	str	r2, [r3, #0]
  4018fa:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4018fc:	4a11      	ldr	r2, [pc, #68]	; (401944 <system_init_flash+0x80>)
  4018fe:	4b10      	ldr	r3, [pc, #64]	; (401940 <system_init_flash+0x7c>)
  401900:	601a      	str	r2, [r3, #0]
  401902:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401904:	4a10      	ldr	r2, [pc, #64]	; (401948 <system_init_flash+0x84>)
  401906:	4b0e      	ldr	r3, [pc, #56]	; (401940 <system_init_flash+0x7c>)
  401908:	601a      	str	r2, [r3, #0]
  40190a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40190c:	4a0f      	ldr	r2, [pc, #60]	; (40194c <system_init_flash+0x88>)
  40190e:	4b0c      	ldr	r3, [pc, #48]	; (401940 <system_init_flash+0x7c>)
  401910:	601a      	str	r2, [r3, #0]
  401912:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401914:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401918:	4b09      	ldr	r3, [pc, #36]	; (401940 <system_init_flash+0x7c>)
  40191a:	601a      	str	r2, [r3, #0]
  40191c:	4770      	bx	lr
  40191e:	bf00      	nop
  401920:	015ef3bf 	.word	0x015ef3bf
  401924:	02bde77f 	.word	0x02bde77f
  401928:	041cdb3f 	.word	0x041cdb3f
  40192c:	057bceff 	.word	0x057bceff
  401930:	06dac2bf 	.word	0x06dac2bf
  401934:	0839b67f 	.word	0x0839b67f
  401938:	04000500 	.word	0x04000500
  40193c:	04000600 	.word	0x04000600
  401940:	400e0c00 	.word	0x400e0c00
  401944:	04000100 	.word	0x04000100
  401948:	04000200 	.word	0x04000200
  40194c:	04000300 	.word	0x04000300

00401950 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401950:	4b0a      	ldr	r3, [pc, #40]	; (40197c <_sbrk+0x2c>)
  401952:	681b      	ldr	r3, [r3, #0]
  401954:	b153      	cbz	r3, 40196c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401956:	4b09      	ldr	r3, [pc, #36]	; (40197c <_sbrk+0x2c>)
  401958:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  40195a:	181a      	adds	r2, r3, r0
  40195c:	4908      	ldr	r1, [pc, #32]	; (401980 <_sbrk+0x30>)
  40195e:	4291      	cmp	r1, r2
  401960:	db08      	blt.n	401974 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401962:	4610      	mov	r0, r2
  401964:	4a05      	ldr	r2, [pc, #20]	; (40197c <_sbrk+0x2c>)
  401966:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401968:	4618      	mov	r0, r3
  40196a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  40196c:	4a05      	ldr	r2, [pc, #20]	; (401984 <_sbrk+0x34>)
  40196e:	4b03      	ldr	r3, [pc, #12]	; (40197c <_sbrk+0x2c>)
  401970:	601a      	str	r2, [r3, #0]
  401972:	e7f0      	b.n	401956 <_sbrk+0x6>
		return (caddr_t) -1;	
  401974:	f04f 30ff 	mov.w	r0, #4294967295
}
  401978:	4770      	bx	lr
  40197a:	bf00      	nop
  40197c:	20400c6c 	.word	0x20400c6c
  401980:	2045fffc 	.word	0x2045fffc
  401984:	20402ed8 	.word	0x20402ed8

00401988 <TC1_Handler>:
static void RTT_init(uint16_t pllPreScale, uint32_t IrqNPulses);
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type);
void pisca_led_RTC(int n, int t);


void TC1_Handler(void){
  401988:	b500      	push	{lr}
  40198a:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC0, 1);
  40198c:	2101      	movs	r1, #1
  40198e:	4805      	ldr	r0, [pc, #20]	; (4019a4 <TC1_Handler+0x1c>)
  401990:	4b05      	ldr	r3, [pc, #20]	; (4019a8 <TC1_Handler+0x20>)
  401992:	4798      	blx	r3
  401994:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  401996:	9b01      	ldr	r3, [sp, #4]

	/** Muda o estado do LED */
	flag_tc = 1;
  401998:	2201      	movs	r2, #1
  40199a:	4b04      	ldr	r3, [pc, #16]	; (4019ac <TC1_Handler+0x24>)
  40199c:	701a      	strb	r2, [r3, #0]
}
  40199e:	b003      	add	sp, #12
  4019a0:	f85d fb04 	ldr.w	pc, [sp], #4
  4019a4:	4000c000 	.word	0x4000c000
  4019a8:	004006a5 	.word	0x004006a5
  4019ac:	20400c73 	.word	0x20400c73

004019b0 <TC4_Handler>:

void TC4_Handler(void){
  4019b0:	b500      	push	{lr}
  4019b2:	b083      	sub	sp, #12
	volatile uint32_t ul_dummy;

	/****************************************************************
	* Devemos indicar ao TC que a interrup��o foi satisfeita.
	******************************************************************/
	ul_dummy = tc_get_status(TC1, 1);
  4019b4:	2101      	movs	r1, #1
  4019b6:	4805      	ldr	r0, [pc, #20]	; (4019cc <TC4_Handler+0x1c>)
  4019b8:	4b05      	ldr	r3, [pc, #20]	; (4019d0 <TC4_Handler+0x20>)
  4019ba:	4798      	blx	r3
  4019bc:	9001      	str	r0, [sp, #4]

	/* Avoid compiler warning */
	UNUSED(ul_dummy);
  4019be:	9b01      	ldr	r3, [sp, #4]

	/** Muda o estado do LED */
	flag_tc2 = 1;
  4019c0:	2201      	movs	r2, #1
  4019c2:	4b04      	ldr	r3, [pc, #16]	; (4019d4 <TC4_Handler+0x24>)
  4019c4:	701a      	strb	r2, [r3, #0]
}
  4019c6:	b003      	add	sp, #12
  4019c8:	f85d fb04 	ldr.w	pc, [sp], #4
  4019cc:	40010000 	.word	0x40010000
  4019d0:	004006a5 	.word	0x004006a5
  4019d4:	20400c74 	.word	0x20400c74

004019d8 <RTC_Handler>:
		f_rtt_alarme = true;                  // flag RTT alarme
	}
}

void RTC_Handler(void)
{
  4019d8:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  4019da:	4814      	ldr	r0, [pc, #80]	; (401a2c <RTC_Handler+0x54>)
  4019dc:	4b14      	ldr	r3, [pc, #80]	; (401a30 <RTC_Handler+0x58>)
  4019de:	4798      	blx	r3
  4019e0:	4604      	mov	r4, r0
	/*
	*  Verifica por qual motivo entrou
	*  na interrupcao, se foi por segundo
	*  ou Alarm
	*/
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  4019e2:	f010 0f04 	tst.w	r0, #4
  4019e6:	d111      	bne.n	401a0c <RTC_Handler+0x34>
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
		flag_rtc2 = 1;
	}
	
	/* Time or date alarm */
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  4019e8:	f014 0f02 	tst.w	r4, #2
  4019ec:	d116      	bne.n	401a1c <RTC_Handler+0x44>
		rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
    	flag_rtc = 1;
	}
	
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  4019ee:	4d0f      	ldr	r5, [pc, #60]	; (401a2c <RTC_Handler+0x54>)
  4019f0:	2101      	movs	r1, #1
  4019f2:	4628      	mov	r0, r5
  4019f4:	4c0f      	ldr	r4, [pc, #60]	; (401a34 <RTC_Handler+0x5c>)
  4019f6:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  4019f8:	2108      	movs	r1, #8
  4019fa:	4628      	mov	r0, r5
  4019fc:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  4019fe:	2110      	movs	r1, #16
  401a00:	4628      	mov	r0, r5
  401a02:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  401a04:	2120      	movs	r1, #32
  401a06:	4628      	mov	r0, r5
  401a08:	47a0      	blx	r4
  401a0a:	bd38      	pop	{r3, r4, r5, pc}
		rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401a0c:	2104      	movs	r1, #4
  401a0e:	4807      	ldr	r0, [pc, #28]	; (401a2c <RTC_Handler+0x54>)
  401a10:	4b08      	ldr	r3, [pc, #32]	; (401a34 <RTC_Handler+0x5c>)
  401a12:	4798      	blx	r3
		flag_rtc2 = 1;
  401a14:	2201      	movs	r2, #1
  401a16:	4b08      	ldr	r3, [pc, #32]	; (401a38 <RTC_Handler+0x60>)
  401a18:	701a      	strb	r2, [r3, #0]
  401a1a:	e7e5      	b.n	4019e8 <RTC_Handler+0x10>
		rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  401a1c:	2102      	movs	r1, #2
  401a1e:	4803      	ldr	r0, [pc, #12]	; (401a2c <RTC_Handler+0x54>)
  401a20:	4b04      	ldr	r3, [pc, #16]	; (401a34 <RTC_Handler+0x5c>)
  401a22:	4798      	blx	r3
    	flag_rtc = 1;
  401a24:	2201      	movs	r2, #1
  401a26:	4b05      	ldr	r3, [pc, #20]	; (401a3c <RTC_Handler+0x64>)
  401a28:	701a      	strb	r2, [r3, #0]
  401a2a:	e7e0      	b.n	4019ee <RTC_Handler+0x16>
  401a2c:	400e1860 	.word	0x400e1860
  401a30:	0040045d 	.word	0x0040045d
  401a34:	00400461 	.word	0x00400461
  401a38:	20400c72 	.word	0x20400c72
  401a3c:	20400c71 	.word	0x20400c71

00401a40 <pisca_led>:
}

/*
 * Pisca LED placa
 */
void pisca_led(int n, int t){
  401a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401a44:	f1b0 0800 	subs.w	r8, r0, #0
  401a48:	dd30      	ble.n	401aac <pisca_led+0x6c>
  401a4a:	460f      	mov	r7, r1
		pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
		delay_ms(t);
  401a4c:	17cd      	asrs	r5, r1, #31
  401a4e:	4b18      	ldr	r3, [pc, #96]	; (401ab0 <pisca_led+0x70>)
  401a50:	fba1 0103 	umull	r0, r1, r1, r3
  401a54:	fb03 1105 	mla	r1, r3, r5, r1
  401a58:	f241 722c 	movw	r2, #5932	; 0x172c
  401a5c:	2300      	movs	r3, #0
  401a5e:	f241 742b 	movw	r4, #5931	; 0x172b
  401a62:	2500      	movs	r5, #0
  401a64:	1900      	adds	r0, r0, r4
  401a66:	4169      	adcs	r1, r5
  401a68:	4c12      	ldr	r4, [pc, #72]	; (401ab4 <pisca_led+0x74>)
  401a6a:	47a0      	blx	r4
  401a6c:	4682      	mov	sl, r0
  401a6e:	2400      	movs	r4, #0
		pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401a70:	4e11      	ldr	r6, [pc, #68]	; (401ab8 <pisca_led+0x78>)
  401a72:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401ac4 <pisca_led+0x84>
		delay_ms(t);
  401a76:	4d11      	ldr	r5, [pc, #68]	; (401abc <pisca_led+0x7c>)
  401a78:	e00a      	b.n	401a90 <pisca_led+0x50>
  401a7a:	2033      	movs	r0, #51	; 0x33
  401a7c:	47a8      	blx	r5
		pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  401a7e:	2101      	movs	r1, #1
  401a80:	4630      	mov	r0, r6
  401a82:	4b0f      	ldr	r3, [pc, #60]	; (401ac0 <pisca_led+0x80>)
  401a84:	4798      	blx	r3
		delay_ms(t);
  401a86:	2033      	movs	r0, #51	; 0x33
  401a88:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  401a8a:	3401      	adds	r4, #1
  401a8c:	45a0      	cmp	r8, r4
  401a8e:	d00d      	beq.n	401aac <pisca_led+0x6c>
		pio_clear(LED1_PIO, LED1_PIO_IDX_MASK);
  401a90:	2101      	movs	r1, #1
  401a92:	4630      	mov	r0, r6
  401a94:	47c8      	blx	r9
		delay_ms(t);
  401a96:	2f00      	cmp	r7, #0
  401a98:	d0ef      	beq.n	401a7a <pisca_led+0x3a>
  401a9a:	4650      	mov	r0, sl
  401a9c:	47a8      	blx	r5
		pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  401a9e:	2101      	movs	r1, #1
  401aa0:	4630      	mov	r0, r6
  401aa2:	4b07      	ldr	r3, [pc, #28]	; (401ac0 <pisca_led+0x80>)
  401aa4:	4798      	blx	r3
		delay_ms(t);
  401aa6:	4650      	mov	r0, sl
  401aa8:	47a8      	blx	r5
  401aaa:	e7ee      	b.n	401a8a <pisca_led+0x4a>
  401aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401ab0:	11e1a300 	.word	0x11e1a300
  401ab4:	0040207d 	.word	0x0040207d
  401ab8:	400e0e00 	.word	0x400e0e00
  401abc:	20400001 	.word	0x20400001
  401ac0:	00401065 	.word	0x00401065
  401ac4:	00401069 	.word	0x00401069

00401ac8 <pisca_led2>:

		
	}
}

void pisca_led2(int n, int t){
  401ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401acc:	f1b0 0800 	subs.w	r8, r0, #0
  401ad0:	dd33      	ble.n	401b3a <pisca_led2+0x72>
  401ad2:	460f      	mov	r7, r1
		pio_clear(LED_PIO, LED_PIO_IDX_MASK);
		delay_ms(t);
  401ad4:	17cd      	asrs	r5, r1, #31
  401ad6:	4b1a      	ldr	r3, [pc, #104]	; (401b40 <pisca_led2+0x78>)
  401ad8:	fba1 0103 	umull	r0, r1, r1, r3
  401adc:	fb03 1105 	mla	r1, r3, r5, r1
  401ae0:	f241 722c 	movw	r2, #5932	; 0x172c
  401ae4:	2300      	movs	r3, #0
  401ae6:	f241 742b 	movw	r4, #5931	; 0x172b
  401aea:	2500      	movs	r5, #0
  401aec:	1900      	adds	r0, r0, r4
  401aee:	4169      	adcs	r1, r5
  401af0:	4c14      	ldr	r4, [pc, #80]	; (401b44 <pisca_led2+0x7c>)
  401af2:	47a0      	blx	r4
  401af4:	4682      	mov	sl, r0
  401af6:	2400      	movs	r4, #0
		pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  401af8:	4e13      	ldr	r6, [pc, #76]	; (401b48 <pisca_led2+0x80>)
  401afa:	f8df 9058 	ldr.w	r9, [pc, #88]	; 401b54 <pisca_led2+0x8c>
		delay_ms(t);
  401afe:	4d13      	ldr	r5, [pc, #76]	; (401b4c <pisca_led2+0x84>)
  401b00:	e00b      	b.n	401b1a <pisca_led2+0x52>
  401b02:	2033      	movs	r0, #51	; 0x33
  401b04:	47a8      	blx	r5
		pio_set(LED_PIO, LED_PIO_IDX_MASK);
  401b06:	f44f 7180 	mov.w	r1, #256	; 0x100
  401b0a:	4630      	mov	r0, r6
  401b0c:	4b10      	ldr	r3, [pc, #64]	; (401b50 <pisca_led2+0x88>)
  401b0e:	4798      	blx	r3
		delay_ms(t);
  401b10:	2033      	movs	r0, #51	; 0x33
  401b12:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  401b14:	3401      	adds	r4, #1
  401b16:	45a0      	cmp	r8, r4
  401b18:	d00f      	beq.n	401b3a <pisca_led2+0x72>
		pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  401b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
  401b1e:	4630      	mov	r0, r6
  401b20:	47c8      	blx	r9
		delay_ms(t);
  401b22:	2f00      	cmp	r7, #0
  401b24:	d0ed      	beq.n	401b02 <pisca_led2+0x3a>
  401b26:	4650      	mov	r0, sl
  401b28:	47a8      	blx	r5
		pio_set(LED_PIO, LED_PIO_IDX_MASK);
  401b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
  401b2e:	4630      	mov	r0, r6
  401b30:	4b07      	ldr	r3, [pc, #28]	; (401b50 <pisca_led2+0x88>)
  401b32:	4798      	blx	r3
		delay_ms(t);
  401b34:	4650      	mov	r0, sl
  401b36:	47a8      	blx	r5
  401b38:	e7ec      	b.n	401b14 <pisca_led2+0x4c>
  401b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b3e:	bf00      	nop
  401b40:	11e1a300 	.word	0x11e1a300
  401b44:	0040207d 	.word	0x0040207d
  401b48:	400e1200 	.word	0x400e1200
  401b4c:	20400001 	.word	0x20400001
  401b50:	00401065 	.word	0x00401065
  401b54:	00401069 	.word	0x00401069

00401b58 <pisca_led_RTC>:
	}
}

void pisca_led_RTC(int n, int t){
  401b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401b5c:	f1b0 0800 	subs.w	r8, r0, #0
  401b60:	dd30      	ble.n	401bc4 <pisca_led_RTC+0x6c>
  401b62:	460f      	mov	r7, r1
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
		delay_ms(t);
  401b64:	17cd      	asrs	r5, r1, #31
  401b66:	4b18      	ldr	r3, [pc, #96]	; (401bc8 <pisca_led_RTC+0x70>)
  401b68:	fba1 0103 	umull	r0, r1, r1, r3
  401b6c:	fb03 1105 	mla	r1, r3, r5, r1
  401b70:	f241 722c 	movw	r2, #5932	; 0x172c
  401b74:	2300      	movs	r3, #0
  401b76:	f241 742b 	movw	r4, #5931	; 0x172b
  401b7a:	2500      	movs	r5, #0
  401b7c:	1900      	adds	r0, r0, r4
  401b7e:	4169      	adcs	r1, r5
  401b80:	4c12      	ldr	r4, [pc, #72]	; (401bcc <pisca_led_RTC+0x74>)
  401b82:	47a0      	blx	r4
  401b84:	4682      	mov	sl, r0
  401b86:	2400      	movs	r4, #0
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  401b88:	4e11      	ldr	r6, [pc, #68]	; (401bd0 <pisca_led_RTC+0x78>)
  401b8a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401bdc <pisca_led_RTC+0x84>
		delay_ms(t);
  401b8e:	4d11      	ldr	r5, [pc, #68]	; (401bd4 <pisca_led_RTC+0x7c>)
  401b90:	e00a      	b.n	401ba8 <pisca_led_RTC+0x50>
  401b92:	2033      	movs	r0, #51	; 0x33
  401b94:	47a8      	blx	r5
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401b96:	2104      	movs	r1, #4
  401b98:	4630      	mov	r0, r6
  401b9a:	4b0f      	ldr	r3, [pc, #60]	; (401bd8 <pisca_led_RTC+0x80>)
  401b9c:	4798      	blx	r3
		delay_ms(t);
  401b9e:	2033      	movs	r0, #51	; 0x33
  401ba0:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  401ba2:	3401      	adds	r4, #1
  401ba4:	45a0      	cmp	r8, r4
  401ba6:	d00d      	beq.n	401bc4 <pisca_led_RTC+0x6c>
		pio_clear(LED3_PIO, LED3_PIO_IDX_MASK);
  401ba8:	2104      	movs	r1, #4
  401baa:	4630      	mov	r0, r6
  401bac:	47c8      	blx	r9
		delay_ms(t);
  401bae:	2f00      	cmp	r7, #0
  401bb0:	d0ef      	beq.n	401b92 <pisca_led_RTC+0x3a>
  401bb2:	4650      	mov	r0, sl
  401bb4:	47a8      	blx	r5
		pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  401bb6:	2104      	movs	r1, #4
  401bb8:	4630      	mov	r0, r6
  401bba:	4b07      	ldr	r3, [pc, #28]	; (401bd8 <pisca_led_RTC+0x80>)
  401bbc:	4798      	blx	r3
		delay_ms(t);
  401bbe:	4650      	mov	r0, sl
  401bc0:	47a8      	blx	r5
  401bc2:	e7ee      	b.n	401ba2 <pisca_led_RTC+0x4a>
  401bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401bc8:	11e1a300 	.word	0x11e1a300
  401bcc:	0040207d 	.word	0x0040207d
  401bd0:	400e1000 	.word	0x400e1000
  401bd4:	20400001 	.word	0x20400001
  401bd8:	00401065 	.word	0x00401065
  401bdc:	00401069 	.word	0x00401069

00401be0 <pin_toggle>:
	}
}

void pin_toggle(Pio *pio, uint32_t mask){
  401be0:	b538      	push	{r3, r4, r5, lr}
  401be2:	4604      	mov	r4, r0
  401be4:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  401be6:	4b06      	ldr	r3, [pc, #24]	; (401c00 <pin_toggle+0x20>)
  401be8:	4798      	blx	r3
  401bea:	b920      	cbnz	r0, 401bf6 <pin_toggle+0x16>
	pio_clear(pio, mask);
	else
	pio_set(pio,mask);
  401bec:	4629      	mov	r1, r5
  401bee:	4620      	mov	r0, r4
  401bf0:	4b04      	ldr	r3, [pc, #16]	; (401c04 <pin_toggle+0x24>)
  401bf2:	4798      	blx	r3
  401bf4:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  401bf6:	4629      	mov	r1, r5
  401bf8:	4620      	mov	r0, r4
  401bfa:	4b03      	ldr	r3, [pc, #12]	; (401c08 <pin_toggle+0x28>)
  401bfc:	4798      	blx	r3
  401bfe:	bd38      	pop	{r3, r4, r5, pc}
  401c00:	004011ed 	.word	0x004011ed
  401c04:	00401065 	.word	0x00401065
  401c08:	00401069 	.word	0x00401069

00401c0c <RTT_Handler>:
{
  401c0c:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  401c0e:	4808      	ldr	r0, [pc, #32]	; (401c30 <RTT_Handler+0x24>)
  401c10:	4b08      	ldr	r3, [pc, #32]	; (401c34 <RTT_Handler+0x28>)
  401c12:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401c14:	f010 0f01 	tst.w	r0, #1
  401c18:	d100      	bne.n	401c1c <RTT_Handler+0x10>
  401c1a:	bd08      	pop	{r3, pc}
		pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);    // BLINK Led
  401c1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401c20:	4805      	ldr	r0, [pc, #20]	; (401c38 <RTT_Handler+0x2c>)
  401c22:	4b06      	ldr	r3, [pc, #24]	; (401c3c <RTT_Handler+0x30>)
  401c24:	4798      	blx	r3
		f_rtt_alarme = true;                  // flag RTT alarme
  401c26:	2201      	movs	r2, #1
  401c28:	4b05      	ldr	r3, [pc, #20]	; (401c40 <RTT_Handler+0x34>)
  401c2a:	701a      	strb	r2, [r3, #0]
}
  401c2c:	e7f5      	b.n	401c1a <RTT_Handler+0xe>
  401c2e:	bf00      	nop
  401c30:	400e1830 	.word	0x400e1830
  401c34:	004004e1 	.word	0x004004e1
  401c38:	400e1200 	.word	0x400e1200
  401c3c:	00401be1 	.word	0x00401be1
  401c40:	20400c70 	.word	0x20400c70

00401c44 <LED_init>:
}

/**
*Inicializa o pino do LED
*/
void LED_init(int estado){
  401c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401c48:	b082      	sub	sp, #8
  401c4a:	4680      	mov	r8, r0
	pmc_enable_periph_clk(LED1_PIO);
  401c4c:	4e11      	ldr	r6, [pc, #68]	; (401c94 <LED_init+0x50>)
  401c4e:	4630      	mov	r0, r6
  401c50:	4d11      	ldr	r5, [pc, #68]	; (401c98 <LED_init+0x54>)
  401c52:	47a8      	blx	r5
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, estado, 0, 0);
  401c54:	2400      	movs	r4, #0
  401c56:	9400      	str	r4, [sp, #0]
  401c58:	4623      	mov	r3, r4
  401c5a:	4642      	mov	r2, r8
  401c5c:	2101      	movs	r1, #1
  401c5e:	4630      	mov	r0, r6
  401c60:	4e0e      	ldr	r6, [pc, #56]	; (401c9c <LED_init+0x58>)
  401c62:	47b0      	blx	r6
	pmc_enable_periph_clk(LED2_PIO);
  401c64:	4f0e      	ldr	r7, [pc, #56]	; (401ca0 <LED_init+0x5c>)
  401c66:	4638      	mov	r0, r7
  401c68:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  401c6a:	4623      	mov	r3, r4
  401c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  401c70:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  401c74:	4638      	mov	r0, r7
  401c76:	4f0b      	ldr	r7, [pc, #44]	; (401ca4 <LED_init+0x60>)
  401c78:	47b8      	blx	r7

	pmc_enable_periph_clk(LED3_PIO);
  401c7a:	4f0b      	ldr	r7, [pc, #44]	; (401ca8 <LED_init+0x64>)
  401c7c:	4638      	mov	r0, r7
  401c7e:	47a8      	blx	r5
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, estado, 0, 0 );
  401c80:	9400      	str	r4, [sp, #0]
  401c82:	4623      	mov	r3, r4
  401c84:	4642      	mov	r2, r8
  401c86:	2104      	movs	r1, #4
  401c88:	4638      	mov	r0, r7
  401c8a:	47b0      	blx	r6
};
  401c8c:	b002      	add	sp, #8
  401c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401c92:	bf00      	nop
  401c94:	400e0e00 	.word	0x400e0e00
  401c98:	004013d5 	.word	0x004013d5
  401c9c:	00401135 	.word	0x00401135
  401ca0:	400e1200 	.word	0x400e1200
  401ca4:	0040115d 	.word	0x0040115d
  401ca8:	400e1000 	.word	0x400e1000

00401cac <RTC_init>:

/**
* Configura o RTC para funcionar com interrupcao de alarme
*/
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type){
  401cac:	b082      	sub	sp, #8
  401cae:	b570      	push	{r4, r5, r6, lr}
  401cb0:	b082      	sub	sp, #8
  401cb2:	4605      	mov	r5, r0
  401cb4:	460c      	mov	r4, r1
  401cb6:	a906      	add	r1, sp, #24
  401cb8:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401cbc:	2002      	movs	r0, #2
  401cbe:	4b1d      	ldr	r3, [pc, #116]	; (401d34 <RTC_init+0x88>)
  401cc0:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401cc2:	2100      	movs	r1, #0
  401cc4:	4628      	mov	r0, r5
  401cc6:	4b1c      	ldr	r3, [pc, #112]	; (401d38 <RTC_init+0x8c>)
  401cc8:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ccc:	9300      	str	r3, [sp, #0]
  401cce:	9b08      	ldr	r3, [sp, #32]
  401cd0:	9a07      	ldr	r2, [sp, #28]
  401cd2:	9906      	ldr	r1, [sp, #24]
  401cd4:	4628      	mov	r0, r5
  401cd6:	4e19      	ldr	r6, [pc, #100]	; (401d3c <RTC_init+0x90>)
  401cd8:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.seccond);
  401cda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401cdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401cde:	990a      	ldr	r1, [sp, #40]	; 0x28
  401ce0:	4628      	mov	r0, r5
  401ce2:	4e17      	ldr	r6, [pc, #92]	; (401d40 <RTC_init+0x94>)
  401ce4:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401ce6:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401ce8:	b2e4      	uxtb	r4, r4
  401cea:	f004 011f 	and.w	r1, r4, #31
  401cee:	2301      	movs	r3, #1
  401cf0:	408b      	lsls	r3, r1
  401cf2:	0956      	lsrs	r6, r2, #5
  401cf4:	4813      	ldr	r0, [pc, #76]	; (401d44 <RTC_init+0x98>)
  401cf6:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401cfa:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401cfe:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  401d02:	2a00      	cmp	r2, #0
  401d04:	db0f      	blt.n	401d26 <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401d06:	490f      	ldr	r1, [pc, #60]	; (401d44 <RTC_init+0x98>)
  401d08:	4411      	add	r1, r2
  401d0a:	2200      	movs	r2, #0
  401d0c:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401d10:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 0);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401d14:	990d      	ldr	r1, [sp, #52]	; 0x34
  401d16:	4628      	mov	r0, r5
  401d18:	4b0b      	ldr	r3, [pc, #44]	; (401d48 <RTC_init+0x9c>)
  401d1a:	4798      	blx	r3

}
  401d1c:	b002      	add	sp, #8
  401d1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401d22:	b002      	add	sp, #8
  401d24:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401d26:	f004 040f 	and.w	r4, r4, #15
  401d2a:	4a08      	ldr	r2, [pc, #32]	; (401d4c <RTC_init+0xa0>)
  401d2c:	2100      	movs	r1, #0
  401d2e:	5511      	strb	r1, [r2, r4]
  401d30:	e7ee      	b.n	401d10 <RTC_init+0x64>
  401d32:	bf00      	nop
  401d34:	004013d5 	.word	0x004013d5
  401d38:	004001ad 	.word	0x004001ad
  401d3c:	00400345 	.word	0x00400345
  401d40:	00400221 	.word	0x00400221
  401d44:	e000e100 	.word	0xe000e100
  401d48:	004001c3 	.word	0x004001c3
  401d4c:	e000ed14 	.word	0xe000ed14

00401d50 <TC_init>:

static float get_time_rtt(){
	uint ul_previous_time = rtt_read_timer_value(RTT);
}

void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401d54:	b085      	sub	sp, #20
  401d56:	4606      	mov	r6, r0
  401d58:	460c      	mov	r4, r1
  401d5a:	4617      	mov	r7, r2
  401d5c:	4698      	mov	r8, r3
	o uC possui 3 TCs, cada TC possui 3 canais
	TC0 : ID_TC0, ID_TC1, ID_TC2
	TC1 : ID_TC3, ID_TC4, ID_TC5
	TC2 : ID_TC6, ID_TC7, ID_TC8
	*/
	pmc_enable_periph_clk(ID_TC);
  401d5e:	4608      	mov	r0, r1
  401d60:	4b18      	ldr	r3, [pc, #96]	; (401dc4 <TC_init+0x74>)
  401d62:	4798      	blx	r3

	/** Configura o TC para operar em  4Mhz e interrup�c�o no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401d64:	4d18      	ldr	r5, [pc, #96]	; (401dc8 <TC_init+0x78>)
  401d66:	9500      	str	r5, [sp, #0]
  401d68:	ab02      	add	r3, sp, #8
  401d6a:	aa03      	add	r2, sp, #12
  401d6c:	4629      	mov	r1, r5
  401d6e:	4640      	mov	r0, r8
  401d70:	f8df 906c 	ldr.w	r9, [pc, #108]	; 401de0 <TC_init+0x90>
  401d74:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401d76:	9a02      	ldr	r2, [sp, #8]
  401d78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401d7c:	4639      	mov	r1, r7
  401d7e:	4630      	mov	r0, r6
  401d80:	4b12      	ldr	r3, [pc, #72]	; (401dcc <TC_init+0x7c>)
  401d82:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401d84:	9a03      	ldr	r2, [sp, #12]
  401d86:	fbb5 f2f2 	udiv	r2, r5, r2
  401d8a:	fbb2 f2f8 	udiv	r2, r2, r8
  401d8e:	4639      	mov	r1, r7
  401d90:	4630      	mov	r0, r6
  401d92:	4b0f      	ldr	r3, [pc, #60]	; (401dd0 <TC_init+0x80>)
  401d94:	4798      	blx	r3
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401d96:	b263      	sxtb	r3, r4
  401d98:	095b      	lsrs	r3, r3, #5
  401d9a:	f004 041f 	and.w	r4, r4, #31
  401d9e:	2201      	movs	r2, #1
  401da0:	fa02 f404 	lsl.w	r4, r2, r4
  401da4:	4a0b      	ldr	r2, [pc, #44]	; (401dd4 <TC_init+0x84>)
  401da6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]

	/* Configura e ativa interrup�c�o no TC canal 0 */
	/* Interrup��o no C */
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401daa:	2210      	movs	r2, #16
  401dac:	4639      	mov	r1, r7
  401dae:	4630      	mov	r0, r6
  401db0:	4b09      	ldr	r3, [pc, #36]	; (401dd8 <TC_init+0x88>)
  401db2:	4798      	blx	r3

	/* Inicializa o canal 0 do TC */
	tc_start(TC, TC_CHANNEL);
  401db4:	4639      	mov	r1, r7
  401db6:	4630      	mov	r0, r6
  401db8:	4b08      	ldr	r3, [pc, #32]	; (401ddc <TC_init+0x8c>)
  401dba:	4798      	blx	r3
}
  401dbc:	b005      	add	sp, #20
  401dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  401dc2:	bf00      	nop
  401dc4:	004013d5 	.word	0x004013d5
  401dc8:	11e1a300 	.word	0x11e1a300
  401dcc:	00400673 	.word	0x00400673
  401dd0:	00400695 	.word	0x00400695
  401dd4:	e000e100 	.word	0xe000e100
  401dd8:	0040069d 	.word	0x0040069d
  401ddc:	0040068d 	.word	0x0040068d
  401de0:	004006ad 	.word	0x004006ad

00401de4 <show_time>:
	horario[6] = segundo[0];
	horario[7] = segundo[1];

}

void show_time(calendar rtc_initial){
  401de4:	b084      	sub	sp, #16
  401de6:	b530      	push	{r4, r5, lr}
  401de8:	b089      	sub	sp, #36	; 0x24
  401dea:	ac0c      	add	r4, sp, #48	; 0x30
  401dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Exiba a hora no formato (HH:MM:SS) no display OLED
	char hora[3];
	char minuto[3];
	char segundo[3];

	sprintf(hora,"%lu", rtc_initial.hour);
  401df0:	4d1e      	ldr	r5, [pc, #120]	; (401e6c <show_time+0x88>)
  401df2:	9a10      	ldr	r2, [sp, #64]	; 0x40
  401df4:	4629      	mov	r1, r5
  401df6:	a807      	add	r0, sp, #28
  401df8:	4c1d      	ldr	r4, [pc, #116]	; (401e70 <show_time+0x8c>)
  401dfa:	47a0      	blx	r4
	sprintf(minuto,"%lu", rtc_initial.minute);
  401dfc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  401dfe:	4629      	mov	r1, r5
  401e00:	a806      	add	r0, sp, #24
  401e02:	47a0      	blx	r4
	sprintf(segundo,"%lu", rtc_initial.seccond);
  401e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
  401e06:	4629      	mov	r1, r5
  401e08:	a805      	add	r0, sp, #20
  401e0a:	47a0      	blx	r4

	char teste [] = {segundo[0]};
  401e0c:	f89d 2014 	ldrb.w	r2, [sp, #20]
	char horario[] = { hora[0],hora[1], ':', minuto[0], minuto[1], ':', segundo[0], segundo[1]};
  401e10:	f89d 301c 	ldrb.w	r3, [sp, #28]
  401e14:	f88d 300c 	strb.w	r3, [sp, #12]
  401e18:	f89d 301d 	ldrb.w	r3, [sp, #29]
  401e1c:	f88d 300d 	strb.w	r3, [sp, #13]
  401e20:	233a      	movs	r3, #58	; 0x3a
  401e22:	f88d 300e 	strb.w	r3, [sp, #14]
  401e26:	f89d 1018 	ldrb.w	r1, [sp, #24]
  401e2a:	f88d 100f 	strb.w	r1, [sp, #15]
  401e2e:	f89d 1019 	ldrb.w	r1, [sp, #25]
  401e32:	f88d 1010 	strb.w	r1, [sp, #16]
  401e36:	f88d 3011 	strb.w	r3, [sp, #17]
  401e3a:	f88d 2012 	strb.w	r2, [sp, #18]
  401e3e:	f89d 3015 	ldrb.w	r3, [sp, #21]
  401e42:	f88d 3013 	strb.w	r3, [sp, #19]
	//gfx_mono_draw_filled_circle(104, 16, 16, GFX_PIXEL_SET, GFX_WHOLE);
	gfx_mono_draw_string(horario, 1,16, &sysfont);
  401e46:	4b0b      	ldr	r3, [pc, #44]	; (401e74 <show_time+0x90>)
  401e48:	2210      	movs	r2, #16
  401e4a:	2101      	movs	r1, #1
  401e4c:	a803      	add	r0, sp, #12
  401e4e:	4c0a      	ldr	r4, [pc, #40]	; (401e78 <show_time+0x94>)
  401e50:	47a0      	blx	r4
	gfx_mono_draw_filled_circle(95, 16, 16, GFX_PIXEL_SET, GFX_WHOLE);
  401e52:	23ff      	movs	r3, #255	; 0xff
  401e54:	9300      	str	r3, [sp, #0]
  401e56:	2301      	movs	r3, #1
  401e58:	2210      	movs	r2, #16
  401e5a:	4611      	mov	r1, r2
  401e5c:	205f      	movs	r0, #95	; 0x5f
  401e5e:	4c07      	ldr	r4, [pc, #28]	; (401e7c <show_time+0x98>)
  401e60:	47a0      	blx	r4

}
  401e62:	b009      	add	sp, #36	; 0x24
  401e64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  401e68:	b004      	add	sp, #16
  401e6a:	4770      	bx	lr
  401e6c:	00407414 	.word	0x00407414
  401e70:	00402479 	.word	0x00402479
  401e74:	2040000c 	.word	0x2040000c
  401e78:	00400ab9 	.word	0x00400ab9
  401e7c:	004008f1 	.word	0x004008f1

00401e80 <main>:

int main (void)
{
  401e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401e84:	b08f      	sub	sp, #60	; 0x3c
	board_init();
  401e86:	4b5c      	ldr	r3, [pc, #368]	; (401ff8 <main+0x178>)
  401e88:	4798      	blx	r3
	sysclk_init();
  401e8a:	4b5c      	ldr	r3, [pc, #368]	; (401ffc <main+0x17c>)
  401e8c:	4798      	blx	r3
	delay_init();

  // Init OLED
	gfx_mono_ssd1306_init();
  401e8e:	4b5c      	ldr	r3, [pc, #368]	; (402000 <main+0x180>)
  401e90:	4798      	blx	r3
  // Escreve na tela um circulo e um texto
	//gfx_mono_draw_filled_circle(20, 16, 16, GFX_PIXEL_SET, GFX_WHOLE);
	//gfx_mono_draw_string("Mundo", 50,16, &sysfont);
  
	/* Configura Leds */
	LED_init(0);	
  401e92:	2000      	movs	r0, #0
  401e94:	4b5b      	ldr	r3, [pc, #364]	; (402004 <main+0x184>)
  401e96:	4798      	blx	r3

	
	 /** Configura timer TC0, canal 1 */
	TC_init(TC0, ID_TC1, 1, 4);
  401e98:	2304      	movs	r3, #4
  401e9a:	2201      	movs	r2, #1
  401e9c:	2118      	movs	r1, #24
  401e9e:	485a      	ldr	r0, [pc, #360]	; (402008 <main+0x188>)
  401ea0:	4c5a      	ldr	r4, [pc, #360]	; (40200c <main+0x18c>)
  401ea2:	47a0      	blx	r4
	TC_init(TC1, ID_TC4, 1, 10);
  401ea4:	230a      	movs	r3, #10
  401ea6:	2201      	movs	r2, #1
  401ea8:	211b      	movs	r1, #27
  401eaa:	4859      	ldr	r0, [pc, #356]	; (402010 <main+0x190>)
  401eac:	47a0      	blx	r4
	
	
	// Inicializa RTT com IRQ no alarme.
	f_rtt_alarme = true;
  401eae:	2601      	movs	r6, #1
  401eb0:	4b58      	ldr	r3, [pc, #352]	; (402014 <main+0x194>)
  401eb2:	701e      	strb	r6, [r3, #0]
	
	/** Configura RTC */
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  401eb4:	ac07      	add	r4, sp, #28
  401eb6:	4d58      	ldr	r5, [pc, #352]	; (402018 <main+0x198>)
  401eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401ebc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401ec0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	

	
//	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN );
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN | RTC_IER_SECEN);
  401ec4:	4f55      	ldr	r7, [pc, #340]	; (40201c <main+0x19c>)
  401ec6:	2306      	movs	r3, #6
  401ec8:	9305      	str	r3, [sp, #20]
  401eca:	466c      	mov	r4, sp
  401ecc:	ad09      	add	r5, sp, #36	; 0x24
  401ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401ed2:	682b      	ldr	r3, [r5, #0]
  401ed4:	6023      	str	r3, [r4, #0]
  401ed6:	ab07      	add	r3, sp, #28
  401ed8:	cb0c      	ldmia	r3, {r2, r3}
  401eda:	2102      	movs	r1, #2
  401edc:	4638      	mov	r0, r7
  401ede:	4c50      	ldr	r4, [pc, #320]	; (402020 <main+0x1a0>)
  401ee0:	47a0      	blx	r4

	/* configura alarme do RTC */
	rtc_set_date_alarm(RTC, 1, rtc_initial.month, 1, rtc_initial.day);
  401ee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401ee4:	9300      	str	r3, [sp, #0]
  401ee6:	4633      	mov	r3, r6
  401ee8:	9a08      	ldr	r2, [sp, #32]
  401eea:	4631      	mov	r1, r6
  401eec:	4638      	mov	r0, r7
  401eee:	4c4d      	ldr	r4, [pc, #308]	; (402024 <main+0x1a4>)
  401ef0:	47a0      	blx	r4
	rtc_set_time_alarm(RTC, 1, rtc_initial.hour, 1, rtc_initial.minute, 1, rtc_initial.seccond + 20);
  401ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  401ef4:	3314      	adds	r3, #20
  401ef6:	9302      	str	r3, [sp, #8]
  401ef8:	9601      	str	r6, [sp, #4]
  401efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401efc:	9300      	str	r3, [sp, #0]
  401efe:	4633      	mov	r3, r6
  401f00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401f02:	4631      	mov	r1, r6
  401f04:	4638      	mov	r0, r7
  401f06:	4c48      	ldr	r4, [pc, #288]	; (402028 <main+0x1a8>)
  401f08:	47a0      	blx	r4
	
	gfx_mono_draw_string("          ", 1,16, &sysfont);
  401f0a:	4b48      	ldr	r3, [pc, #288]	; (40202c <main+0x1ac>)
  401f0c:	2210      	movs	r2, #16
  401f0e:	4631      	mov	r1, r6
  401f10:	4847      	ldr	r0, [pc, #284]	; (402030 <main+0x1b0>)
  401f12:	4c48      	ldr	r4, [pc, #288]	; (402034 <main+0x1b4>)
  401f14:	47a0      	blx	r4
  /* Insert application code here, after the board has been initialized. */
	while(1) {
		
	//TC:
	if(flag_tc){
  401f16:	4f48      	ldr	r7, [pc, #288]	; (402038 <main+0x1b8>)
	rtt_sel_source(RTT, false);
  401f18:	4c48      	ldr	r4, [pc, #288]	; (40203c <main+0x1bc>)
		pisca_led_RTC(5, 200);
		flag_rtc = 0;
	}

	if(flag_rtc2){
		rtc_get_time(RTC, &rtc_initial.hour, &rtc_initial.minute, &rtc_initial.seccond);
  401f1a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 40201c <main+0x19c>
  401f1e:	e042      	b.n	401fa6 <main+0x126>
		pisca_led(1,10);
  401f20:	210a      	movs	r1, #10
  401f22:	2001      	movs	r0, #1
  401f24:	4b46      	ldr	r3, [pc, #280]	; (402040 <main+0x1c0>)
  401f26:	4798      	blx	r3
		flag_tc = 0;
  401f28:	2300      	movs	r3, #0
  401f2a:	703b      	strb	r3, [r7, #0]
  401f2c:	e03e      	b.n	401fac <main+0x12c>
		pisca_led2(1,10);
  401f2e:	210a      	movs	r1, #10
  401f30:	2001      	movs	r0, #1
  401f32:	4b44      	ldr	r3, [pc, #272]	; (402044 <main+0x1c4>)
  401f34:	4798      	blx	r3
		flag_tc2 = 0;
  401f36:	2200      	movs	r2, #0
  401f38:	4b43      	ldr	r3, [pc, #268]	; (402048 <main+0x1c8>)
  401f3a:	701a      	strb	r2, [r3, #0]
  401f3c:	e03a      	b.n	401fb4 <main+0x134>
	rtt_sel_source(RTT, false);
  401f3e:	2100      	movs	r1, #0
  401f40:	4620      	mov	r0, r4
  401f42:	4b42      	ldr	r3, [pc, #264]	; (40204c <main+0x1cc>)
  401f44:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  401f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401f4a:	4620      	mov	r0, r4
  401f4c:	4b40      	ldr	r3, [pc, #256]	; (402050 <main+0x1d0>)
  401f4e:	4798      	blx	r3
	ul_previous_time = rtt_read_timer_value(RTT);
  401f50:	4620      	mov	r0, r4
  401f52:	4b40      	ldr	r3, [pc, #256]	; (402054 <main+0x1d4>)
  401f54:	4798      	blx	r3
  401f56:	4605      	mov	r5, r0
	while (ul_previous_time == rtt_read_timer_value(RTT));
  401f58:	4e3e      	ldr	r6, [pc, #248]	; (402054 <main+0x1d4>)
  401f5a:	4620      	mov	r0, r4
  401f5c:	47b0      	blx	r6
  401f5e:	4285      	cmp	r5, r0
  401f60:	d0fb      	beq.n	401f5a <main+0xda>
	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  401f62:	f105 0108 	add.w	r1, r5, #8
  401f66:	4620      	mov	r0, r4
  401f68:	4b3b      	ldr	r3, [pc, #236]	; (402058 <main+0x1d8>)
  401f6a:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401f6c:	4b3b      	ldr	r3, [pc, #236]	; (40205c <main+0x1dc>)
  401f6e:	2208      	movs	r2, #8
  401f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401f74:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401f78:	2500      	movs	r5, #0
  401f7a:	f883 5303 	strb.w	r5, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401f7e:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  401f80:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401f84:	4620      	mov	r0, r4
  401f86:	4b36      	ldr	r3, [pc, #216]	; (402060 <main+0x1e0>)
  401f88:	4798      	blx	r3
	f_rtt_alarme = false;
  401f8a:	4b22      	ldr	r3, [pc, #136]	; (402014 <main+0x194>)
  401f8c:	701d      	strb	r5, [r3, #0]
  401f8e:	e015      	b.n	401fbc <main+0x13c>
		pisca_led_RTC(5, 200);
  401f90:	21c8      	movs	r1, #200	; 0xc8
  401f92:	2005      	movs	r0, #5
  401f94:	4b33      	ldr	r3, [pc, #204]	; (402064 <main+0x1e4>)
  401f96:	4798      	blx	r3
		flag_rtc = 0;
  401f98:	2200      	movs	r2, #0
  401f9a:	4b33      	ldr	r3, [pc, #204]	; (402068 <main+0x1e8>)
  401f9c:	701a      	strb	r2, [r3, #0]
  401f9e:	e011      	b.n	401fc4 <main+0x144>
		show_time(rtc_initial);

	}
	
	
	pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401fa0:	2002      	movs	r0, #2
  401fa2:	4b32      	ldr	r3, [pc, #200]	; (40206c <main+0x1ec>)
  401fa4:	4798      	blx	r3
	if(flag_tc){
  401fa6:	783b      	ldrb	r3, [r7, #0]
  401fa8:	2b00      	cmp	r3, #0
  401faa:	d1b9      	bne.n	401f20 <main+0xa0>
	if(flag_tc2){
  401fac:	4b26      	ldr	r3, [pc, #152]	; (402048 <main+0x1c8>)
  401fae:	781b      	ldrb	r3, [r3, #0]
  401fb0:	2b00      	cmp	r3, #0
  401fb2:	d1bc      	bne.n	401f2e <main+0xae>
	if (f_rtt_alarme){
  401fb4:	4b17      	ldr	r3, [pc, #92]	; (402014 <main+0x194>)
  401fb6:	781b      	ldrb	r3, [r3, #0]
  401fb8:	2b00      	cmp	r3, #0
  401fba:	d1c0      	bne.n	401f3e <main+0xbe>
	if(flag_rtc){
  401fbc:	4b2a      	ldr	r3, [pc, #168]	; (402068 <main+0x1e8>)
  401fbe:	781b      	ldrb	r3, [r3, #0]
  401fc0:	2b00      	cmp	r3, #0
  401fc2:	d1e5      	bne.n	401f90 <main+0x110>
	if(flag_rtc2){
  401fc4:	4b2a      	ldr	r3, [pc, #168]	; (402070 <main+0x1f0>)
  401fc6:	781b      	ldrb	r3, [r3, #0]
  401fc8:	2b00      	cmp	r3, #0
  401fca:	d0e9      	beq.n	401fa0 <main+0x120>
		rtc_get_time(RTC, &rtc_initial.hour, &rtc_initial.minute, &rtc_initial.seccond);
  401fcc:	ad07      	add	r5, sp, #28
  401fce:	ae0b      	add	r6, sp, #44	; 0x2c
  401fd0:	ab0d      	add	r3, sp, #52	; 0x34
  401fd2:	aa0c      	add	r2, sp, #48	; 0x30
  401fd4:	4631      	mov	r1, r6
  401fd6:	4640      	mov	r0, r8
  401fd8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 402078 <main+0x1f8>
  401fdc:	47c8      	blx	r9
		flag_rtc2 = 0;
  401fde:	2200      	movs	r2, #0
  401fe0:	4b23      	ldr	r3, [pc, #140]	; (402070 <main+0x1f0>)
  401fe2:	701a      	strb	r2, [r3, #0]
		show_time(rtc_initial);
  401fe4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
  401fe8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  401fec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  401ff0:	4d20      	ldr	r5, [pc, #128]	; (402074 <main+0x1f4>)
  401ff2:	47a8      	blx	r5
  401ff4:	e7d4      	b.n	401fa0 <main+0x120>
  401ff6:	bf00      	nop
  401ff8:	00400f25 	.word	0x00400f25
  401ffc:	00400eb5 	.word	0x00400eb5
  402000:	00400b51 	.word	0x00400b51
  402004:	00401c45 	.word	0x00401c45
  402008:	4000c000 	.word	0x4000c000
  40200c:	00401d51 	.word	0x00401d51
  402010:	40010000 	.word	0x40010000
  402014:	20400c70 	.word	0x20400c70
  402018:	004073ec 	.word	0x004073ec
  40201c:	400e1860 	.word	0x400e1860
  402020:	00401cad 	.word	0x00401cad
  402024:	004003fd 	.word	0x004003fd
  402028:	004002b1 	.word	0x004002b1
  40202c:	2040000c 	.word	0x2040000c
  402030:	00407408 	.word	0x00407408
  402034:	00400ab9 	.word	0x00400ab9
  402038:	20400c73 	.word	0x20400c73
  40203c:	400e1830 	.word	0x400e1830
  402040:	00401a41 	.word	0x00401a41
  402044:	00401ac9 	.word	0x00401ac9
  402048:	20400c74 	.word	0x20400c74
  40204c:	00400479 	.word	0x00400479
  402050:	00400465 	.word	0x00400465
  402054:	004004cd 	.word	0x004004cd
  402058:	004004e5 	.word	0x004004e5
  40205c:	e000e100 	.word	0xe000e100
  402060:	004004a5 	.word	0x004004a5
  402064:	00401b59 	.word	0x00401b59
  402068:	20400c71 	.word	0x20400c71
  40206c:	00401479 	.word	0x00401479
  402070:	20400c72 	.word	0x20400c72
  402074:	00401de5 	.word	0x00401de5
  402078:	004001c7 	.word	0x004001c7

0040207c <__aeabi_uldivmod>:
  40207c:	b953      	cbnz	r3, 402094 <__aeabi_uldivmod+0x18>
  40207e:	b94a      	cbnz	r2, 402094 <__aeabi_uldivmod+0x18>
  402080:	2900      	cmp	r1, #0
  402082:	bf08      	it	eq
  402084:	2800      	cmpeq	r0, #0
  402086:	bf1c      	itt	ne
  402088:	f04f 31ff 	movne.w	r1, #4294967295
  40208c:	f04f 30ff 	movne.w	r0, #4294967295
  402090:	f000 b97a 	b.w	402388 <__aeabi_idiv0>
  402094:	f1ad 0c08 	sub.w	ip, sp, #8
  402098:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40209c:	f000 f806 	bl	4020ac <__udivmoddi4>
  4020a0:	f8dd e004 	ldr.w	lr, [sp, #4]
  4020a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4020a8:	b004      	add	sp, #16
  4020aa:	4770      	bx	lr

004020ac <__udivmoddi4>:
  4020ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4020b0:	468c      	mov	ip, r1
  4020b2:	460d      	mov	r5, r1
  4020b4:	4604      	mov	r4, r0
  4020b6:	9e08      	ldr	r6, [sp, #32]
  4020b8:	2b00      	cmp	r3, #0
  4020ba:	d151      	bne.n	402160 <__udivmoddi4+0xb4>
  4020bc:	428a      	cmp	r2, r1
  4020be:	4617      	mov	r7, r2
  4020c0:	d96d      	bls.n	40219e <__udivmoddi4+0xf2>
  4020c2:	fab2 fe82 	clz	lr, r2
  4020c6:	f1be 0f00 	cmp.w	lr, #0
  4020ca:	d00b      	beq.n	4020e4 <__udivmoddi4+0x38>
  4020cc:	f1ce 0c20 	rsb	ip, lr, #32
  4020d0:	fa01 f50e 	lsl.w	r5, r1, lr
  4020d4:	fa20 fc0c 	lsr.w	ip, r0, ip
  4020d8:	fa02 f70e 	lsl.w	r7, r2, lr
  4020dc:	ea4c 0c05 	orr.w	ip, ip, r5
  4020e0:	fa00 f40e 	lsl.w	r4, r0, lr
  4020e4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  4020e8:	0c25      	lsrs	r5, r4, #16
  4020ea:	fbbc f8fa 	udiv	r8, ip, sl
  4020ee:	fa1f f987 	uxth.w	r9, r7
  4020f2:	fb0a cc18 	mls	ip, sl, r8, ip
  4020f6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4020fa:	fb08 f309 	mul.w	r3, r8, r9
  4020fe:	42ab      	cmp	r3, r5
  402100:	d90a      	bls.n	402118 <__udivmoddi4+0x6c>
  402102:	19ed      	adds	r5, r5, r7
  402104:	f108 32ff 	add.w	r2, r8, #4294967295
  402108:	f080 8123 	bcs.w	402352 <__udivmoddi4+0x2a6>
  40210c:	42ab      	cmp	r3, r5
  40210e:	f240 8120 	bls.w	402352 <__udivmoddi4+0x2a6>
  402112:	f1a8 0802 	sub.w	r8, r8, #2
  402116:	443d      	add	r5, r7
  402118:	1aed      	subs	r5, r5, r3
  40211a:	b2a4      	uxth	r4, r4
  40211c:	fbb5 f0fa 	udiv	r0, r5, sl
  402120:	fb0a 5510 	mls	r5, sl, r0, r5
  402124:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  402128:	fb00 f909 	mul.w	r9, r0, r9
  40212c:	45a1      	cmp	r9, r4
  40212e:	d909      	bls.n	402144 <__udivmoddi4+0x98>
  402130:	19e4      	adds	r4, r4, r7
  402132:	f100 33ff 	add.w	r3, r0, #4294967295
  402136:	f080 810a 	bcs.w	40234e <__udivmoddi4+0x2a2>
  40213a:	45a1      	cmp	r9, r4
  40213c:	f240 8107 	bls.w	40234e <__udivmoddi4+0x2a2>
  402140:	3802      	subs	r0, #2
  402142:	443c      	add	r4, r7
  402144:	eba4 0409 	sub.w	r4, r4, r9
  402148:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40214c:	2100      	movs	r1, #0
  40214e:	2e00      	cmp	r6, #0
  402150:	d061      	beq.n	402216 <__udivmoddi4+0x16a>
  402152:	fa24 f40e 	lsr.w	r4, r4, lr
  402156:	2300      	movs	r3, #0
  402158:	6034      	str	r4, [r6, #0]
  40215a:	6073      	str	r3, [r6, #4]
  40215c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402160:	428b      	cmp	r3, r1
  402162:	d907      	bls.n	402174 <__udivmoddi4+0xc8>
  402164:	2e00      	cmp	r6, #0
  402166:	d054      	beq.n	402212 <__udivmoddi4+0x166>
  402168:	2100      	movs	r1, #0
  40216a:	e886 0021 	stmia.w	r6, {r0, r5}
  40216e:	4608      	mov	r0, r1
  402170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402174:	fab3 f183 	clz	r1, r3
  402178:	2900      	cmp	r1, #0
  40217a:	f040 808e 	bne.w	40229a <__udivmoddi4+0x1ee>
  40217e:	42ab      	cmp	r3, r5
  402180:	d302      	bcc.n	402188 <__udivmoddi4+0xdc>
  402182:	4282      	cmp	r2, r0
  402184:	f200 80fa 	bhi.w	40237c <__udivmoddi4+0x2d0>
  402188:	1a84      	subs	r4, r0, r2
  40218a:	eb65 0503 	sbc.w	r5, r5, r3
  40218e:	2001      	movs	r0, #1
  402190:	46ac      	mov	ip, r5
  402192:	2e00      	cmp	r6, #0
  402194:	d03f      	beq.n	402216 <__udivmoddi4+0x16a>
  402196:	e886 1010 	stmia.w	r6, {r4, ip}
  40219a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40219e:	b912      	cbnz	r2, 4021a6 <__udivmoddi4+0xfa>
  4021a0:	2701      	movs	r7, #1
  4021a2:	fbb7 f7f2 	udiv	r7, r7, r2
  4021a6:	fab7 fe87 	clz	lr, r7
  4021aa:	f1be 0f00 	cmp.w	lr, #0
  4021ae:	d134      	bne.n	40221a <__udivmoddi4+0x16e>
  4021b0:	1beb      	subs	r3, r5, r7
  4021b2:	0c3a      	lsrs	r2, r7, #16
  4021b4:	fa1f fc87 	uxth.w	ip, r7
  4021b8:	2101      	movs	r1, #1
  4021ba:	fbb3 f8f2 	udiv	r8, r3, r2
  4021be:	0c25      	lsrs	r5, r4, #16
  4021c0:	fb02 3318 	mls	r3, r2, r8, r3
  4021c4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4021c8:	fb0c f308 	mul.w	r3, ip, r8
  4021cc:	42ab      	cmp	r3, r5
  4021ce:	d907      	bls.n	4021e0 <__udivmoddi4+0x134>
  4021d0:	19ed      	adds	r5, r5, r7
  4021d2:	f108 30ff 	add.w	r0, r8, #4294967295
  4021d6:	d202      	bcs.n	4021de <__udivmoddi4+0x132>
  4021d8:	42ab      	cmp	r3, r5
  4021da:	f200 80d1 	bhi.w	402380 <__udivmoddi4+0x2d4>
  4021de:	4680      	mov	r8, r0
  4021e0:	1aed      	subs	r5, r5, r3
  4021e2:	b2a3      	uxth	r3, r4
  4021e4:	fbb5 f0f2 	udiv	r0, r5, r2
  4021e8:	fb02 5510 	mls	r5, r2, r0, r5
  4021ec:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  4021f0:	fb0c fc00 	mul.w	ip, ip, r0
  4021f4:	45a4      	cmp	ip, r4
  4021f6:	d907      	bls.n	402208 <__udivmoddi4+0x15c>
  4021f8:	19e4      	adds	r4, r4, r7
  4021fa:	f100 33ff 	add.w	r3, r0, #4294967295
  4021fe:	d202      	bcs.n	402206 <__udivmoddi4+0x15a>
  402200:	45a4      	cmp	ip, r4
  402202:	f200 80b8 	bhi.w	402376 <__udivmoddi4+0x2ca>
  402206:	4618      	mov	r0, r3
  402208:	eba4 040c 	sub.w	r4, r4, ip
  40220c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  402210:	e79d      	b.n	40214e <__udivmoddi4+0xa2>
  402212:	4631      	mov	r1, r6
  402214:	4630      	mov	r0, r6
  402216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40221a:	f1ce 0420 	rsb	r4, lr, #32
  40221e:	fa05 f30e 	lsl.w	r3, r5, lr
  402222:	fa07 f70e 	lsl.w	r7, r7, lr
  402226:	fa20 f804 	lsr.w	r8, r0, r4
  40222a:	0c3a      	lsrs	r2, r7, #16
  40222c:	fa25 f404 	lsr.w	r4, r5, r4
  402230:	ea48 0803 	orr.w	r8, r8, r3
  402234:	fbb4 f1f2 	udiv	r1, r4, r2
  402238:	ea4f 4518 	mov.w	r5, r8, lsr #16
  40223c:	fb02 4411 	mls	r4, r2, r1, r4
  402240:	fa1f fc87 	uxth.w	ip, r7
  402244:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  402248:	fb01 f30c 	mul.w	r3, r1, ip
  40224c:	42ab      	cmp	r3, r5
  40224e:	fa00 f40e 	lsl.w	r4, r0, lr
  402252:	d909      	bls.n	402268 <__udivmoddi4+0x1bc>
  402254:	19ed      	adds	r5, r5, r7
  402256:	f101 30ff 	add.w	r0, r1, #4294967295
  40225a:	f080 808a 	bcs.w	402372 <__udivmoddi4+0x2c6>
  40225e:	42ab      	cmp	r3, r5
  402260:	f240 8087 	bls.w	402372 <__udivmoddi4+0x2c6>
  402264:	3902      	subs	r1, #2
  402266:	443d      	add	r5, r7
  402268:	1aeb      	subs	r3, r5, r3
  40226a:	fa1f f588 	uxth.w	r5, r8
  40226e:	fbb3 f0f2 	udiv	r0, r3, r2
  402272:	fb02 3310 	mls	r3, r2, r0, r3
  402276:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40227a:	fb00 f30c 	mul.w	r3, r0, ip
  40227e:	42ab      	cmp	r3, r5
  402280:	d907      	bls.n	402292 <__udivmoddi4+0x1e6>
  402282:	19ed      	adds	r5, r5, r7
  402284:	f100 38ff 	add.w	r8, r0, #4294967295
  402288:	d26f      	bcs.n	40236a <__udivmoddi4+0x2be>
  40228a:	42ab      	cmp	r3, r5
  40228c:	d96d      	bls.n	40236a <__udivmoddi4+0x2be>
  40228e:	3802      	subs	r0, #2
  402290:	443d      	add	r5, r7
  402292:	1aeb      	subs	r3, r5, r3
  402294:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  402298:	e78f      	b.n	4021ba <__udivmoddi4+0x10e>
  40229a:	f1c1 0720 	rsb	r7, r1, #32
  40229e:	fa22 f807 	lsr.w	r8, r2, r7
  4022a2:	408b      	lsls	r3, r1
  4022a4:	fa05 f401 	lsl.w	r4, r5, r1
  4022a8:	ea48 0303 	orr.w	r3, r8, r3
  4022ac:	fa20 fe07 	lsr.w	lr, r0, r7
  4022b0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  4022b4:	40fd      	lsrs	r5, r7
  4022b6:	ea4e 0e04 	orr.w	lr, lr, r4
  4022ba:	fbb5 f9fc 	udiv	r9, r5, ip
  4022be:	ea4f 441e 	mov.w	r4, lr, lsr #16
  4022c2:	fb0c 5519 	mls	r5, ip, r9, r5
  4022c6:	fa1f f883 	uxth.w	r8, r3
  4022ca:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  4022ce:	fb09 f408 	mul.w	r4, r9, r8
  4022d2:	42ac      	cmp	r4, r5
  4022d4:	fa02 f201 	lsl.w	r2, r2, r1
  4022d8:	fa00 fa01 	lsl.w	sl, r0, r1
  4022dc:	d908      	bls.n	4022f0 <__udivmoddi4+0x244>
  4022de:	18ed      	adds	r5, r5, r3
  4022e0:	f109 30ff 	add.w	r0, r9, #4294967295
  4022e4:	d243      	bcs.n	40236e <__udivmoddi4+0x2c2>
  4022e6:	42ac      	cmp	r4, r5
  4022e8:	d941      	bls.n	40236e <__udivmoddi4+0x2c2>
  4022ea:	f1a9 0902 	sub.w	r9, r9, #2
  4022ee:	441d      	add	r5, r3
  4022f0:	1b2d      	subs	r5, r5, r4
  4022f2:	fa1f fe8e 	uxth.w	lr, lr
  4022f6:	fbb5 f0fc 	udiv	r0, r5, ip
  4022fa:	fb0c 5510 	mls	r5, ip, r0, r5
  4022fe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  402302:	fb00 f808 	mul.w	r8, r0, r8
  402306:	45a0      	cmp	r8, r4
  402308:	d907      	bls.n	40231a <__udivmoddi4+0x26e>
  40230a:	18e4      	adds	r4, r4, r3
  40230c:	f100 35ff 	add.w	r5, r0, #4294967295
  402310:	d229      	bcs.n	402366 <__udivmoddi4+0x2ba>
  402312:	45a0      	cmp	r8, r4
  402314:	d927      	bls.n	402366 <__udivmoddi4+0x2ba>
  402316:	3802      	subs	r0, #2
  402318:	441c      	add	r4, r3
  40231a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40231e:	eba4 0408 	sub.w	r4, r4, r8
  402322:	fba0 8902 	umull	r8, r9, r0, r2
  402326:	454c      	cmp	r4, r9
  402328:	46c6      	mov	lr, r8
  40232a:	464d      	mov	r5, r9
  40232c:	d315      	bcc.n	40235a <__udivmoddi4+0x2ae>
  40232e:	d012      	beq.n	402356 <__udivmoddi4+0x2aa>
  402330:	b156      	cbz	r6, 402348 <__udivmoddi4+0x29c>
  402332:	ebba 030e 	subs.w	r3, sl, lr
  402336:	eb64 0405 	sbc.w	r4, r4, r5
  40233a:	fa04 f707 	lsl.w	r7, r4, r7
  40233e:	40cb      	lsrs	r3, r1
  402340:	431f      	orrs	r7, r3
  402342:	40cc      	lsrs	r4, r1
  402344:	6037      	str	r7, [r6, #0]
  402346:	6074      	str	r4, [r6, #4]
  402348:	2100      	movs	r1, #0
  40234a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40234e:	4618      	mov	r0, r3
  402350:	e6f8      	b.n	402144 <__udivmoddi4+0x98>
  402352:	4690      	mov	r8, r2
  402354:	e6e0      	b.n	402118 <__udivmoddi4+0x6c>
  402356:	45c2      	cmp	sl, r8
  402358:	d2ea      	bcs.n	402330 <__udivmoddi4+0x284>
  40235a:	ebb8 0e02 	subs.w	lr, r8, r2
  40235e:	eb69 0503 	sbc.w	r5, r9, r3
  402362:	3801      	subs	r0, #1
  402364:	e7e4      	b.n	402330 <__udivmoddi4+0x284>
  402366:	4628      	mov	r0, r5
  402368:	e7d7      	b.n	40231a <__udivmoddi4+0x26e>
  40236a:	4640      	mov	r0, r8
  40236c:	e791      	b.n	402292 <__udivmoddi4+0x1e6>
  40236e:	4681      	mov	r9, r0
  402370:	e7be      	b.n	4022f0 <__udivmoddi4+0x244>
  402372:	4601      	mov	r1, r0
  402374:	e778      	b.n	402268 <__udivmoddi4+0x1bc>
  402376:	3802      	subs	r0, #2
  402378:	443c      	add	r4, r7
  40237a:	e745      	b.n	402208 <__udivmoddi4+0x15c>
  40237c:	4608      	mov	r0, r1
  40237e:	e708      	b.n	402192 <__udivmoddi4+0xe6>
  402380:	f1a8 0802 	sub.w	r8, r8, #2
  402384:	443d      	add	r5, r7
  402386:	e72b      	b.n	4021e0 <__udivmoddi4+0x134>

00402388 <__aeabi_idiv0>:
  402388:	4770      	bx	lr
  40238a:	bf00      	nop

0040238c <__libc_init_array>:
  40238c:	b570      	push	{r4, r5, r6, lr}
  40238e:	4e0f      	ldr	r6, [pc, #60]	; (4023cc <__libc_init_array+0x40>)
  402390:	4d0f      	ldr	r5, [pc, #60]	; (4023d0 <__libc_init_array+0x44>)
  402392:	1b76      	subs	r6, r6, r5
  402394:	10b6      	asrs	r6, r6, #2
  402396:	bf18      	it	ne
  402398:	2400      	movne	r4, #0
  40239a:	d005      	beq.n	4023a8 <__libc_init_array+0x1c>
  40239c:	3401      	adds	r4, #1
  40239e:	f855 3b04 	ldr.w	r3, [r5], #4
  4023a2:	4798      	blx	r3
  4023a4:	42a6      	cmp	r6, r4
  4023a6:	d1f9      	bne.n	40239c <__libc_init_array+0x10>
  4023a8:	4e0a      	ldr	r6, [pc, #40]	; (4023d4 <__libc_init_array+0x48>)
  4023aa:	4d0b      	ldr	r5, [pc, #44]	; (4023d8 <__libc_init_array+0x4c>)
  4023ac:	1b76      	subs	r6, r6, r5
  4023ae:	f005 f977 	bl	4076a0 <_init>
  4023b2:	10b6      	asrs	r6, r6, #2
  4023b4:	bf18      	it	ne
  4023b6:	2400      	movne	r4, #0
  4023b8:	d006      	beq.n	4023c8 <__libc_init_array+0x3c>
  4023ba:	3401      	adds	r4, #1
  4023bc:	f855 3b04 	ldr.w	r3, [r5], #4
  4023c0:	4798      	blx	r3
  4023c2:	42a6      	cmp	r6, r4
  4023c4:	d1f9      	bne.n	4023ba <__libc_init_array+0x2e>
  4023c6:	bd70      	pop	{r4, r5, r6, pc}
  4023c8:	bd70      	pop	{r4, r5, r6, pc}
  4023ca:	bf00      	nop
  4023cc:	004076ac 	.word	0x004076ac
  4023d0:	004076ac 	.word	0x004076ac
  4023d4:	004076b4 	.word	0x004076b4
  4023d8:	004076ac 	.word	0x004076ac

004023dc <memset>:
  4023dc:	b470      	push	{r4, r5, r6}
  4023de:	0786      	lsls	r6, r0, #30
  4023e0:	d046      	beq.n	402470 <memset+0x94>
  4023e2:	1e54      	subs	r4, r2, #1
  4023e4:	2a00      	cmp	r2, #0
  4023e6:	d041      	beq.n	40246c <memset+0x90>
  4023e8:	b2ca      	uxtb	r2, r1
  4023ea:	4603      	mov	r3, r0
  4023ec:	e002      	b.n	4023f4 <memset+0x18>
  4023ee:	f114 34ff 	adds.w	r4, r4, #4294967295
  4023f2:	d33b      	bcc.n	40246c <memset+0x90>
  4023f4:	f803 2b01 	strb.w	r2, [r3], #1
  4023f8:	079d      	lsls	r5, r3, #30
  4023fa:	d1f8      	bne.n	4023ee <memset+0x12>
  4023fc:	2c03      	cmp	r4, #3
  4023fe:	d92e      	bls.n	40245e <memset+0x82>
  402400:	b2cd      	uxtb	r5, r1
  402402:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  402406:	2c0f      	cmp	r4, #15
  402408:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40240c:	d919      	bls.n	402442 <memset+0x66>
  40240e:	f103 0210 	add.w	r2, r3, #16
  402412:	4626      	mov	r6, r4
  402414:	3e10      	subs	r6, #16
  402416:	2e0f      	cmp	r6, #15
  402418:	f842 5c10 	str.w	r5, [r2, #-16]
  40241c:	f842 5c0c 	str.w	r5, [r2, #-12]
  402420:	f842 5c08 	str.w	r5, [r2, #-8]
  402424:	f842 5c04 	str.w	r5, [r2, #-4]
  402428:	f102 0210 	add.w	r2, r2, #16
  40242c:	d8f2      	bhi.n	402414 <memset+0x38>
  40242e:	f1a4 0210 	sub.w	r2, r4, #16
  402432:	f022 020f 	bic.w	r2, r2, #15
  402436:	f004 040f 	and.w	r4, r4, #15
  40243a:	3210      	adds	r2, #16
  40243c:	2c03      	cmp	r4, #3
  40243e:	4413      	add	r3, r2
  402440:	d90d      	bls.n	40245e <memset+0x82>
  402442:	461e      	mov	r6, r3
  402444:	4622      	mov	r2, r4
  402446:	3a04      	subs	r2, #4
  402448:	2a03      	cmp	r2, #3
  40244a:	f846 5b04 	str.w	r5, [r6], #4
  40244e:	d8fa      	bhi.n	402446 <memset+0x6a>
  402450:	1f22      	subs	r2, r4, #4
  402452:	f022 0203 	bic.w	r2, r2, #3
  402456:	3204      	adds	r2, #4
  402458:	4413      	add	r3, r2
  40245a:	f004 0403 	and.w	r4, r4, #3
  40245e:	b12c      	cbz	r4, 40246c <memset+0x90>
  402460:	b2c9      	uxtb	r1, r1
  402462:	441c      	add	r4, r3
  402464:	f803 1b01 	strb.w	r1, [r3], #1
  402468:	429c      	cmp	r4, r3
  40246a:	d1fb      	bne.n	402464 <memset+0x88>
  40246c:	bc70      	pop	{r4, r5, r6}
  40246e:	4770      	bx	lr
  402470:	4614      	mov	r4, r2
  402472:	4603      	mov	r3, r0
  402474:	e7c2      	b.n	4023fc <memset+0x20>
  402476:	bf00      	nop

00402478 <sprintf>:
  402478:	b40e      	push	{r1, r2, r3}
  40247a:	b5f0      	push	{r4, r5, r6, r7, lr}
  40247c:	b09c      	sub	sp, #112	; 0x70
  40247e:	ab21      	add	r3, sp, #132	; 0x84
  402480:	490f      	ldr	r1, [pc, #60]	; (4024c0 <sprintf+0x48>)
  402482:	f853 2b04 	ldr.w	r2, [r3], #4
  402486:	9301      	str	r3, [sp, #4]
  402488:	4605      	mov	r5, r0
  40248a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  40248e:	6808      	ldr	r0, [r1, #0]
  402490:	9502      	str	r5, [sp, #8]
  402492:	f44f 7702 	mov.w	r7, #520	; 0x208
  402496:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40249a:	a902      	add	r1, sp, #8
  40249c:	9506      	str	r5, [sp, #24]
  40249e:	f8ad 7014 	strh.w	r7, [sp, #20]
  4024a2:	9404      	str	r4, [sp, #16]
  4024a4:	9407      	str	r4, [sp, #28]
  4024a6:	f8ad 6016 	strh.w	r6, [sp, #22]
  4024aa:	f000 f80b 	bl	4024c4 <_svfprintf_r>
  4024ae:	9b02      	ldr	r3, [sp, #8]
  4024b0:	2200      	movs	r2, #0
  4024b2:	701a      	strb	r2, [r3, #0]
  4024b4:	b01c      	add	sp, #112	; 0x70
  4024b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  4024ba:	b003      	add	sp, #12
  4024bc:	4770      	bx	lr
  4024be:	bf00      	nop
  4024c0:	20400020 	.word	0x20400020

004024c4 <_svfprintf_r>:
  4024c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024c8:	b0c3      	sub	sp, #268	; 0x10c
  4024ca:	460c      	mov	r4, r1
  4024cc:	910b      	str	r1, [sp, #44]	; 0x2c
  4024ce:	4692      	mov	sl, r2
  4024d0:	930f      	str	r3, [sp, #60]	; 0x3c
  4024d2:	900c      	str	r0, [sp, #48]	; 0x30
  4024d4:	f002 fa0c 	bl	4048f0 <_localeconv_r>
  4024d8:	6803      	ldr	r3, [r0, #0]
  4024da:	931a      	str	r3, [sp, #104]	; 0x68
  4024dc:	4618      	mov	r0, r3
  4024de:	f003 f8ef 	bl	4056c0 <strlen>
  4024e2:	89a3      	ldrh	r3, [r4, #12]
  4024e4:	9019      	str	r0, [sp, #100]	; 0x64
  4024e6:	0619      	lsls	r1, r3, #24
  4024e8:	d503      	bpl.n	4024f2 <_svfprintf_r+0x2e>
  4024ea:	6923      	ldr	r3, [r4, #16]
  4024ec:	2b00      	cmp	r3, #0
  4024ee:	f001 8003 	beq.w	4034f8 <_svfprintf_r+0x1034>
  4024f2:	2300      	movs	r3, #0
  4024f4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  4024f8:	9313      	str	r3, [sp, #76]	; 0x4c
  4024fa:	9315      	str	r3, [sp, #84]	; 0x54
  4024fc:	9314      	str	r3, [sp, #80]	; 0x50
  4024fe:	9327      	str	r3, [sp, #156]	; 0x9c
  402500:	9326      	str	r3, [sp, #152]	; 0x98
  402502:	9318      	str	r3, [sp, #96]	; 0x60
  402504:	931b      	str	r3, [sp, #108]	; 0x6c
  402506:	9309      	str	r3, [sp, #36]	; 0x24
  402508:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  40250c:	46c8      	mov	r8, r9
  40250e:	9316      	str	r3, [sp, #88]	; 0x58
  402510:	9317      	str	r3, [sp, #92]	; 0x5c
  402512:	f89a 3000 	ldrb.w	r3, [sl]
  402516:	4654      	mov	r4, sl
  402518:	b1e3      	cbz	r3, 402554 <_svfprintf_r+0x90>
  40251a:	2b25      	cmp	r3, #37	; 0x25
  40251c:	d102      	bne.n	402524 <_svfprintf_r+0x60>
  40251e:	e019      	b.n	402554 <_svfprintf_r+0x90>
  402520:	2b25      	cmp	r3, #37	; 0x25
  402522:	d003      	beq.n	40252c <_svfprintf_r+0x68>
  402524:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402528:	2b00      	cmp	r3, #0
  40252a:	d1f9      	bne.n	402520 <_svfprintf_r+0x5c>
  40252c:	eba4 050a 	sub.w	r5, r4, sl
  402530:	b185      	cbz	r5, 402554 <_svfprintf_r+0x90>
  402532:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402534:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402536:	f8c8 a000 	str.w	sl, [r8]
  40253a:	3301      	adds	r3, #1
  40253c:	442a      	add	r2, r5
  40253e:	2b07      	cmp	r3, #7
  402540:	f8c8 5004 	str.w	r5, [r8, #4]
  402544:	9227      	str	r2, [sp, #156]	; 0x9c
  402546:	9326      	str	r3, [sp, #152]	; 0x98
  402548:	dc7f      	bgt.n	40264a <_svfprintf_r+0x186>
  40254a:	f108 0808 	add.w	r8, r8, #8
  40254e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402550:	442b      	add	r3, r5
  402552:	9309      	str	r3, [sp, #36]	; 0x24
  402554:	7823      	ldrb	r3, [r4, #0]
  402556:	2b00      	cmp	r3, #0
  402558:	d07f      	beq.n	40265a <_svfprintf_r+0x196>
  40255a:	2300      	movs	r3, #0
  40255c:	461a      	mov	r2, r3
  40255e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402562:	4619      	mov	r1, r3
  402564:	930d      	str	r3, [sp, #52]	; 0x34
  402566:	469b      	mov	fp, r3
  402568:	f04f 30ff 	mov.w	r0, #4294967295
  40256c:	7863      	ldrb	r3, [r4, #1]
  40256e:	900a      	str	r0, [sp, #40]	; 0x28
  402570:	f104 0a01 	add.w	sl, r4, #1
  402574:	f10a 0a01 	add.w	sl, sl, #1
  402578:	f1a3 0020 	sub.w	r0, r3, #32
  40257c:	2858      	cmp	r0, #88	; 0x58
  40257e:	f200 83c1 	bhi.w	402d04 <_svfprintf_r+0x840>
  402582:	e8df f010 	tbh	[pc, r0, lsl #1]
  402586:	0238      	.short	0x0238
  402588:	03bf03bf 	.word	0x03bf03bf
  40258c:	03bf0240 	.word	0x03bf0240
  402590:	03bf03bf 	.word	0x03bf03bf
  402594:	03bf03bf 	.word	0x03bf03bf
  402598:	024503bf 	.word	0x024503bf
  40259c:	03bf0203 	.word	0x03bf0203
  4025a0:	026b005d 	.word	0x026b005d
  4025a4:	028603bf 	.word	0x028603bf
  4025a8:	039d039d 	.word	0x039d039d
  4025ac:	039d039d 	.word	0x039d039d
  4025b0:	039d039d 	.word	0x039d039d
  4025b4:	039d039d 	.word	0x039d039d
  4025b8:	03bf039d 	.word	0x03bf039d
  4025bc:	03bf03bf 	.word	0x03bf03bf
  4025c0:	03bf03bf 	.word	0x03bf03bf
  4025c4:	03bf03bf 	.word	0x03bf03bf
  4025c8:	03bf03bf 	.word	0x03bf03bf
  4025cc:	033703bf 	.word	0x033703bf
  4025d0:	03bf0357 	.word	0x03bf0357
  4025d4:	03bf0357 	.word	0x03bf0357
  4025d8:	03bf03bf 	.word	0x03bf03bf
  4025dc:	039803bf 	.word	0x039803bf
  4025e0:	03bf03bf 	.word	0x03bf03bf
  4025e4:	03bf03ad 	.word	0x03bf03ad
  4025e8:	03bf03bf 	.word	0x03bf03bf
  4025ec:	03bf03bf 	.word	0x03bf03bf
  4025f0:	03bf0259 	.word	0x03bf0259
  4025f4:	031e03bf 	.word	0x031e03bf
  4025f8:	03bf03bf 	.word	0x03bf03bf
  4025fc:	03bf03bf 	.word	0x03bf03bf
  402600:	03bf03bf 	.word	0x03bf03bf
  402604:	03bf03bf 	.word	0x03bf03bf
  402608:	03bf03bf 	.word	0x03bf03bf
  40260c:	02db02c6 	.word	0x02db02c6
  402610:	03570357 	.word	0x03570357
  402614:	028b0357 	.word	0x028b0357
  402618:	03bf02db 	.word	0x03bf02db
  40261c:	029003bf 	.word	0x029003bf
  402620:	029d03bf 	.word	0x029d03bf
  402624:	02b401cc 	.word	0x02b401cc
  402628:	03bf0208 	.word	0x03bf0208
  40262c:	03bf01e1 	.word	0x03bf01e1
  402630:	03bf007e 	.word	0x03bf007e
  402634:	020d03bf 	.word	0x020d03bf
  402638:	980d      	ldr	r0, [sp, #52]	; 0x34
  40263a:	930f      	str	r3, [sp, #60]	; 0x3c
  40263c:	4240      	negs	r0, r0
  40263e:	900d      	str	r0, [sp, #52]	; 0x34
  402640:	f04b 0b04 	orr.w	fp, fp, #4
  402644:	f89a 3000 	ldrb.w	r3, [sl]
  402648:	e794      	b.n	402574 <_svfprintf_r+0xb0>
  40264a:	aa25      	add	r2, sp, #148	; 0x94
  40264c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40264e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402650:	f003 f8a4 	bl	40579c <__ssprint_r>
  402654:	b940      	cbnz	r0, 402668 <_svfprintf_r+0x1a4>
  402656:	46c8      	mov	r8, r9
  402658:	e779      	b.n	40254e <_svfprintf_r+0x8a>
  40265a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40265c:	b123      	cbz	r3, 402668 <_svfprintf_r+0x1a4>
  40265e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402660:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402662:	aa25      	add	r2, sp, #148	; 0x94
  402664:	f003 f89a 	bl	40579c <__ssprint_r>
  402668:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40266a:	899b      	ldrh	r3, [r3, #12]
  40266c:	f013 0f40 	tst.w	r3, #64	; 0x40
  402670:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402672:	bf18      	it	ne
  402674:	f04f 33ff 	movne.w	r3, #4294967295
  402678:	9309      	str	r3, [sp, #36]	; 0x24
  40267a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40267c:	b043      	add	sp, #268	; 0x10c
  40267e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402682:	f01b 0f20 	tst.w	fp, #32
  402686:	9311      	str	r3, [sp, #68]	; 0x44
  402688:	f040 81dd 	bne.w	402a46 <_svfprintf_r+0x582>
  40268c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40268e:	f01b 0f10 	tst.w	fp, #16
  402692:	4613      	mov	r3, r2
  402694:	f040 856e 	bne.w	403174 <_svfprintf_r+0xcb0>
  402698:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40269c:	f000 856a 	beq.w	403174 <_svfprintf_r+0xcb0>
  4026a0:	8814      	ldrh	r4, [r2, #0]
  4026a2:	3204      	adds	r2, #4
  4026a4:	2500      	movs	r5, #0
  4026a6:	2301      	movs	r3, #1
  4026a8:	920f      	str	r2, [sp, #60]	; 0x3c
  4026aa:	2700      	movs	r7, #0
  4026ac:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4026b0:	990a      	ldr	r1, [sp, #40]	; 0x28
  4026b2:	1c4a      	adds	r2, r1, #1
  4026b4:	f000 8265 	beq.w	402b82 <_svfprintf_r+0x6be>
  4026b8:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  4026bc:	9207      	str	r2, [sp, #28]
  4026be:	ea54 0205 	orrs.w	r2, r4, r5
  4026c2:	f040 8264 	bne.w	402b8e <_svfprintf_r+0x6ca>
  4026c6:	2900      	cmp	r1, #0
  4026c8:	f040 843c 	bne.w	402f44 <_svfprintf_r+0xa80>
  4026cc:	2b00      	cmp	r3, #0
  4026ce:	f040 84d7 	bne.w	403080 <_svfprintf_r+0xbbc>
  4026d2:	f01b 0301 	ands.w	r3, fp, #1
  4026d6:	930e      	str	r3, [sp, #56]	; 0x38
  4026d8:	f000 8604 	beq.w	4032e4 <_svfprintf_r+0xe20>
  4026dc:	ae42      	add	r6, sp, #264	; 0x108
  4026de:	2330      	movs	r3, #48	; 0x30
  4026e0:	f806 3d41 	strb.w	r3, [r6, #-65]!
  4026e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4026e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4026e8:	4293      	cmp	r3, r2
  4026ea:	bfb8      	it	lt
  4026ec:	4613      	movlt	r3, r2
  4026ee:	9308      	str	r3, [sp, #32]
  4026f0:	2300      	movs	r3, #0
  4026f2:	9312      	str	r3, [sp, #72]	; 0x48
  4026f4:	b117      	cbz	r7, 4026fc <_svfprintf_r+0x238>
  4026f6:	9b08      	ldr	r3, [sp, #32]
  4026f8:	3301      	adds	r3, #1
  4026fa:	9308      	str	r3, [sp, #32]
  4026fc:	9b07      	ldr	r3, [sp, #28]
  4026fe:	f013 0302 	ands.w	r3, r3, #2
  402702:	9310      	str	r3, [sp, #64]	; 0x40
  402704:	d002      	beq.n	40270c <_svfprintf_r+0x248>
  402706:	9b08      	ldr	r3, [sp, #32]
  402708:	3302      	adds	r3, #2
  40270a:	9308      	str	r3, [sp, #32]
  40270c:	9b07      	ldr	r3, [sp, #28]
  40270e:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  402712:	f040 830e 	bne.w	402d32 <_svfprintf_r+0x86e>
  402716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402718:	9a08      	ldr	r2, [sp, #32]
  40271a:	eba3 0b02 	sub.w	fp, r3, r2
  40271e:	f1bb 0f00 	cmp.w	fp, #0
  402722:	f340 8306 	ble.w	402d32 <_svfprintf_r+0x86e>
  402726:	f1bb 0f10 	cmp.w	fp, #16
  40272a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40272c:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40272e:	dd29      	ble.n	402784 <_svfprintf_r+0x2c0>
  402730:	4643      	mov	r3, r8
  402732:	4621      	mov	r1, r4
  402734:	46a8      	mov	r8, r5
  402736:	2710      	movs	r7, #16
  402738:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40273a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40273c:	e006      	b.n	40274c <_svfprintf_r+0x288>
  40273e:	f1ab 0b10 	sub.w	fp, fp, #16
  402742:	f1bb 0f10 	cmp.w	fp, #16
  402746:	f103 0308 	add.w	r3, r3, #8
  40274a:	dd18      	ble.n	40277e <_svfprintf_r+0x2ba>
  40274c:	3201      	adds	r2, #1
  40274e:	48b7      	ldr	r0, [pc, #732]	; (402a2c <_svfprintf_r+0x568>)
  402750:	9226      	str	r2, [sp, #152]	; 0x98
  402752:	3110      	adds	r1, #16
  402754:	2a07      	cmp	r2, #7
  402756:	9127      	str	r1, [sp, #156]	; 0x9c
  402758:	e883 0081 	stmia.w	r3, {r0, r7}
  40275c:	ddef      	ble.n	40273e <_svfprintf_r+0x27a>
  40275e:	aa25      	add	r2, sp, #148	; 0x94
  402760:	4629      	mov	r1, r5
  402762:	4620      	mov	r0, r4
  402764:	f003 f81a 	bl	40579c <__ssprint_r>
  402768:	2800      	cmp	r0, #0
  40276a:	f47f af7d 	bne.w	402668 <_svfprintf_r+0x1a4>
  40276e:	f1ab 0b10 	sub.w	fp, fp, #16
  402772:	f1bb 0f10 	cmp.w	fp, #16
  402776:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402778:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40277a:	464b      	mov	r3, r9
  40277c:	dce6      	bgt.n	40274c <_svfprintf_r+0x288>
  40277e:	4645      	mov	r5, r8
  402780:	460c      	mov	r4, r1
  402782:	4698      	mov	r8, r3
  402784:	3201      	adds	r2, #1
  402786:	4ba9      	ldr	r3, [pc, #676]	; (402a2c <_svfprintf_r+0x568>)
  402788:	9226      	str	r2, [sp, #152]	; 0x98
  40278a:	445c      	add	r4, fp
  40278c:	2a07      	cmp	r2, #7
  40278e:	9427      	str	r4, [sp, #156]	; 0x9c
  402790:	e888 0808 	stmia.w	r8, {r3, fp}
  402794:	f300 8498 	bgt.w	4030c8 <_svfprintf_r+0xc04>
  402798:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40279c:	f108 0808 	add.w	r8, r8, #8
  4027a0:	b177      	cbz	r7, 4027c0 <_svfprintf_r+0x2fc>
  4027a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027a4:	3301      	adds	r3, #1
  4027a6:	3401      	adds	r4, #1
  4027a8:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  4027ac:	2201      	movs	r2, #1
  4027ae:	2b07      	cmp	r3, #7
  4027b0:	9427      	str	r4, [sp, #156]	; 0x9c
  4027b2:	9326      	str	r3, [sp, #152]	; 0x98
  4027b4:	e888 0006 	stmia.w	r8, {r1, r2}
  4027b8:	f300 83db 	bgt.w	402f72 <_svfprintf_r+0xaae>
  4027bc:	f108 0808 	add.w	r8, r8, #8
  4027c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4027c2:	b16b      	cbz	r3, 4027e0 <_svfprintf_r+0x31c>
  4027c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027c6:	3301      	adds	r3, #1
  4027c8:	3402      	adds	r4, #2
  4027ca:	a91e      	add	r1, sp, #120	; 0x78
  4027cc:	2202      	movs	r2, #2
  4027ce:	2b07      	cmp	r3, #7
  4027d0:	9427      	str	r4, [sp, #156]	; 0x9c
  4027d2:	9326      	str	r3, [sp, #152]	; 0x98
  4027d4:	e888 0006 	stmia.w	r8, {r1, r2}
  4027d8:	f300 83d6 	bgt.w	402f88 <_svfprintf_r+0xac4>
  4027dc:	f108 0808 	add.w	r8, r8, #8
  4027e0:	2d80      	cmp	r5, #128	; 0x80
  4027e2:	f000 8315 	beq.w	402e10 <_svfprintf_r+0x94c>
  4027e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4027e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4027ea:	1a9f      	subs	r7, r3, r2
  4027ec:	2f00      	cmp	r7, #0
  4027ee:	dd36      	ble.n	40285e <_svfprintf_r+0x39a>
  4027f0:	2f10      	cmp	r7, #16
  4027f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4027f4:	4d8e      	ldr	r5, [pc, #568]	; (402a30 <_svfprintf_r+0x56c>)
  4027f6:	dd27      	ble.n	402848 <_svfprintf_r+0x384>
  4027f8:	4642      	mov	r2, r8
  4027fa:	4621      	mov	r1, r4
  4027fc:	46b0      	mov	r8, r6
  4027fe:	f04f 0b10 	mov.w	fp, #16
  402802:	462e      	mov	r6, r5
  402804:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402806:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402808:	e004      	b.n	402814 <_svfprintf_r+0x350>
  40280a:	3f10      	subs	r7, #16
  40280c:	2f10      	cmp	r7, #16
  40280e:	f102 0208 	add.w	r2, r2, #8
  402812:	dd15      	ble.n	402840 <_svfprintf_r+0x37c>
  402814:	3301      	adds	r3, #1
  402816:	3110      	adds	r1, #16
  402818:	2b07      	cmp	r3, #7
  40281a:	9127      	str	r1, [sp, #156]	; 0x9c
  40281c:	9326      	str	r3, [sp, #152]	; 0x98
  40281e:	e882 0840 	stmia.w	r2, {r6, fp}
  402822:	ddf2      	ble.n	40280a <_svfprintf_r+0x346>
  402824:	aa25      	add	r2, sp, #148	; 0x94
  402826:	4629      	mov	r1, r5
  402828:	4620      	mov	r0, r4
  40282a:	f002 ffb7 	bl	40579c <__ssprint_r>
  40282e:	2800      	cmp	r0, #0
  402830:	f47f af1a 	bne.w	402668 <_svfprintf_r+0x1a4>
  402834:	3f10      	subs	r7, #16
  402836:	2f10      	cmp	r7, #16
  402838:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40283a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40283c:	464a      	mov	r2, r9
  40283e:	dce9      	bgt.n	402814 <_svfprintf_r+0x350>
  402840:	4635      	mov	r5, r6
  402842:	460c      	mov	r4, r1
  402844:	4646      	mov	r6, r8
  402846:	4690      	mov	r8, r2
  402848:	3301      	adds	r3, #1
  40284a:	443c      	add	r4, r7
  40284c:	2b07      	cmp	r3, #7
  40284e:	9427      	str	r4, [sp, #156]	; 0x9c
  402850:	9326      	str	r3, [sp, #152]	; 0x98
  402852:	e888 00a0 	stmia.w	r8, {r5, r7}
  402856:	f300 8381 	bgt.w	402f5c <_svfprintf_r+0xa98>
  40285a:	f108 0808 	add.w	r8, r8, #8
  40285e:	9b07      	ldr	r3, [sp, #28]
  402860:	05df      	lsls	r7, r3, #23
  402862:	f100 8268 	bmi.w	402d36 <_svfprintf_r+0x872>
  402866:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402868:	990e      	ldr	r1, [sp, #56]	; 0x38
  40286a:	f8c8 6000 	str.w	r6, [r8]
  40286e:	3301      	adds	r3, #1
  402870:	440c      	add	r4, r1
  402872:	2b07      	cmp	r3, #7
  402874:	9427      	str	r4, [sp, #156]	; 0x9c
  402876:	f8c8 1004 	str.w	r1, [r8, #4]
  40287a:	9326      	str	r3, [sp, #152]	; 0x98
  40287c:	f300 834d 	bgt.w	402f1a <_svfprintf_r+0xa56>
  402880:	f108 0808 	add.w	r8, r8, #8
  402884:	9b07      	ldr	r3, [sp, #28]
  402886:	075b      	lsls	r3, r3, #29
  402888:	d53a      	bpl.n	402900 <_svfprintf_r+0x43c>
  40288a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40288c:	9a08      	ldr	r2, [sp, #32]
  40288e:	1a9d      	subs	r5, r3, r2
  402890:	2d00      	cmp	r5, #0
  402892:	dd35      	ble.n	402900 <_svfprintf_r+0x43c>
  402894:	2d10      	cmp	r5, #16
  402896:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402898:	dd20      	ble.n	4028dc <_svfprintf_r+0x418>
  40289a:	2610      	movs	r6, #16
  40289c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40289e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  4028a2:	e004      	b.n	4028ae <_svfprintf_r+0x3ea>
  4028a4:	3d10      	subs	r5, #16
  4028a6:	2d10      	cmp	r5, #16
  4028a8:	f108 0808 	add.w	r8, r8, #8
  4028ac:	dd16      	ble.n	4028dc <_svfprintf_r+0x418>
  4028ae:	3301      	adds	r3, #1
  4028b0:	4a5e      	ldr	r2, [pc, #376]	; (402a2c <_svfprintf_r+0x568>)
  4028b2:	9326      	str	r3, [sp, #152]	; 0x98
  4028b4:	3410      	adds	r4, #16
  4028b6:	2b07      	cmp	r3, #7
  4028b8:	9427      	str	r4, [sp, #156]	; 0x9c
  4028ba:	e888 0044 	stmia.w	r8, {r2, r6}
  4028be:	ddf1      	ble.n	4028a4 <_svfprintf_r+0x3e0>
  4028c0:	aa25      	add	r2, sp, #148	; 0x94
  4028c2:	4659      	mov	r1, fp
  4028c4:	4638      	mov	r0, r7
  4028c6:	f002 ff69 	bl	40579c <__ssprint_r>
  4028ca:	2800      	cmp	r0, #0
  4028cc:	f47f aecc 	bne.w	402668 <_svfprintf_r+0x1a4>
  4028d0:	3d10      	subs	r5, #16
  4028d2:	2d10      	cmp	r5, #16
  4028d4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4028d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028d8:	46c8      	mov	r8, r9
  4028da:	dce8      	bgt.n	4028ae <_svfprintf_r+0x3ea>
  4028dc:	3301      	adds	r3, #1
  4028de:	4a53      	ldr	r2, [pc, #332]	; (402a2c <_svfprintf_r+0x568>)
  4028e0:	9326      	str	r3, [sp, #152]	; 0x98
  4028e2:	442c      	add	r4, r5
  4028e4:	2b07      	cmp	r3, #7
  4028e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4028e8:	e888 0024 	stmia.w	r8, {r2, r5}
  4028ec:	dd08      	ble.n	402900 <_svfprintf_r+0x43c>
  4028ee:	aa25      	add	r2, sp, #148	; 0x94
  4028f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4028f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4028f4:	f002 ff52 	bl	40579c <__ssprint_r>
  4028f8:	2800      	cmp	r0, #0
  4028fa:	f47f aeb5 	bne.w	402668 <_svfprintf_r+0x1a4>
  4028fe:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402900:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402902:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  402904:	9908      	ldr	r1, [sp, #32]
  402906:	428a      	cmp	r2, r1
  402908:	bfac      	ite	ge
  40290a:	189b      	addge	r3, r3, r2
  40290c:	185b      	addlt	r3, r3, r1
  40290e:	9309      	str	r3, [sp, #36]	; 0x24
  402910:	2c00      	cmp	r4, #0
  402912:	f040 830d 	bne.w	402f30 <_svfprintf_r+0xa6c>
  402916:	2300      	movs	r3, #0
  402918:	9326      	str	r3, [sp, #152]	; 0x98
  40291a:	46c8      	mov	r8, r9
  40291c:	e5f9      	b.n	402512 <_svfprintf_r+0x4e>
  40291e:	9311      	str	r3, [sp, #68]	; 0x44
  402920:	f01b 0320 	ands.w	r3, fp, #32
  402924:	f040 81e3 	bne.w	402cee <_svfprintf_r+0x82a>
  402928:	f01b 0210 	ands.w	r2, fp, #16
  40292c:	f040 842e 	bne.w	40318c <_svfprintf_r+0xcc8>
  402930:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  402934:	f000 842a 	beq.w	40318c <_svfprintf_r+0xcc8>
  402938:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40293a:	4613      	mov	r3, r2
  40293c:	460a      	mov	r2, r1
  40293e:	3204      	adds	r2, #4
  402940:	880c      	ldrh	r4, [r1, #0]
  402942:	920f      	str	r2, [sp, #60]	; 0x3c
  402944:	2500      	movs	r5, #0
  402946:	e6b0      	b.n	4026aa <_svfprintf_r+0x1e6>
  402948:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40294a:	9311      	str	r3, [sp, #68]	; 0x44
  40294c:	6816      	ldr	r6, [r2, #0]
  40294e:	2400      	movs	r4, #0
  402950:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  402954:	1d15      	adds	r5, r2, #4
  402956:	2e00      	cmp	r6, #0
  402958:	f000 86a7 	beq.w	4036aa <_svfprintf_r+0x11e6>
  40295c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40295e:	1c53      	adds	r3, r2, #1
  402960:	f000 8609 	beq.w	403576 <_svfprintf_r+0x10b2>
  402964:	4621      	mov	r1, r4
  402966:	4630      	mov	r0, r6
  402968:	f002 fa8a 	bl	404e80 <memchr>
  40296c:	2800      	cmp	r0, #0
  40296e:	f000 86e1 	beq.w	403734 <_svfprintf_r+0x1270>
  402972:	1b83      	subs	r3, r0, r6
  402974:	930e      	str	r3, [sp, #56]	; 0x38
  402976:	940a      	str	r4, [sp, #40]	; 0x28
  402978:	950f      	str	r5, [sp, #60]	; 0x3c
  40297a:	f8cd b01c 	str.w	fp, [sp, #28]
  40297e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  402982:	9308      	str	r3, [sp, #32]
  402984:	9412      	str	r4, [sp, #72]	; 0x48
  402986:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40298a:	e6b3      	b.n	4026f4 <_svfprintf_r+0x230>
  40298c:	f89a 3000 	ldrb.w	r3, [sl]
  402990:	2201      	movs	r2, #1
  402992:	212b      	movs	r1, #43	; 0x2b
  402994:	e5ee      	b.n	402574 <_svfprintf_r+0xb0>
  402996:	f04b 0b20 	orr.w	fp, fp, #32
  40299a:	f89a 3000 	ldrb.w	r3, [sl]
  40299e:	e5e9      	b.n	402574 <_svfprintf_r+0xb0>
  4029a0:	9311      	str	r3, [sp, #68]	; 0x44
  4029a2:	2a00      	cmp	r2, #0
  4029a4:	f040 8795 	bne.w	4038d2 <_svfprintf_r+0x140e>
  4029a8:	4b22      	ldr	r3, [pc, #136]	; (402a34 <_svfprintf_r+0x570>)
  4029aa:	9318      	str	r3, [sp, #96]	; 0x60
  4029ac:	f01b 0f20 	tst.w	fp, #32
  4029b0:	f040 8111 	bne.w	402bd6 <_svfprintf_r+0x712>
  4029b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4029b6:	f01b 0f10 	tst.w	fp, #16
  4029ba:	4613      	mov	r3, r2
  4029bc:	f040 83e1 	bne.w	403182 <_svfprintf_r+0xcbe>
  4029c0:	f01b 0f40 	tst.w	fp, #64	; 0x40
  4029c4:	f000 83dd 	beq.w	403182 <_svfprintf_r+0xcbe>
  4029c8:	3304      	adds	r3, #4
  4029ca:	8814      	ldrh	r4, [r2, #0]
  4029cc:	930f      	str	r3, [sp, #60]	; 0x3c
  4029ce:	2500      	movs	r5, #0
  4029d0:	f01b 0f01 	tst.w	fp, #1
  4029d4:	f000 810c 	beq.w	402bf0 <_svfprintf_r+0x72c>
  4029d8:	ea54 0305 	orrs.w	r3, r4, r5
  4029dc:	f000 8108 	beq.w	402bf0 <_svfprintf_r+0x72c>
  4029e0:	2330      	movs	r3, #48	; 0x30
  4029e2:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  4029e6:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  4029ea:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  4029ee:	f04b 0b02 	orr.w	fp, fp, #2
  4029f2:	2302      	movs	r3, #2
  4029f4:	e659      	b.n	4026aa <_svfprintf_r+0x1e6>
  4029f6:	f89a 3000 	ldrb.w	r3, [sl]
  4029fa:	2900      	cmp	r1, #0
  4029fc:	f47f adba 	bne.w	402574 <_svfprintf_r+0xb0>
  402a00:	2201      	movs	r2, #1
  402a02:	2120      	movs	r1, #32
  402a04:	e5b6      	b.n	402574 <_svfprintf_r+0xb0>
  402a06:	f04b 0b01 	orr.w	fp, fp, #1
  402a0a:	f89a 3000 	ldrb.w	r3, [sl]
  402a0e:	e5b1      	b.n	402574 <_svfprintf_r+0xb0>
  402a10:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  402a12:	6823      	ldr	r3, [r4, #0]
  402a14:	930d      	str	r3, [sp, #52]	; 0x34
  402a16:	4618      	mov	r0, r3
  402a18:	2800      	cmp	r0, #0
  402a1a:	4623      	mov	r3, r4
  402a1c:	f103 0304 	add.w	r3, r3, #4
  402a20:	f6ff ae0a 	blt.w	402638 <_svfprintf_r+0x174>
  402a24:	930f      	str	r3, [sp, #60]	; 0x3c
  402a26:	f89a 3000 	ldrb.w	r3, [sl]
  402a2a:	e5a3      	b.n	402574 <_svfprintf_r+0xb0>
  402a2c:	00407460 	.word	0x00407460
  402a30:	00407470 	.word	0x00407470
  402a34:	00407440 	.word	0x00407440
  402a38:	f04b 0b10 	orr.w	fp, fp, #16
  402a3c:	f01b 0f20 	tst.w	fp, #32
  402a40:	9311      	str	r3, [sp, #68]	; 0x44
  402a42:	f43f ae23 	beq.w	40268c <_svfprintf_r+0x1c8>
  402a46:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402a48:	3507      	adds	r5, #7
  402a4a:	f025 0307 	bic.w	r3, r5, #7
  402a4e:	f103 0208 	add.w	r2, r3, #8
  402a52:	e9d3 4500 	ldrd	r4, r5, [r3]
  402a56:	920f      	str	r2, [sp, #60]	; 0x3c
  402a58:	2301      	movs	r3, #1
  402a5a:	e626      	b.n	4026aa <_svfprintf_r+0x1e6>
  402a5c:	f89a 3000 	ldrb.w	r3, [sl]
  402a60:	2b2a      	cmp	r3, #42	; 0x2a
  402a62:	f10a 0401 	add.w	r4, sl, #1
  402a66:	f000 8727 	beq.w	4038b8 <_svfprintf_r+0x13f4>
  402a6a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402a6e:	2809      	cmp	r0, #9
  402a70:	46a2      	mov	sl, r4
  402a72:	f200 86ad 	bhi.w	4037d0 <_svfprintf_r+0x130c>
  402a76:	2300      	movs	r3, #0
  402a78:	461c      	mov	r4, r3
  402a7a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402a7e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402a82:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402a86:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402a8a:	2809      	cmp	r0, #9
  402a8c:	d9f5      	bls.n	402a7a <_svfprintf_r+0x5b6>
  402a8e:	940a      	str	r4, [sp, #40]	; 0x28
  402a90:	e572      	b.n	402578 <_svfprintf_r+0xb4>
  402a92:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  402a96:	f89a 3000 	ldrb.w	r3, [sl]
  402a9a:	e56b      	b.n	402574 <_svfprintf_r+0xb0>
  402a9c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  402aa0:	f89a 3000 	ldrb.w	r3, [sl]
  402aa4:	e566      	b.n	402574 <_svfprintf_r+0xb0>
  402aa6:	f89a 3000 	ldrb.w	r3, [sl]
  402aaa:	2b6c      	cmp	r3, #108	; 0x6c
  402aac:	bf03      	ittte	eq
  402aae:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  402ab2:	f04b 0b20 	orreq.w	fp, fp, #32
  402ab6:	f10a 0a01 	addeq.w	sl, sl, #1
  402aba:	f04b 0b10 	orrne.w	fp, fp, #16
  402abe:	e559      	b.n	402574 <_svfprintf_r+0xb0>
  402ac0:	2a00      	cmp	r2, #0
  402ac2:	f040 8711 	bne.w	4038e8 <_svfprintf_r+0x1424>
  402ac6:	f01b 0f20 	tst.w	fp, #32
  402aca:	f040 84f9 	bne.w	4034c0 <_svfprintf_r+0xffc>
  402ace:	f01b 0f10 	tst.w	fp, #16
  402ad2:	f040 84ac 	bne.w	40342e <_svfprintf_r+0xf6a>
  402ad6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402ada:	f000 84a8 	beq.w	40342e <_svfprintf_r+0xf6a>
  402ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ae0:	6813      	ldr	r3, [r2, #0]
  402ae2:	3204      	adds	r2, #4
  402ae4:	920f      	str	r2, [sp, #60]	; 0x3c
  402ae6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  402aea:	801a      	strh	r2, [r3, #0]
  402aec:	e511      	b.n	402512 <_svfprintf_r+0x4e>
  402aee:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402af0:	4bb3      	ldr	r3, [pc, #716]	; (402dc0 <_svfprintf_r+0x8fc>)
  402af2:	680c      	ldr	r4, [r1, #0]
  402af4:	9318      	str	r3, [sp, #96]	; 0x60
  402af6:	2230      	movs	r2, #48	; 0x30
  402af8:	2378      	movs	r3, #120	; 0x78
  402afa:	3104      	adds	r1, #4
  402afc:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  402b00:	9311      	str	r3, [sp, #68]	; 0x44
  402b02:	f04b 0b02 	orr.w	fp, fp, #2
  402b06:	910f      	str	r1, [sp, #60]	; 0x3c
  402b08:	2500      	movs	r5, #0
  402b0a:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  402b0e:	2302      	movs	r3, #2
  402b10:	e5cb      	b.n	4026aa <_svfprintf_r+0x1e6>
  402b12:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402b14:	9311      	str	r3, [sp, #68]	; 0x44
  402b16:	680a      	ldr	r2, [r1, #0]
  402b18:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402b1c:	2300      	movs	r3, #0
  402b1e:	460a      	mov	r2, r1
  402b20:	461f      	mov	r7, r3
  402b22:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402b26:	3204      	adds	r2, #4
  402b28:	2301      	movs	r3, #1
  402b2a:	9308      	str	r3, [sp, #32]
  402b2c:	f8cd b01c 	str.w	fp, [sp, #28]
  402b30:	970a      	str	r7, [sp, #40]	; 0x28
  402b32:	9712      	str	r7, [sp, #72]	; 0x48
  402b34:	920f      	str	r2, [sp, #60]	; 0x3c
  402b36:	930e      	str	r3, [sp, #56]	; 0x38
  402b38:	ae28      	add	r6, sp, #160	; 0xa0
  402b3a:	e5df      	b.n	4026fc <_svfprintf_r+0x238>
  402b3c:	9311      	str	r3, [sp, #68]	; 0x44
  402b3e:	2a00      	cmp	r2, #0
  402b40:	f040 86ea 	bne.w	403918 <_svfprintf_r+0x1454>
  402b44:	f01b 0f20 	tst.w	fp, #32
  402b48:	d15d      	bne.n	402c06 <_svfprintf_r+0x742>
  402b4a:	f01b 0f10 	tst.w	fp, #16
  402b4e:	f040 8308 	bne.w	403162 <_svfprintf_r+0xc9e>
  402b52:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402b56:	f000 8304 	beq.w	403162 <_svfprintf_r+0xc9e>
  402b5a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402b5c:	f9b1 4000 	ldrsh.w	r4, [r1]
  402b60:	3104      	adds	r1, #4
  402b62:	17e5      	asrs	r5, r4, #31
  402b64:	4622      	mov	r2, r4
  402b66:	462b      	mov	r3, r5
  402b68:	910f      	str	r1, [sp, #60]	; 0x3c
  402b6a:	2a00      	cmp	r2, #0
  402b6c:	f173 0300 	sbcs.w	r3, r3, #0
  402b70:	db58      	blt.n	402c24 <_svfprintf_r+0x760>
  402b72:	990a      	ldr	r1, [sp, #40]	; 0x28
  402b74:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402b78:	1c4a      	adds	r2, r1, #1
  402b7a:	f04f 0301 	mov.w	r3, #1
  402b7e:	f47f ad9b 	bne.w	4026b8 <_svfprintf_r+0x1f4>
  402b82:	ea54 0205 	orrs.w	r2, r4, r5
  402b86:	f000 81df 	beq.w	402f48 <_svfprintf_r+0xa84>
  402b8a:	f8cd b01c 	str.w	fp, [sp, #28]
  402b8e:	2b01      	cmp	r3, #1
  402b90:	f000 827b 	beq.w	40308a <_svfprintf_r+0xbc6>
  402b94:	2b02      	cmp	r3, #2
  402b96:	f040 8206 	bne.w	402fa6 <_svfprintf_r+0xae2>
  402b9a:	9818      	ldr	r0, [sp, #96]	; 0x60
  402b9c:	464e      	mov	r6, r9
  402b9e:	0923      	lsrs	r3, r4, #4
  402ba0:	f004 010f 	and.w	r1, r4, #15
  402ba4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402ba8:	092a      	lsrs	r2, r5, #4
  402baa:	461c      	mov	r4, r3
  402bac:	4615      	mov	r5, r2
  402bae:	5c43      	ldrb	r3, [r0, r1]
  402bb0:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402bb4:	ea54 0305 	orrs.w	r3, r4, r5
  402bb8:	d1f1      	bne.n	402b9e <_svfprintf_r+0x6da>
  402bba:	eba9 0306 	sub.w	r3, r9, r6
  402bbe:	930e      	str	r3, [sp, #56]	; 0x38
  402bc0:	e590      	b.n	4026e4 <_svfprintf_r+0x220>
  402bc2:	9311      	str	r3, [sp, #68]	; 0x44
  402bc4:	2a00      	cmp	r2, #0
  402bc6:	f040 86a3 	bne.w	403910 <_svfprintf_r+0x144c>
  402bca:	4b7e      	ldr	r3, [pc, #504]	; (402dc4 <_svfprintf_r+0x900>)
  402bcc:	9318      	str	r3, [sp, #96]	; 0x60
  402bce:	f01b 0f20 	tst.w	fp, #32
  402bd2:	f43f aeef 	beq.w	4029b4 <_svfprintf_r+0x4f0>
  402bd6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402bd8:	3507      	adds	r5, #7
  402bda:	f025 0307 	bic.w	r3, r5, #7
  402bde:	f103 0208 	add.w	r2, r3, #8
  402be2:	f01b 0f01 	tst.w	fp, #1
  402be6:	920f      	str	r2, [sp, #60]	; 0x3c
  402be8:	e9d3 4500 	ldrd	r4, r5, [r3]
  402bec:	f47f aef4 	bne.w	4029d8 <_svfprintf_r+0x514>
  402bf0:	2302      	movs	r3, #2
  402bf2:	e55a      	b.n	4026aa <_svfprintf_r+0x1e6>
  402bf4:	9311      	str	r3, [sp, #68]	; 0x44
  402bf6:	2a00      	cmp	r2, #0
  402bf8:	f040 8686 	bne.w	403908 <_svfprintf_r+0x1444>
  402bfc:	f04b 0b10 	orr.w	fp, fp, #16
  402c00:	f01b 0f20 	tst.w	fp, #32
  402c04:	d0a1      	beq.n	402b4a <_svfprintf_r+0x686>
  402c06:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402c08:	3507      	adds	r5, #7
  402c0a:	f025 0507 	bic.w	r5, r5, #7
  402c0e:	e9d5 2300 	ldrd	r2, r3, [r5]
  402c12:	2a00      	cmp	r2, #0
  402c14:	f105 0108 	add.w	r1, r5, #8
  402c18:	461d      	mov	r5, r3
  402c1a:	f173 0300 	sbcs.w	r3, r3, #0
  402c1e:	910f      	str	r1, [sp, #60]	; 0x3c
  402c20:	4614      	mov	r4, r2
  402c22:	daa6      	bge.n	402b72 <_svfprintf_r+0x6ae>
  402c24:	272d      	movs	r7, #45	; 0x2d
  402c26:	4264      	negs	r4, r4
  402c28:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  402c2c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402c30:	2301      	movs	r3, #1
  402c32:	e53d      	b.n	4026b0 <_svfprintf_r+0x1ec>
  402c34:	9311      	str	r3, [sp, #68]	; 0x44
  402c36:	2a00      	cmp	r2, #0
  402c38:	f040 8662 	bne.w	403900 <_svfprintf_r+0x143c>
  402c3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402c3e:	3507      	adds	r5, #7
  402c40:	f025 0307 	bic.w	r3, r5, #7
  402c44:	f103 0208 	add.w	r2, r3, #8
  402c48:	920f      	str	r2, [sp, #60]	; 0x3c
  402c4a:	681a      	ldr	r2, [r3, #0]
  402c4c:	9215      	str	r2, [sp, #84]	; 0x54
  402c4e:	685b      	ldr	r3, [r3, #4]
  402c50:	9314      	str	r3, [sp, #80]	; 0x50
  402c52:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402c54:	9d15      	ldr	r5, [sp, #84]	; 0x54
  402c56:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  402c5a:	4628      	mov	r0, r5
  402c5c:	4621      	mov	r1, r4
  402c5e:	f04f 32ff 	mov.w	r2, #4294967295
  402c62:	4b59      	ldr	r3, [pc, #356]	; (402dc8 <_svfprintf_r+0x904>)
  402c64:	f003 fe60 	bl	406928 <__aeabi_dcmpun>
  402c68:	2800      	cmp	r0, #0
  402c6a:	f040 834a 	bne.w	403302 <_svfprintf_r+0xe3e>
  402c6e:	4628      	mov	r0, r5
  402c70:	4621      	mov	r1, r4
  402c72:	f04f 32ff 	mov.w	r2, #4294967295
  402c76:	4b54      	ldr	r3, [pc, #336]	; (402dc8 <_svfprintf_r+0x904>)
  402c78:	f003 fe38 	bl	4068ec <__aeabi_dcmple>
  402c7c:	2800      	cmp	r0, #0
  402c7e:	f040 8340 	bne.w	403302 <_svfprintf_r+0xe3e>
  402c82:	a815      	add	r0, sp, #84	; 0x54
  402c84:	c80d      	ldmia	r0, {r0, r2, r3}
  402c86:	9914      	ldr	r1, [sp, #80]	; 0x50
  402c88:	f003 fe26 	bl	4068d8 <__aeabi_dcmplt>
  402c8c:	2800      	cmp	r0, #0
  402c8e:	f040 8530 	bne.w	4036f2 <_svfprintf_r+0x122e>
  402c92:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402c96:	4e4d      	ldr	r6, [pc, #308]	; (402dcc <_svfprintf_r+0x908>)
  402c98:	4b4d      	ldr	r3, [pc, #308]	; (402dd0 <_svfprintf_r+0x90c>)
  402c9a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  402c9e:	9007      	str	r0, [sp, #28]
  402ca0:	9811      	ldr	r0, [sp, #68]	; 0x44
  402ca2:	2203      	movs	r2, #3
  402ca4:	2100      	movs	r1, #0
  402ca6:	9208      	str	r2, [sp, #32]
  402ca8:	910a      	str	r1, [sp, #40]	; 0x28
  402caa:	2847      	cmp	r0, #71	; 0x47
  402cac:	bfd8      	it	le
  402cae:	461e      	movle	r6, r3
  402cb0:	920e      	str	r2, [sp, #56]	; 0x38
  402cb2:	9112      	str	r1, [sp, #72]	; 0x48
  402cb4:	e51e      	b.n	4026f4 <_svfprintf_r+0x230>
  402cb6:	f04b 0b08 	orr.w	fp, fp, #8
  402cba:	f89a 3000 	ldrb.w	r3, [sl]
  402cbe:	e459      	b.n	402574 <_svfprintf_r+0xb0>
  402cc0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402cc4:	2300      	movs	r3, #0
  402cc6:	461c      	mov	r4, r3
  402cc8:	f81a 3b01 	ldrb.w	r3, [sl], #1
  402ccc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402cd0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402cd4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402cd8:	2809      	cmp	r0, #9
  402cda:	d9f5      	bls.n	402cc8 <_svfprintf_r+0x804>
  402cdc:	940d      	str	r4, [sp, #52]	; 0x34
  402cde:	e44b      	b.n	402578 <_svfprintf_r+0xb4>
  402ce0:	f04b 0b10 	orr.w	fp, fp, #16
  402ce4:	9311      	str	r3, [sp, #68]	; 0x44
  402ce6:	f01b 0320 	ands.w	r3, fp, #32
  402cea:	f43f ae1d 	beq.w	402928 <_svfprintf_r+0x464>
  402cee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402cf0:	3507      	adds	r5, #7
  402cf2:	f025 0307 	bic.w	r3, r5, #7
  402cf6:	f103 0208 	add.w	r2, r3, #8
  402cfa:	e9d3 4500 	ldrd	r4, r5, [r3]
  402cfe:	920f      	str	r2, [sp, #60]	; 0x3c
  402d00:	2300      	movs	r3, #0
  402d02:	e4d2      	b.n	4026aa <_svfprintf_r+0x1e6>
  402d04:	9311      	str	r3, [sp, #68]	; 0x44
  402d06:	2a00      	cmp	r2, #0
  402d08:	f040 85e7 	bne.w	4038da <_svfprintf_r+0x1416>
  402d0c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d0e:	2a00      	cmp	r2, #0
  402d10:	f43f aca3 	beq.w	40265a <_svfprintf_r+0x196>
  402d14:	2300      	movs	r3, #0
  402d16:	2101      	movs	r1, #1
  402d18:	461f      	mov	r7, r3
  402d1a:	9108      	str	r1, [sp, #32]
  402d1c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  402d20:	f8cd b01c 	str.w	fp, [sp, #28]
  402d24:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402d28:	930a      	str	r3, [sp, #40]	; 0x28
  402d2a:	9312      	str	r3, [sp, #72]	; 0x48
  402d2c:	910e      	str	r1, [sp, #56]	; 0x38
  402d2e:	ae28      	add	r6, sp, #160	; 0xa0
  402d30:	e4e4      	b.n	4026fc <_svfprintf_r+0x238>
  402d32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d34:	e534      	b.n	4027a0 <_svfprintf_r+0x2dc>
  402d36:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402d38:	2b65      	cmp	r3, #101	; 0x65
  402d3a:	f340 80a7 	ble.w	402e8c <_svfprintf_r+0x9c8>
  402d3e:	a815      	add	r0, sp, #84	; 0x54
  402d40:	c80d      	ldmia	r0, {r0, r2, r3}
  402d42:	9914      	ldr	r1, [sp, #80]	; 0x50
  402d44:	f003 fdbe 	bl	4068c4 <__aeabi_dcmpeq>
  402d48:	2800      	cmp	r0, #0
  402d4a:	f000 8150 	beq.w	402fee <_svfprintf_r+0xb2a>
  402d4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d50:	4a20      	ldr	r2, [pc, #128]	; (402dd4 <_svfprintf_r+0x910>)
  402d52:	f8c8 2000 	str.w	r2, [r8]
  402d56:	3301      	adds	r3, #1
  402d58:	3401      	adds	r4, #1
  402d5a:	2201      	movs	r2, #1
  402d5c:	2b07      	cmp	r3, #7
  402d5e:	9427      	str	r4, [sp, #156]	; 0x9c
  402d60:	9326      	str	r3, [sp, #152]	; 0x98
  402d62:	f8c8 2004 	str.w	r2, [r8, #4]
  402d66:	f300 836a 	bgt.w	40343e <_svfprintf_r+0xf7a>
  402d6a:	f108 0808 	add.w	r8, r8, #8
  402d6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402d70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402d72:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d74:	4293      	cmp	r3, r2
  402d76:	db03      	blt.n	402d80 <_svfprintf_r+0x8bc>
  402d78:	9b07      	ldr	r3, [sp, #28]
  402d7a:	07dd      	lsls	r5, r3, #31
  402d7c:	f57f ad82 	bpl.w	402884 <_svfprintf_r+0x3c0>
  402d80:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d82:	9919      	ldr	r1, [sp, #100]	; 0x64
  402d84:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402d86:	f8c8 2000 	str.w	r2, [r8]
  402d8a:	3301      	adds	r3, #1
  402d8c:	440c      	add	r4, r1
  402d8e:	2b07      	cmp	r3, #7
  402d90:	f8c8 1004 	str.w	r1, [r8, #4]
  402d94:	9427      	str	r4, [sp, #156]	; 0x9c
  402d96:	9326      	str	r3, [sp, #152]	; 0x98
  402d98:	f300 839e 	bgt.w	4034d8 <_svfprintf_r+0x1014>
  402d9c:	f108 0808 	add.w	r8, r8, #8
  402da0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402da2:	1e5e      	subs	r6, r3, #1
  402da4:	2e00      	cmp	r6, #0
  402da6:	f77f ad6d 	ble.w	402884 <_svfprintf_r+0x3c0>
  402daa:	2e10      	cmp	r6, #16
  402dac:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402dae:	4d0a      	ldr	r5, [pc, #40]	; (402dd8 <_svfprintf_r+0x914>)
  402db0:	f340 81f5 	ble.w	40319e <_svfprintf_r+0xcda>
  402db4:	4622      	mov	r2, r4
  402db6:	2710      	movs	r7, #16
  402db8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402dbc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402dbe:	e013      	b.n	402de8 <_svfprintf_r+0x924>
  402dc0:	00407440 	.word	0x00407440
  402dc4:	0040742c 	.word	0x0040742c
  402dc8:	7fefffff 	.word	0x7fefffff
  402dcc:	00407420 	.word	0x00407420
  402dd0:	0040741c 	.word	0x0040741c
  402dd4:	0040745c 	.word	0x0040745c
  402dd8:	00407470 	.word	0x00407470
  402ddc:	f108 0808 	add.w	r8, r8, #8
  402de0:	3e10      	subs	r6, #16
  402de2:	2e10      	cmp	r6, #16
  402de4:	f340 81da 	ble.w	40319c <_svfprintf_r+0xcd8>
  402de8:	3301      	adds	r3, #1
  402dea:	3210      	adds	r2, #16
  402dec:	2b07      	cmp	r3, #7
  402dee:	9227      	str	r2, [sp, #156]	; 0x9c
  402df0:	9326      	str	r3, [sp, #152]	; 0x98
  402df2:	e888 00a0 	stmia.w	r8, {r5, r7}
  402df6:	ddf1      	ble.n	402ddc <_svfprintf_r+0x918>
  402df8:	aa25      	add	r2, sp, #148	; 0x94
  402dfa:	4621      	mov	r1, r4
  402dfc:	4658      	mov	r0, fp
  402dfe:	f002 fccd 	bl	40579c <__ssprint_r>
  402e02:	2800      	cmp	r0, #0
  402e04:	f47f ac30 	bne.w	402668 <_svfprintf_r+0x1a4>
  402e08:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402e0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e0c:	46c8      	mov	r8, r9
  402e0e:	e7e7      	b.n	402de0 <_svfprintf_r+0x91c>
  402e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  402e12:	9a08      	ldr	r2, [sp, #32]
  402e14:	1a9f      	subs	r7, r3, r2
  402e16:	2f00      	cmp	r7, #0
  402e18:	f77f ace5 	ble.w	4027e6 <_svfprintf_r+0x322>
  402e1c:	2f10      	cmp	r7, #16
  402e1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e20:	4db6      	ldr	r5, [pc, #728]	; (4030fc <_svfprintf_r+0xc38>)
  402e22:	dd27      	ble.n	402e74 <_svfprintf_r+0x9b0>
  402e24:	4642      	mov	r2, r8
  402e26:	4621      	mov	r1, r4
  402e28:	46b0      	mov	r8, r6
  402e2a:	f04f 0b10 	mov.w	fp, #16
  402e2e:	462e      	mov	r6, r5
  402e30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402e32:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402e34:	e004      	b.n	402e40 <_svfprintf_r+0x97c>
  402e36:	3f10      	subs	r7, #16
  402e38:	2f10      	cmp	r7, #16
  402e3a:	f102 0208 	add.w	r2, r2, #8
  402e3e:	dd15      	ble.n	402e6c <_svfprintf_r+0x9a8>
  402e40:	3301      	adds	r3, #1
  402e42:	3110      	adds	r1, #16
  402e44:	2b07      	cmp	r3, #7
  402e46:	9127      	str	r1, [sp, #156]	; 0x9c
  402e48:	9326      	str	r3, [sp, #152]	; 0x98
  402e4a:	e882 0840 	stmia.w	r2, {r6, fp}
  402e4e:	ddf2      	ble.n	402e36 <_svfprintf_r+0x972>
  402e50:	aa25      	add	r2, sp, #148	; 0x94
  402e52:	4629      	mov	r1, r5
  402e54:	4620      	mov	r0, r4
  402e56:	f002 fca1 	bl	40579c <__ssprint_r>
  402e5a:	2800      	cmp	r0, #0
  402e5c:	f47f ac04 	bne.w	402668 <_svfprintf_r+0x1a4>
  402e60:	3f10      	subs	r7, #16
  402e62:	2f10      	cmp	r7, #16
  402e64:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402e66:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402e68:	464a      	mov	r2, r9
  402e6a:	dce9      	bgt.n	402e40 <_svfprintf_r+0x97c>
  402e6c:	4635      	mov	r5, r6
  402e6e:	460c      	mov	r4, r1
  402e70:	4646      	mov	r6, r8
  402e72:	4690      	mov	r8, r2
  402e74:	3301      	adds	r3, #1
  402e76:	443c      	add	r4, r7
  402e78:	2b07      	cmp	r3, #7
  402e7a:	9427      	str	r4, [sp, #156]	; 0x9c
  402e7c:	9326      	str	r3, [sp, #152]	; 0x98
  402e7e:	e888 00a0 	stmia.w	r8, {r5, r7}
  402e82:	f300 8232 	bgt.w	4032ea <_svfprintf_r+0xe26>
  402e86:	f108 0808 	add.w	r8, r8, #8
  402e8a:	e4ac      	b.n	4027e6 <_svfprintf_r+0x322>
  402e8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402e8e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402e90:	2b01      	cmp	r3, #1
  402e92:	f340 81fe 	ble.w	403292 <_svfprintf_r+0xdce>
  402e96:	3701      	adds	r7, #1
  402e98:	3401      	adds	r4, #1
  402e9a:	2301      	movs	r3, #1
  402e9c:	2f07      	cmp	r7, #7
  402e9e:	9427      	str	r4, [sp, #156]	; 0x9c
  402ea0:	9726      	str	r7, [sp, #152]	; 0x98
  402ea2:	f8c8 6000 	str.w	r6, [r8]
  402ea6:	f8c8 3004 	str.w	r3, [r8, #4]
  402eaa:	f300 8203 	bgt.w	4032b4 <_svfprintf_r+0xdf0>
  402eae:	f108 0808 	add.w	r8, r8, #8
  402eb2:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402eb4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402eb6:	f8c8 3000 	str.w	r3, [r8]
  402eba:	3701      	adds	r7, #1
  402ebc:	4414      	add	r4, r2
  402ebe:	2f07      	cmp	r7, #7
  402ec0:	9427      	str	r4, [sp, #156]	; 0x9c
  402ec2:	9726      	str	r7, [sp, #152]	; 0x98
  402ec4:	f8c8 2004 	str.w	r2, [r8, #4]
  402ec8:	f300 8200 	bgt.w	4032cc <_svfprintf_r+0xe08>
  402ecc:	f108 0808 	add.w	r8, r8, #8
  402ed0:	a815      	add	r0, sp, #84	; 0x54
  402ed2:	c80d      	ldmia	r0, {r0, r2, r3}
  402ed4:	9914      	ldr	r1, [sp, #80]	; 0x50
  402ed6:	f003 fcf5 	bl	4068c4 <__aeabi_dcmpeq>
  402eda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402edc:	2800      	cmp	r0, #0
  402ede:	f040 8101 	bne.w	4030e4 <_svfprintf_r+0xc20>
  402ee2:	3b01      	subs	r3, #1
  402ee4:	3701      	adds	r7, #1
  402ee6:	3601      	adds	r6, #1
  402ee8:	441c      	add	r4, r3
  402eea:	2f07      	cmp	r7, #7
  402eec:	9726      	str	r7, [sp, #152]	; 0x98
  402eee:	9427      	str	r4, [sp, #156]	; 0x9c
  402ef0:	f8c8 6000 	str.w	r6, [r8]
  402ef4:	f8c8 3004 	str.w	r3, [r8, #4]
  402ef8:	f300 8127 	bgt.w	40314a <_svfprintf_r+0xc86>
  402efc:	f108 0808 	add.w	r8, r8, #8
  402f00:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  402f02:	f8c8 2004 	str.w	r2, [r8, #4]
  402f06:	3701      	adds	r7, #1
  402f08:	4414      	add	r4, r2
  402f0a:	ab21      	add	r3, sp, #132	; 0x84
  402f0c:	2f07      	cmp	r7, #7
  402f0e:	9427      	str	r4, [sp, #156]	; 0x9c
  402f10:	9726      	str	r7, [sp, #152]	; 0x98
  402f12:	f8c8 3000 	str.w	r3, [r8]
  402f16:	f77f acb3 	ble.w	402880 <_svfprintf_r+0x3bc>
  402f1a:	aa25      	add	r2, sp, #148	; 0x94
  402f1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f1e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f20:	f002 fc3c 	bl	40579c <__ssprint_r>
  402f24:	2800      	cmp	r0, #0
  402f26:	f47f ab9f 	bne.w	402668 <_svfprintf_r+0x1a4>
  402f2a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f2c:	46c8      	mov	r8, r9
  402f2e:	e4a9      	b.n	402884 <_svfprintf_r+0x3c0>
  402f30:	aa25      	add	r2, sp, #148	; 0x94
  402f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f34:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f36:	f002 fc31 	bl	40579c <__ssprint_r>
  402f3a:	2800      	cmp	r0, #0
  402f3c:	f43f aceb 	beq.w	402916 <_svfprintf_r+0x452>
  402f40:	f7ff bb92 	b.w	402668 <_svfprintf_r+0x1a4>
  402f44:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402f48:	2b01      	cmp	r3, #1
  402f4a:	f000 8134 	beq.w	4031b6 <_svfprintf_r+0xcf2>
  402f4e:	2b02      	cmp	r3, #2
  402f50:	d125      	bne.n	402f9e <_svfprintf_r+0xada>
  402f52:	f8cd b01c 	str.w	fp, [sp, #28]
  402f56:	2400      	movs	r4, #0
  402f58:	2500      	movs	r5, #0
  402f5a:	e61e      	b.n	402b9a <_svfprintf_r+0x6d6>
  402f5c:	aa25      	add	r2, sp, #148	; 0x94
  402f5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f60:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f62:	f002 fc1b 	bl	40579c <__ssprint_r>
  402f66:	2800      	cmp	r0, #0
  402f68:	f47f ab7e 	bne.w	402668 <_svfprintf_r+0x1a4>
  402f6c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f6e:	46c8      	mov	r8, r9
  402f70:	e475      	b.n	40285e <_svfprintf_r+0x39a>
  402f72:	aa25      	add	r2, sp, #148	; 0x94
  402f74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f76:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f78:	f002 fc10 	bl	40579c <__ssprint_r>
  402f7c:	2800      	cmp	r0, #0
  402f7e:	f47f ab73 	bne.w	402668 <_svfprintf_r+0x1a4>
  402f82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f84:	46c8      	mov	r8, r9
  402f86:	e41b      	b.n	4027c0 <_svfprintf_r+0x2fc>
  402f88:	aa25      	add	r2, sp, #148	; 0x94
  402f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f8c:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f8e:	f002 fc05 	bl	40579c <__ssprint_r>
  402f92:	2800      	cmp	r0, #0
  402f94:	f47f ab68 	bne.w	402668 <_svfprintf_r+0x1a4>
  402f98:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f9a:	46c8      	mov	r8, r9
  402f9c:	e420      	b.n	4027e0 <_svfprintf_r+0x31c>
  402f9e:	f8cd b01c 	str.w	fp, [sp, #28]
  402fa2:	2400      	movs	r4, #0
  402fa4:	2500      	movs	r5, #0
  402fa6:	4649      	mov	r1, r9
  402fa8:	e000      	b.n	402fac <_svfprintf_r+0xae8>
  402faa:	4631      	mov	r1, r6
  402fac:	08e2      	lsrs	r2, r4, #3
  402fae:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402fb2:	08e8      	lsrs	r0, r5, #3
  402fb4:	f004 0307 	and.w	r3, r4, #7
  402fb8:	4605      	mov	r5, r0
  402fba:	4614      	mov	r4, r2
  402fbc:	3330      	adds	r3, #48	; 0x30
  402fbe:	ea54 0205 	orrs.w	r2, r4, r5
  402fc2:	f801 3c01 	strb.w	r3, [r1, #-1]
  402fc6:	f101 36ff 	add.w	r6, r1, #4294967295
  402fca:	d1ee      	bne.n	402faa <_svfprintf_r+0xae6>
  402fcc:	9a07      	ldr	r2, [sp, #28]
  402fce:	07d2      	lsls	r2, r2, #31
  402fd0:	f57f adf3 	bpl.w	402bba <_svfprintf_r+0x6f6>
  402fd4:	2b30      	cmp	r3, #48	; 0x30
  402fd6:	f43f adf0 	beq.w	402bba <_svfprintf_r+0x6f6>
  402fda:	3902      	subs	r1, #2
  402fdc:	2330      	movs	r3, #48	; 0x30
  402fde:	f806 3c01 	strb.w	r3, [r6, #-1]
  402fe2:	eba9 0301 	sub.w	r3, r9, r1
  402fe6:	930e      	str	r3, [sp, #56]	; 0x38
  402fe8:	460e      	mov	r6, r1
  402fea:	f7ff bb7b 	b.w	4026e4 <_svfprintf_r+0x220>
  402fee:	991f      	ldr	r1, [sp, #124]	; 0x7c
  402ff0:	2900      	cmp	r1, #0
  402ff2:	f340 822e 	ble.w	403452 <_svfprintf_r+0xf8e>
  402ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402ff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402ffa:	4293      	cmp	r3, r2
  402ffc:	bfa8      	it	ge
  402ffe:	4613      	movge	r3, r2
  403000:	2b00      	cmp	r3, #0
  403002:	461f      	mov	r7, r3
  403004:	dd0d      	ble.n	403022 <_svfprintf_r+0xb5e>
  403006:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403008:	f8c8 6000 	str.w	r6, [r8]
  40300c:	3301      	adds	r3, #1
  40300e:	443c      	add	r4, r7
  403010:	2b07      	cmp	r3, #7
  403012:	9427      	str	r4, [sp, #156]	; 0x9c
  403014:	f8c8 7004 	str.w	r7, [r8, #4]
  403018:	9326      	str	r3, [sp, #152]	; 0x98
  40301a:	f300 831f 	bgt.w	40365c <_svfprintf_r+0x1198>
  40301e:	f108 0808 	add.w	r8, r8, #8
  403022:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403024:	2f00      	cmp	r7, #0
  403026:	bfa8      	it	ge
  403028:	1bdb      	subge	r3, r3, r7
  40302a:	2b00      	cmp	r3, #0
  40302c:	461f      	mov	r7, r3
  40302e:	f340 80d6 	ble.w	4031de <_svfprintf_r+0xd1a>
  403032:	2f10      	cmp	r7, #16
  403034:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403036:	4d31      	ldr	r5, [pc, #196]	; (4030fc <_svfprintf_r+0xc38>)
  403038:	f340 81ed 	ble.w	403416 <_svfprintf_r+0xf52>
  40303c:	4642      	mov	r2, r8
  40303e:	4621      	mov	r1, r4
  403040:	46b0      	mov	r8, r6
  403042:	f04f 0b10 	mov.w	fp, #16
  403046:	462e      	mov	r6, r5
  403048:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40304a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40304c:	e004      	b.n	403058 <_svfprintf_r+0xb94>
  40304e:	3208      	adds	r2, #8
  403050:	3f10      	subs	r7, #16
  403052:	2f10      	cmp	r7, #16
  403054:	f340 81db 	ble.w	40340e <_svfprintf_r+0xf4a>
  403058:	3301      	adds	r3, #1
  40305a:	3110      	adds	r1, #16
  40305c:	2b07      	cmp	r3, #7
  40305e:	9127      	str	r1, [sp, #156]	; 0x9c
  403060:	9326      	str	r3, [sp, #152]	; 0x98
  403062:	e882 0840 	stmia.w	r2, {r6, fp}
  403066:	ddf2      	ble.n	40304e <_svfprintf_r+0xb8a>
  403068:	aa25      	add	r2, sp, #148	; 0x94
  40306a:	4629      	mov	r1, r5
  40306c:	4620      	mov	r0, r4
  40306e:	f002 fb95 	bl	40579c <__ssprint_r>
  403072:	2800      	cmp	r0, #0
  403074:	f47f aaf8 	bne.w	402668 <_svfprintf_r+0x1a4>
  403078:	9927      	ldr	r1, [sp, #156]	; 0x9c
  40307a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40307c:	464a      	mov	r2, r9
  40307e:	e7e7      	b.n	403050 <_svfprintf_r+0xb8c>
  403080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403082:	930e      	str	r3, [sp, #56]	; 0x38
  403084:	464e      	mov	r6, r9
  403086:	f7ff bb2d 	b.w	4026e4 <_svfprintf_r+0x220>
  40308a:	2d00      	cmp	r5, #0
  40308c:	bf08      	it	eq
  40308e:	2c0a      	cmpeq	r4, #10
  403090:	f0c0 808f 	bcc.w	4031b2 <_svfprintf_r+0xcee>
  403094:	464e      	mov	r6, r9
  403096:	4620      	mov	r0, r4
  403098:	4629      	mov	r1, r5
  40309a:	220a      	movs	r2, #10
  40309c:	2300      	movs	r3, #0
  40309e:	f7fe ffed 	bl	40207c <__aeabi_uldivmod>
  4030a2:	3230      	adds	r2, #48	; 0x30
  4030a4:	f806 2d01 	strb.w	r2, [r6, #-1]!
  4030a8:	4620      	mov	r0, r4
  4030aa:	4629      	mov	r1, r5
  4030ac:	2300      	movs	r3, #0
  4030ae:	220a      	movs	r2, #10
  4030b0:	f7fe ffe4 	bl	40207c <__aeabi_uldivmod>
  4030b4:	4604      	mov	r4, r0
  4030b6:	460d      	mov	r5, r1
  4030b8:	ea54 0305 	orrs.w	r3, r4, r5
  4030bc:	d1eb      	bne.n	403096 <_svfprintf_r+0xbd2>
  4030be:	eba9 0306 	sub.w	r3, r9, r6
  4030c2:	930e      	str	r3, [sp, #56]	; 0x38
  4030c4:	f7ff bb0e 	b.w	4026e4 <_svfprintf_r+0x220>
  4030c8:	aa25      	add	r2, sp, #148	; 0x94
  4030ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4030cc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4030ce:	f002 fb65 	bl	40579c <__ssprint_r>
  4030d2:	2800      	cmp	r0, #0
  4030d4:	f47f aac8 	bne.w	402668 <_svfprintf_r+0x1a4>
  4030d8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4030dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4030de:	46c8      	mov	r8, r9
  4030e0:	f7ff bb5e 	b.w	4027a0 <_svfprintf_r+0x2dc>
  4030e4:	1e5e      	subs	r6, r3, #1
  4030e6:	2e00      	cmp	r6, #0
  4030e8:	f77f af0a 	ble.w	402f00 <_svfprintf_r+0xa3c>
  4030ec:	2e10      	cmp	r6, #16
  4030ee:	4d03      	ldr	r5, [pc, #12]	; (4030fc <_svfprintf_r+0xc38>)
  4030f0:	dd22      	ble.n	403138 <_svfprintf_r+0xc74>
  4030f2:	4622      	mov	r2, r4
  4030f4:	f04f 0b10 	mov.w	fp, #16
  4030f8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4030fa:	e006      	b.n	40310a <_svfprintf_r+0xc46>
  4030fc:	00407470 	.word	0x00407470
  403100:	3e10      	subs	r6, #16
  403102:	2e10      	cmp	r6, #16
  403104:	f108 0808 	add.w	r8, r8, #8
  403108:	dd15      	ble.n	403136 <_svfprintf_r+0xc72>
  40310a:	3701      	adds	r7, #1
  40310c:	3210      	adds	r2, #16
  40310e:	2f07      	cmp	r7, #7
  403110:	9227      	str	r2, [sp, #156]	; 0x9c
  403112:	9726      	str	r7, [sp, #152]	; 0x98
  403114:	e888 0820 	stmia.w	r8, {r5, fp}
  403118:	ddf2      	ble.n	403100 <_svfprintf_r+0xc3c>
  40311a:	aa25      	add	r2, sp, #148	; 0x94
  40311c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40311e:	4620      	mov	r0, r4
  403120:	f002 fb3c 	bl	40579c <__ssprint_r>
  403124:	2800      	cmp	r0, #0
  403126:	f47f aa9f 	bne.w	402668 <_svfprintf_r+0x1a4>
  40312a:	3e10      	subs	r6, #16
  40312c:	2e10      	cmp	r6, #16
  40312e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403130:	9f26      	ldr	r7, [sp, #152]	; 0x98
  403132:	46c8      	mov	r8, r9
  403134:	dce9      	bgt.n	40310a <_svfprintf_r+0xc46>
  403136:	4614      	mov	r4, r2
  403138:	3701      	adds	r7, #1
  40313a:	4434      	add	r4, r6
  40313c:	2f07      	cmp	r7, #7
  40313e:	9427      	str	r4, [sp, #156]	; 0x9c
  403140:	9726      	str	r7, [sp, #152]	; 0x98
  403142:	e888 0060 	stmia.w	r8, {r5, r6}
  403146:	f77f aed9 	ble.w	402efc <_svfprintf_r+0xa38>
  40314a:	aa25      	add	r2, sp, #148	; 0x94
  40314c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40314e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403150:	f002 fb24 	bl	40579c <__ssprint_r>
  403154:	2800      	cmp	r0, #0
  403156:	f47f aa87 	bne.w	402668 <_svfprintf_r+0x1a4>
  40315a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40315c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40315e:	46c8      	mov	r8, r9
  403160:	e6ce      	b.n	402f00 <_svfprintf_r+0xa3c>
  403162:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403164:	6814      	ldr	r4, [r2, #0]
  403166:	4613      	mov	r3, r2
  403168:	3304      	adds	r3, #4
  40316a:	17e5      	asrs	r5, r4, #31
  40316c:	930f      	str	r3, [sp, #60]	; 0x3c
  40316e:	4622      	mov	r2, r4
  403170:	462b      	mov	r3, r5
  403172:	e4fa      	b.n	402b6a <_svfprintf_r+0x6a6>
  403174:	3204      	adds	r2, #4
  403176:	681c      	ldr	r4, [r3, #0]
  403178:	920f      	str	r2, [sp, #60]	; 0x3c
  40317a:	2301      	movs	r3, #1
  40317c:	2500      	movs	r5, #0
  40317e:	f7ff ba94 	b.w	4026aa <_svfprintf_r+0x1e6>
  403182:	681c      	ldr	r4, [r3, #0]
  403184:	3304      	adds	r3, #4
  403186:	930f      	str	r3, [sp, #60]	; 0x3c
  403188:	2500      	movs	r5, #0
  40318a:	e421      	b.n	4029d0 <_svfprintf_r+0x50c>
  40318c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40318e:	460a      	mov	r2, r1
  403190:	3204      	adds	r2, #4
  403192:	680c      	ldr	r4, [r1, #0]
  403194:	920f      	str	r2, [sp, #60]	; 0x3c
  403196:	2500      	movs	r5, #0
  403198:	f7ff ba87 	b.w	4026aa <_svfprintf_r+0x1e6>
  40319c:	4614      	mov	r4, r2
  40319e:	3301      	adds	r3, #1
  4031a0:	4434      	add	r4, r6
  4031a2:	2b07      	cmp	r3, #7
  4031a4:	9427      	str	r4, [sp, #156]	; 0x9c
  4031a6:	9326      	str	r3, [sp, #152]	; 0x98
  4031a8:	e888 0060 	stmia.w	r8, {r5, r6}
  4031ac:	f77f ab68 	ble.w	402880 <_svfprintf_r+0x3bc>
  4031b0:	e6b3      	b.n	402f1a <_svfprintf_r+0xa56>
  4031b2:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4031b6:	f8cd b01c 	str.w	fp, [sp, #28]
  4031ba:	ae42      	add	r6, sp, #264	; 0x108
  4031bc:	3430      	adds	r4, #48	; 0x30
  4031be:	2301      	movs	r3, #1
  4031c0:	f806 4d41 	strb.w	r4, [r6, #-65]!
  4031c4:	930e      	str	r3, [sp, #56]	; 0x38
  4031c6:	f7ff ba8d 	b.w	4026e4 <_svfprintf_r+0x220>
  4031ca:	aa25      	add	r2, sp, #148	; 0x94
  4031cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4031ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4031d0:	f002 fae4 	bl	40579c <__ssprint_r>
  4031d4:	2800      	cmp	r0, #0
  4031d6:	f47f aa47 	bne.w	402668 <_svfprintf_r+0x1a4>
  4031da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4031dc:	46c8      	mov	r8, r9
  4031de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4031e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4031e2:	429a      	cmp	r2, r3
  4031e4:	db44      	blt.n	403270 <_svfprintf_r+0xdac>
  4031e6:	9b07      	ldr	r3, [sp, #28]
  4031e8:	07d9      	lsls	r1, r3, #31
  4031ea:	d441      	bmi.n	403270 <_svfprintf_r+0xdac>
  4031ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4031ee:	9812      	ldr	r0, [sp, #72]	; 0x48
  4031f0:	1a9a      	subs	r2, r3, r2
  4031f2:	1a1d      	subs	r5, r3, r0
  4031f4:	4295      	cmp	r5, r2
  4031f6:	bfa8      	it	ge
  4031f8:	4615      	movge	r5, r2
  4031fa:	2d00      	cmp	r5, #0
  4031fc:	dd0e      	ble.n	40321c <_svfprintf_r+0xd58>
  4031fe:	9926      	ldr	r1, [sp, #152]	; 0x98
  403200:	f8c8 5004 	str.w	r5, [r8, #4]
  403204:	3101      	adds	r1, #1
  403206:	4406      	add	r6, r0
  403208:	442c      	add	r4, r5
  40320a:	2907      	cmp	r1, #7
  40320c:	f8c8 6000 	str.w	r6, [r8]
  403210:	9427      	str	r4, [sp, #156]	; 0x9c
  403212:	9126      	str	r1, [sp, #152]	; 0x98
  403214:	f300 823b 	bgt.w	40368e <_svfprintf_r+0x11ca>
  403218:	f108 0808 	add.w	r8, r8, #8
  40321c:	2d00      	cmp	r5, #0
  40321e:	bfac      	ite	ge
  403220:	1b56      	subge	r6, r2, r5
  403222:	4616      	movlt	r6, r2
  403224:	2e00      	cmp	r6, #0
  403226:	f77f ab2d 	ble.w	402884 <_svfprintf_r+0x3c0>
  40322a:	2e10      	cmp	r6, #16
  40322c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40322e:	4db0      	ldr	r5, [pc, #704]	; (4034f0 <_svfprintf_r+0x102c>)
  403230:	ddb5      	ble.n	40319e <_svfprintf_r+0xcda>
  403232:	4622      	mov	r2, r4
  403234:	2710      	movs	r7, #16
  403236:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40323a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40323c:	e004      	b.n	403248 <_svfprintf_r+0xd84>
  40323e:	f108 0808 	add.w	r8, r8, #8
  403242:	3e10      	subs	r6, #16
  403244:	2e10      	cmp	r6, #16
  403246:	dda9      	ble.n	40319c <_svfprintf_r+0xcd8>
  403248:	3301      	adds	r3, #1
  40324a:	3210      	adds	r2, #16
  40324c:	2b07      	cmp	r3, #7
  40324e:	9227      	str	r2, [sp, #156]	; 0x9c
  403250:	9326      	str	r3, [sp, #152]	; 0x98
  403252:	e888 00a0 	stmia.w	r8, {r5, r7}
  403256:	ddf2      	ble.n	40323e <_svfprintf_r+0xd7a>
  403258:	aa25      	add	r2, sp, #148	; 0x94
  40325a:	4621      	mov	r1, r4
  40325c:	4658      	mov	r0, fp
  40325e:	f002 fa9d 	bl	40579c <__ssprint_r>
  403262:	2800      	cmp	r0, #0
  403264:	f47f aa00 	bne.w	402668 <_svfprintf_r+0x1a4>
  403268:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40326a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40326c:	46c8      	mov	r8, r9
  40326e:	e7e8      	b.n	403242 <_svfprintf_r+0xd7e>
  403270:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403272:	9819      	ldr	r0, [sp, #100]	; 0x64
  403274:	991a      	ldr	r1, [sp, #104]	; 0x68
  403276:	f8c8 1000 	str.w	r1, [r8]
  40327a:	3301      	adds	r3, #1
  40327c:	4404      	add	r4, r0
  40327e:	2b07      	cmp	r3, #7
  403280:	9427      	str	r4, [sp, #156]	; 0x9c
  403282:	f8c8 0004 	str.w	r0, [r8, #4]
  403286:	9326      	str	r3, [sp, #152]	; 0x98
  403288:	f300 81f5 	bgt.w	403676 <_svfprintf_r+0x11b2>
  40328c:	f108 0808 	add.w	r8, r8, #8
  403290:	e7ac      	b.n	4031ec <_svfprintf_r+0xd28>
  403292:	9b07      	ldr	r3, [sp, #28]
  403294:	07da      	lsls	r2, r3, #31
  403296:	f53f adfe 	bmi.w	402e96 <_svfprintf_r+0x9d2>
  40329a:	3701      	adds	r7, #1
  40329c:	3401      	adds	r4, #1
  40329e:	2301      	movs	r3, #1
  4032a0:	2f07      	cmp	r7, #7
  4032a2:	9427      	str	r4, [sp, #156]	; 0x9c
  4032a4:	9726      	str	r7, [sp, #152]	; 0x98
  4032a6:	f8c8 6000 	str.w	r6, [r8]
  4032aa:	f8c8 3004 	str.w	r3, [r8, #4]
  4032ae:	f77f ae25 	ble.w	402efc <_svfprintf_r+0xa38>
  4032b2:	e74a      	b.n	40314a <_svfprintf_r+0xc86>
  4032b4:	aa25      	add	r2, sp, #148	; 0x94
  4032b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032ba:	f002 fa6f 	bl	40579c <__ssprint_r>
  4032be:	2800      	cmp	r0, #0
  4032c0:	f47f a9d2 	bne.w	402668 <_svfprintf_r+0x1a4>
  4032c4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4032c6:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4032c8:	46c8      	mov	r8, r9
  4032ca:	e5f2      	b.n	402eb2 <_svfprintf_r+0x9ee>
  4032cc:	aa25      	add	r2, sp, #148	; 0x94
  4032ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032d0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032d2:	f002 fa63 	bl	40579c <__ssprint_r>
  4032d6:	2800      	cmp	r0, #0
  4032d8:	f47f a9c6 	bne.w	402668 <_svfprintf_r+0x1a4>
  4032dc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4032de:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4032e0:	46c8      	mov	r8, r9
  4032e2:	e5f5      	b.n	402ed0 <_svfprintf_r+0xa0c>
  4032e4:	464e      	mov	r6, r9
  4032e6:	f7ff b9fd 	b.w	4026e4 <_svfprintf_r+0x220>
  4032ea:	aa25      	add	r2, sp, #148	; 0x94
  4032ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032ee:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032f0:	f002 fa54 	bl	40579c <__ssprint_r>
  4032f4:	2800      	cmp	r0, #0
  4032f6:	f47f a9b7 	bne.w	402668 <_svfprintf_r+0x1a4>
  4032fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4032fc:	46c8      	mov	r8, r9
  4032fe:	f7ff ba72 	b.w	4027e6 <_svfprintf_r+0x322>
  403302:	9c15      	ldr	r4, [sp, #84]	; 0x54
  403304:	4622      	mov	r2, r4
  403306:	4620      	mov	r0, r4
  403308:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40330a:	4623      	mov	r3, r4
  40330c:	4621      	mov	r1, r4
  40330e:	f003 fb0b 	bl	406928 <__aeabi_dcmpun>
  403312:	2800      	cmp	r0, #0
  403314:	f040 8286 	bne.w	403824 <_svfprintf_r+0x1360>
  403318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40331a:	3301      	adds	r3, #1
  40331c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40331e:	f023 0320 	bic.w	r3, r3, #32
  403322:	930e      	str	r3, [sp, #56]	; 0x38
  403324:	f000 81e2 	beq.w	4036ec <_svfprintf_r+0x1228>
  403328:	2b47      	cmp	r3, #71	; 0x47
  40332a:	f000 811e 	beq.w	40356a <_svfprintf_r+0x10a6>
  40332e:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  403332:	9307      	str	r3, [sp, #28]
  403334:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403336:	1e1f      	subs	r7, r3, #0
  403338:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40333a:	9308      	str	r3, [sp, #32]
  40333c:	bfbb      	ittet	lt
  40333e:	463b      	movlt	r3, r7
  403340:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  403344:	2300      	movge	r3, #0
  403346:	232d      	movlt	r3, #45	; 0x2d
  403348:	9310      	str	r3, [sp, #64]	; 0x40
  40334a:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40334c:	2b66      	cmp	r3, #102	; 0x66
  40334e:	f000 81bb 	beq.w	4036c8 <_svfprintf_r+0x1204>
  403352:	2b46      	cmp	r3, #70	; 0x46
  403354:	f000 80df 	beq.w	403516 <_svfprintf_r+0x1052>
  403358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40335a:	9a08      	ldr	r2, [sp, #32]
  40335c:	2b45      	cmp	r3, #69	; 0x45
  40335e:	bf0c      	ite	eq
  403360:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  403362:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  403364:	a823      	add	r0, sp, #140	; 0x8c
  403366:	a920      	add	r1, sp, #128	; 0x80
  403368:	bf08      	it	eq
  40336a:	1c5d      	addeq	r5, r3, #1
  40336c:	9004      	str	r0, [sp, #16]
  40336e:	9103      	str	r1, [sp, #12]
  403370:	a81f      	add	r0, sp, #124	; 0x7c
  403372:	2102      	movs	r1, #2
  403374:	463b      	mov	r3, r7
  403376:	9002      	str	r0, [sp, #8]
  403378:	9501      	str	r5, [sp, #4]
  40337a:	9100      	str	r1, [sp, #0]
  40337c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40337e:	f000 fb73 	bl	403a68 <_dtoa_r>
  403382:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403384:	2b67      	cmp	r3, #103	; 0x67
  403386:	4606      	mov	r6, r0
  403388:	f040 81e0 	bne.w	40374c <_svfprintf_r+0x1288>
  40338c:	f01b 0f01 	tst.w	fp, #1
  403390:	f000 8246 	beq.w	403820 <_svfprintf_r+0x135c>
  403394:	1974      	adds	r4, r6, r5
  403396:	9a16      	ldr	r2, [sp, #88]	; 0x58
  403398:	9808      	ldr	r0, [sp, #32]
  40339a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  40339c:	4639      	mov	r1, r7
  40339e:	f003 fa91 	bl	4068c4 <__aeabi_dcmpeq>
  4033a2:	2800      	cmp	r0, #0
  4033a4:	f040 8165 	bne.w	403672 <_svfprintf_r+0x11ae>
  4033a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4033aa:	42a3      	cmp	r3, r4
  4033ac:	d206      	bcs.n	4033bc <_svfprintf_r+0xef8>
  4033ae:	2130      	movs	r1, #48	; 0x30
  4033b0:	1c5a      	adds	r2, r3, #1
  4033b2:	9223      	str	r2, [sp, #140]	; 0x8c
  4033b4:	7019      	strb	r1, [r3, #0]
  4033b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4033b8:	429c      	cmp	r4, r3
  4033ba:	d8f9      	bhi.n	4033b0 <_svfprintf_r+0xeec>
  4033bc:	1b9b      	subs	r3, r3, r6
  4033be:	9313      	str	r3, [sp, #76]	; 0x4c
  4033c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4033c2:	2b47      	cmp	r3, #71	; 0x47
  4033c4:	f000 80e9 	beq.w	40359a <_svfprintf_r+0x10d6>
  4033c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4033ca:	2b65      	cmp	r3, #101	; 0x65
  4033cc:	f340 81cd 	ble.w	40376a <_svfprintf_r+0x12a6>
  4033d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4033d2:	2b66      	cmp	r3, #102	; 0x66
  4033d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4033d6:	9312      	str	r3, [sp, #72]	; 0x48
  4033d8:	f000 819e 	beq.w	403718 <_svfprintf_r+0x1254>
  4033dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4033de:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4033e0:	4619      	mov	r1, r3
  4033e2:	4291      	cmp	r1, r2
  4033e4:	f300 818a 	bgt.w	4036fc <_svfprintf_r+0x1238>
  4033e8:	f01b 0f01 	tst.w	fp, #1
  4033ec:	f040 8213 	bne.w	403816 <_svfprintf_r+0x1352>
  4033f0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4033f4:	9308      	str	r3, [sp, #32]
  4033f6:	2367      	movs	r3, #103	; 0x67
  4033f8:	920e      	str	r2, [sp, #56]	; 0x38
  4033fa:	9311      	str	r3, [sp, #68]	; 0x44
  4033fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
  4033fe:	2b00      	cmp	r3, #0
  403400:	f040 80c4 	bne.w	40358c <_svfprintf_r+0x10c8>
  403404:	930a      	str	r3, [sp, #40]	; 0x28
  403406:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40340a:	f7ff b973 	b.w	4026f4 <_svfprintf_r+0x230>
  40340e:	4635      	mov	r5, r6
  403410:	460c      	mov	r4, r1
  403412:	4646      	mov	r6, r8
  403414:	4690      	mov	r8, r2
  403416:	3301      	adds	r3, #1
  403418:	443c      	add	r4, r7
  40341a:	2b07      	cmp	r3, #7
  40341c:	9427      	str	r4, [sp, #156]	; 0x9c
  40341e:	9326      	str	r3, [sp, #152]	; 0x98
  403420:	e888 00a0 	stmia.w	r8, {r5, r7}
  403424:	f73f aed1 	bgt.w	4031ca <_svfprintf_r+0xd06>
  403428:	f108 0808 	add.w	r8, r8, #8
  40342c:	e6d7      	b.n	4031de <_svfprintf_r+0xd1a>
  40342e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403430:	6813      	ldr	r3, [r2, #0]
  403432:	3204      	adds	r2, #4
  403434:	920f      	str	r2, [sp, #60]	; 0x3c
  403436:	9a09      	ldr	r2, [sp, #36]	; 0x24
  403438:	601a      	str	r2, [r3, #0]
  40343a:	f7ff b86a 	b.w	402512 <_svfprintf_r+0x4e>
  40343e:	aa25      	add	r2, sp, #148	; 0x94
  403440:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403442:	980c      	ldr	r0, [sp, #48]	; 0x30
  403444:	f002 f9aa 	bl	40579c <__ssprint_r>
  403448:	2800      	cmp	r0, #0
  40344a:	f47f a90d 	bne.w	402668 <_svfprintf_r+0x1a4>
  40344e:	46c8      	mov	r8, r9
  403450:	e48d      	b.n	402d6e <_svfprintf_r+0x8aa>
  403452:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403454:	4a27      	ldr	r2, [pc, #156]	; (4034f4 <_svfprintf_r+0x1030>)
  403456:	f8c8 2000 	str.w	r2, [r8]
  40345a:	3301      	adds	r3, #1
  40345c:	3401      	adds	r4, #1
  40345e:	2201      	movs	r2, #1
  403460:	2b07      	cmp	r3, #7
  403462:	9427      	str	r4, [sp, #156]	; 0x9c
  403464:	9326      	str	r3, [sp, #152]	; 0x98
  403466:	f8c8 2004 	str.w	r2, [r8, #4]
  40346a:	dc72      	bgt.n	403552 <_svfprintf_r+0x108e>
  40346c:	f108 0808 	add.w	r8, r8, #8
  403470:	b929      	cbnz	r1, 40347e <_svfprintf_r+0xfba>
  403472:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403474:	b91b      	cbnz	r3, 40347e <_svfprintf_r+0xfba>
  403476:	9b07      	ldr	r3, [sp, #28]
  403478:	07d8      	lsls	r0, r3, #31
  40347a:	f57f aa03 	bpl.w	402884 <_svfprintf_r+0x3c0>
  40347e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403480:	9819      	ldr	r0, [sp, #100]	; 0x64
  403482:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403484:	f8c8 2000 	str.w	r2, [r8]
  403488:	3301      	adds	r3, #1
  40348a:	4602      	mov	r2, r0
  40348c:	4422      	add	r2, r4
  40348e:	2b07      	cmp	r3, #7
  403490:	9227      	str	r2, [sp, #156]	; 0x9c
  403492:	f8c8 0004 	str.w	r0, [r8, #4]
  403496:	9326      	str	r3, [sp, #152]	; 0x98
  403498:	f300 818d 	bgt.w	4037b6 <_svfprintf_r+0x12f2>
  40349c:	f108 0808 	add.w	r8, r8, #8
  4034a0:	2900      	cmp	r1, #0
  4034a2:	f2c0 8165 	blt.w	403770 <_svfprintf_r+0x12ac>
  4034a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
  4034a8:	f8c8 6000 	str.w	r6, [r8]
  4034ac:	3301      	adds	r3, #1
  4034ae:	188c      	adds	r4, r1, r2
  4034b0:	2b07      	cmp	r3, #7
  4034b2:	9427      	str	r4, [sp, #156]	; 0x9c
  4034b4:	9326      	str	r3, [sp, #152]	; 0x98
  4034b6:	f8c8 1004 	str.w	r1, [r8, #4]
  4034ba:	f77f a9e1 	ble.w	402880 <_svfprintf_r+0x3bc>
  4034be:	e52c      	b.n	402f1a <_svfprintf_r+0xa56>
  4034c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4034c2:	9909      	ldr	r1, [sp, #36]	; 0x24
  4034c4:	6813      	ldr	r3, [r2, #0]
  4034c6:	17cd      	asrs	r5, r1, #31
  4034c8:	4608      	mov	r0, r1
  4034ca:	3204      	adds	r2, #4
  4034cc:	4629      	mov	r1, r5
  4034ce:	920f      	str	r2, [sp, #60]	; 0x3c
  4034d0:	e9c3 0100 	strd	r0, r1, [r3]
  4034d4:	f7ff b81d 	b.w	402512 <_svfprintf_r+0x4e>
  4034d8:	aa25      	add	r2, sp, #148	; 0x94
  4034da:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4034dc:	980c      	ldr	r0, [sp, #48]	; 0x30
  4034de:	f002 f95d 	bl	40579c <__ssprint_r>
  4034e2:	2800      	cmp	r0, #0
  4034e4:	f47f a8c0 	bne.w	402668 <_svfprintf_r+0x1a4>
  4034e8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4034ea:	46c8      	mov	r8, r9
  4034ec:	e458      	b.n	402da0 <_svfprintf_r+0x8dc>
  4034ee:	bf00      	nop
  4034f0:	00407470 	.word	0x00407470
  4034f4:	0040745c 	.word	0x0040745c
  4034f8:	2140      	movs	r1, #64	; 0x40
  4034fa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4034fc:	f001 fa0a 	bl	404914 <_malloc_r>
  403500:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403502:	6010      	str	r0, [r2, #0]
  403504:	6110      	str	r0, [r2, #16]
  403506:	2800      	cmp	r0, #0
  403508:	f000 81f2 	beq.w	4038f0 <_svfprintf_r+0x142c>
  40350c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40350e:	2340      	movs	r3, #64	; 0x40
  403510:	6153      	str	r3, [r2, #20]
  403512:	f7fe bfee 	b.w	4024f2 <_svfprintf_r+0x2e>
  403516:	a823      	add	r0, sp, #140	; 0x8c
  403518:	a920      	add	r1, sp, #128	; 0x80
  40351a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  40351c:	9004      	str	r0, [sp, #16]
  40351e:	9103      	str	r1, [sp, #12]
  403520:	a81f      	add	r0, sp, #124	; 0x7c
  403522:	2103      	movs	r1, #3
  403524:	9002      	str	r0, [sp, #8]
  403526:	9a08      	ldr	r2, [sp, #32]
  403528:	9401      	str	r4, [sp, #4]
  40352a:	463b      	mov	r3, r7
  40352c:	9100      	str	r1, [sp, #0]
  40352e:	980c      	ldr	r0, [sp, #48]	; 0x30
  403530:	f000 fa9a 	bl	403a68 <_dtoa_r>
  403534:	4625      	mov	r5, r4
  403536:	4606      	mov	r6, r0
  403538:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40353a:	2b46      	cmp	r3, #70	; 0x46
  40353c:	eb06 0405 	add.w	r4, r6, r5
  403540:	f47f af29 	bne.w	403396 <_svfprintf_r+0xed2>
  403544:	7833      	ldrb	r3, [r6, #0]
  403546:	2b30      	cmp	r3, #48	; 0x30
  403548:	f000 8178 	beq.w	40383c <_svfprintf_r+0x1378>
  40354c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  40354e:	442c      	add	r4, r5
  403550:	e721      	b.n	403396 <_svfprintf_r+0xed2>
  403552:	aa25      	add	r2, sp, #148	; 0x94
  403554:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403556:	980c      	ldr	r0, [sp, #48]	; 0x30
  403558:	f002 f920 	bl	40579c <__ssprint_r>
  40355c:	2800      	cmp	r0, #0
  40355e:	f47f a883 	bne.w	402668 <_svfprintf_r+0x1a4>
  403562:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403564:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403566:	46c8      	mov	r8, r9
  403568:	e782      	b.n	403470 <_svfprintf_r+0xfac>
  40356a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40356c:	2b00      	cmp	r3, #0
  40356e:	bf08      	it	eq
  403570:	2301      	moveq	r3, #1
  403572:	930a      	str	r3, [sp, #40]	; 0x28
  403574:	e6db      	b.n	40332e <_svfprintf_r+0xe6a>
  403576:	4630      	mov	r0, r6
  403578:	940a      	str	r4, [sp, #40]	; 0x28
  40357a:	f002 f8a1 	bl	4056c0 <strlen>
  40357e:	950f      	str	r5, [sp, #60]	; 0x3c
  403580:	900e      	str	r0, [sp, #56]	; 0x38
  403582:	f8cd b01c 	str.w	fp, [sp, #28]
  403586:	4603      	mov	r3, r0
  403588:	f7ff b9f9 	b.w	40297e <_svfprintf_r+0x4ba>
  40358c:	272d      	movs	r7, #45	; 0x2d
  40358e:	2300      	movs	r3, #0
  403590:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403594:	930a      	str	r3, [sp, #40]	; 0x28
  403596:	f7ff b8ae 	b.w	4026f6 <_svfprintf_r+0x232>
  40359a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40359c:	9312      	str	r3, [sp, #72]	; 0x48
  40359e:	461a      	mov	r2, r3
  4035a0:	3303      	adds	r3, #3
  4035a2:	db04      	blt.n	4035ae <_svfprintf_r+0x10ea>
  4035a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4035a6:	4619      	mov	r1, r3
  4035a8:	4291      	cmp	r1, r2
  4035aa:	f6bf af17 	bge.w	4033dc <_svfprintf_r+0xf18>
  4035ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4035b0:	3b02      	subs	r3, #2
  4035b2:	9311      	str	r3, [sp, #68]	; 0x44
  4035b4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  4035b8:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  4035bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4035be:	3b01      	subs	r3, #1
  4035c0:	2b00      	cmp	r3, #0
  4035c2:	931f      	str	r3, [sp, #124]	; 0x7c
  4035c4:	bfbd      	ittte	lt
  4035c6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  4035c8:	f1c3 0301 	rsblt	r3, r3, #1
  4035cc:	222d      	movlt	r2, #45	; 0x2d
  4035ce:	222b      	movge	r2, #43	; 0x2b
  4035d0:	2b09      	cmp	r3, #9
  4035d2:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  4035d6:	f340 8116 	ble.w	403806 <_svfprintf_r+0x1342>
  4035da:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  4035de:	4620      	mov	r0, r4
  4035e0:	4dab      	ldr	r5, [pc, #684]	; (403890 <_svfprintf_r+0x13cc>)
  4035e2:	e000      	b.n	4035e6 <_svfprintf_r+0x1122>
  4035e4:	4610      	mov	r0, r2
  4035e6:	fb85 1203 	smull	r1, r2, r5, r3
  4035ea:	17d9      	asrs	r1, r3, #31
  4035ec:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4035f0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4035f4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4035f8:	3230      	adds	r2, #48	; 0x30
  4035fa:	2909      	cmp	r1, #9
  4035fc:	f800 2c01 	strb.w	r2, [r0, #-1]
  403600:	460b      	mov	r3, r1
  403602:	f100 32ff 	add.w	r2, r0, #4294967295
  403606:	dced      	bgt.n	4035e4 <_svfprintf_r+0x1120>
  403608:	3330      	adds	r3, #48	; 0x30
  40360a:	3802      	subs	r0, #2
  40360c:	b2d9      	uxtb	r1, r3
  40360e:	4284      	cmp	r4, r0
  403610:	f802 1c01 	strb.w	r1, [r2, #-1]
  403614:	f240 8165 	bls.w	4038e2 <_svfprintf_r+0x141e>
  403618:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  40361c:	4613      	mov	r3, r2
  40361e:	e001      	b.n	403624 <_svfprintf_r+0x1160>
  403620:	f813 1b01 	ldrb.w	r1, [r3], #1
  403624:	f800 1b01 	strb.w	r1, [r0], #1
  403628:	42a3      	cmp	r3, r4
  40362a:	d1f9      	bne.n	403620 <_svfprintf_r+0x115c>
  40362c:	3301      	adds	r3, #1
  40362e:	1a9b      	subs	r3, r3, r2
  403630:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  403634:	4413      	add	r3, r2
  403636:	aa21      	add	r2, sp, #132	; 0x84
  403638:	1a9b      	subs	r3, r3, r2
  40363a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40363c:	931b      	str	r3, [sp, #108]	; 0x6c
  40363e:	2a01      	cmp	r2, #1
  403640:	4413      	add	r3, r2
  403642:	930e      	str	r3, [sp, #56]	; 0x38
  403644:	f340 8119 	ble.w	40387a <_svfprintf_r+0x13b6>
  403648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40364a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40364c:	4413      	add	r3, r2
  40364e:	930e      	str	r3, [sp, #56]	; 0x38
  403650:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403654:	9308      	str	r3, [sp, #32]
  403656:	2300      	movs	r3, #0
  403658:	9312      	str	r3, [sp, #72]	; 0x48
  40365a:	e6cf      	b.n	4033fc <_svfprintf_r+0xf38>
  40365c:	aa25      	add	r2, sp, #148	; 0x94
  40365e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403660:	980c      	ldr	r0, [sp, #48]	; 0x30
  403662:	f002 f89b 	bl	40579c <__ssprint_r>
  403666:	2800      	cmp	r0, #0
  403668:	f47e affe 	bne.w	402668 <_svfprintf_r+0x1a4>
  40366c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40366e:	46c8      	mov	r8, r9
  403670:	e4d7      	b.n	403022 <_svfprintf_r+0xb5e>
  403672:	4623      	mov	r3, r4
  403674:	e6a2      	b.n	4033bc <_svfprintf_r+0xef8>
  403676:	aa25      	add	r2, sp, #148	; 0x94
  403678:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40367a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40367c:	f002 f88e 	bl	40579c <__ssprint_r>
  403680:	2800      	cmp	r0, #0
  403682:	f47e aff1 	bne.w	402668 <_svfprintf_r+0x1a4>
  403686:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403688:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40368a:	46c8      	mov	r8, r9
  40368c:	e5ae      	b.n	4031ec <_svfprintf_r+0xd28>
  40368e:	aa25      	add	r2, sp, #148	; 0x94
  403690:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403692:	980c      	ldr	r0, [sp, #48]	; 0x30
  403694:	f002 f882 	bl	40579c <__ssprint_r>
  403698:	2800      	cmp	r0, #0
  40369a:	f47e afe5 	bne.w	402668 <_svfprintf_r+0x1a4>
  40369e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  4036a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4036a2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4036a4:	1a9a      	subs	r2, r3, r2
  4036a6:	46c8      	mov	r8, r9
  4036a8:	e5b8      	b.n	40321c <_svfprintf_r+0xd58>
  4036aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4036ac:	9612      	str	r6, [sp, #72]	; 0x48
  4036ae:	2b06      	cmp	r3, #6
  4036b0:	bf28      	it	cs
  4036b2:	2306      	movcs	r3, #6
  4036b4:	960a      	str	r6, [sp, #40]	; 0x28
  4036b6:	4637      	mov	r7, r6
  4036b8:	9308      	str	r3, [sp, #32]
  4036ba:	950f      	str	r5, [sp, #60]	; 0x3c
  4036bc:	f8cd b01c 	str.w	fp, [sp, #28]
  4036c0:	930e      	str	r3, [sp, #56]	; 0x38
  4036c2:	4e74      	ldr	r6, [pc, #464]	; (403894 <_svfprintf_r+0x13d0>)
  4036c4:	f7ff b816 	b.w	4026f4 <_svfprintf_r+0x230>
  4036c8:	a823      	add	r0, sp, #140	; 0x8c
  4036ca:	a920      	add	r1, sp, #128	; 0x80
  4036cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  4036ce:	9004      	str	r0, [sp, #16]
  4036d0:	9103      	str	r1, [sp, #12]
  4036d2:	a81f      	add	r0, sp, #124	; 0x7c
  4036d4:	2103      	movs	r1, #3
  4036d6:	9002      	str	r0, [sp, #8]
  4036d8:	9a08      	ldr	r2, [sp, #32]
  4036da:	9501      	str	r5, [sp, #4]
  4036dc:	463b      	mov	r3, r7
  4036de:	9100      	str	r1, [sp, #0]
  4036e0:	980c      	ldr	r0, [sp, #48]	; 0x30
  4036e2:	f000 f9c1 	bl	403a68 <_dtoa_r>
  4036e6:	4606      	mov	r6, r0
  4036e8:	1944      	adds	r4, r0, r5
  4036ea:	e72b      	b.n	403544 <_svfprintf_r+0x1080>
  4036ec:	2306      	movs	r3, #6
  4036ee:	930a      	str	r3, [sp, #40]	; 0x28
  4036f0:	e61d      	b.n	40332e <_svfprintf_r+0xe6a>
  4036f2:	272d      	movs	r7, #45	; 0x2d
  4036f4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4036f8:	f7ff bacd 	b.w	402c96 <_svfprintf_r+0x7d2>
  4036fc:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4036fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403700:	4413      	add	r3, r2
  403702:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403704:	930e      	str	r3, [sp, #56]	; 0x38
  403706:	2a00      	cmp	r2, #0
  403708:	f340 80b0 	ble.w	40386c <_svfprintf_r+0x13a8>
  40370c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403710:	9308      	str	r3, [sp, #32]
  403712:	2367      	movs	r3, #103	; 0x67
  403714:	9311      	str	r3, [sp, #68]	; 0x44
  403716:	e671      	b.n	4033fc <_svfprintf_r+0xf38>
  403718:	2b00      	cmp	r3, #0
  40371a:	f340 80c3 	ble.w	4038a4 <_svfprintf_r+0x13e0>
  40371e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403720:	2a00      	cmp	r2, #0
  403722:	f040 8099 	bne.w	403858 <_svfprintf_r+0x1394>
  403726:	f01b 0f01 	tst.w	fp, #1
  40372a:	f040 8095 	bne.w	403858 <_svfprintf_r+0x1394>
  40372e:	9308      	str	r3, [sp, #32]
  403730:	930e      	str	r3, [sp, #56]	; 0x38
  403732:	e663      	b.n	4033fc <_svfprintf_r+0xf38>
  403734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403736:	9308      	str	r3, [sp, #32]
  403738:	930e      	str	r3, [sp, #56]	; 0x38
  40373a:	900a      	str	r0, [sp, #40]	; 0x28
  40373c:	950f      	str	r5, [sp, #60]	; 0x3c
  40373e:	f8cd b01c 	str.w	fp, [sp, #28]
  403742:	9012      	str	r0, [sp, #72]	; 0x48
  403744:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403748:	f7fe bfd4 	b.w	4026f4 <_svfprintf_r+0x230>
  40374c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40374e:	2b47      	cmp	r3, #71	; 0x47
  403750:	f47f ae20 	bne.w	403394 <_svfprintf_r+0xed0>
  403754:	f01b 0f01 	tst.w	fp, #1
  403758:	f47f aeee 	bne.w	403538 <_svfprintf_r+0x1074>
  40375c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40375e:	1b9b      	subs	r3, r3, r6
  403760:	9313      	str	r3, [sp, #76]	; 0x4c
  403762:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403764:	2b47      	cmp	r3, #71	; 0x47
  403766:	f43f af18 	beq.w	40359a <_svfprintf_r+0x10d6>
  40376a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40376c:	9312      	str	r3, [sp, #72]	; 0x48
  40376e:	e721      	b.n	4035b4 <_svfprintf_r+0x10f0>
  403770:	424f      	negs	r7, r1
  403772:	3110      	adds	r1, #16
  403774:	4d48      	ldr	r5, [pc, #288]	; (403898 <_svfprintf_r+0x13d4>)
  403776:	da2f      	bge.n	4037d8 <_svfprintf_r+0x1314>
  403778:	2410      	movs	r4, #16
  40377a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40377e:	e004      	b.n	40378a <_svfprintf_r+0x12c6>
  403780:	f108 0808 	add.w	r8, r8, #8
  403784:	3f10      	subs	r7, #16
  403786:	2f10      	cmp	r7, #16
  403788:	dd26      	ble.n	4037d8 <_svfprintf_r+0x1314>
  40378a:	3301      	adds	r3, #1
  40378c:	3210      	adds	r2, #16
  40378e:	2b07      	cmp	r3, #7
  403790:	9227      	str	r2, [sp, #156]	; 0x9c
  403792:	9326      	str	r3, [sp, #152]	; 0x98
  403794:	f8c8 5000 	str.w	r5, [r8]
  403798:	f8c8 4004 	str.w	r4, [r8, #4]
  40379c:	ddf0      	ble.n	403780 <_svfprintf_r+0x12bc>
  40379e:	aa25      	add	r2, sp, #148	; 0x94
  4037a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037a2:	4658      	mov	r0, fp
  4037a4:	f001 fffa 	bl	40579c <__ssprint_r>
  4037a8:	2800      	cmp	r0, #0
  4037aa:	f47e af5d 	bne.w	402668 <_svfprintf_r+0x1a4>
  4037ae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4037b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4037b2:	46c8      	mov	r8, r9
  4037b4:	e7e6      	b.n	403784 <_svfprintf_r+0x12c0>
  4037b6:	aa25      	add	r2, sp, #148	; 0x94
  4037b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037ba:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037bc:	f001 ffee 	bl	40579c <__ssprint_r>
  4037c0:	2800      	cmp	r0, #0
  4037c2:	f47e af51 	bne.w	402668 <_svfprintf_r+0x1a4>
  4037c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4037c8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4037ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4037cc:	46c8      	mov	r8, r9
  4037ce:	e667      	b.n	4034a0 <_svfprintf_r+0xfdc>
  4037d0:	2000      	movs	r0, #0
  4037d2:	900a      	str	r0, [sp, #40]	; 0x28
  4037d4:	f7fe bed0 	b.w	402578 <_svfprintf_r+0xb4>
  4037d8:	3301      	adds	r3, #1
  4037da:	443a      	add	r2, r7
  4037dc:	2b07      	cmp	r3, #7
  4037de:	e888 00a0 	stmia.w	r8, {r5, r7}
  4037e2:	9227      	str	r2, [sp, #156]	; 0x9c
  4037e4:	9326      	str	r3, [sp, #152]	; 0x98
  4037e6:	f108 0808 	add.w	r8, r8, #8
  4037ea:	f77f ae5c 	ble.w	4034a6 <_svfprintf_r+0xfe2>
  4037ee:	aa25      	add	r2, sp, #148	; 0x94
  4037f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037f2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037f4:	f001 ffd2 	bl	40579c <__ssprint_r>
  4037f8:	2800      	cmp	r0, #0
  4037fa:	f47e af35 	bne.w	402668 <_svfprintf_r+0x1a4>
  4037fe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403800:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403802:	46c8      	mov	r8, r9
  403804:	e64f      	b.n	4034a6 <_svfprintf_r+0xfe2>
  403806:	3330      	adds	r3, #48	; 0x30
  403808:	2230      	movs	r2, #48	; 0x30
  40380a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  40380e:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  403812:	ab22      	add	r3, sp, #136	; 0x88
  403814:	e70f      	b.n	403636 <_svfprintf_r+0x1172>
  403816:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403818:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40381a:	4413      	add	r3, r2
  40381c:	930e      	str	r3, [sp, #56]	; 0x38
  40381e:	e775      	b.n	40370c <_svfprintf_r+0x1248>
  403820:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  403822:	e5cb      	b.n	4033bc <_svfprintf_r+0xef8>
  403824:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403826:	4e1d      	ldr	r6, [pc, #116]	; (40389c <_svfprintf_r+0x13d8>)
  403828:	2b00      	cmp	r3, #0
  40382a:	bfb6      	itet	lt
  40382c:	272d      	movlt	r7, #45	; 0x2d
  40382e:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  403832:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  403836:	4b1a      	ldr	r3, [pc, #104]	; (4038a0 <_svfprintf_r+0x13dc>)
  403838:	f7ff ba2f 	b.w	402c9a <_svfprintf_r+0x7d6>
  40383c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40383e:	9808      	ldr	r0, [sp, #32]
  403840:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  403842:	4639      	mov	r1, r7
  403844:	f003 f83e 	bl	4068c4 <__aeabi_dcmpeq>
  403848:	2800      	cmp	r0, #0
  40384a:	f47f ae7f 	bne.w	40354c <_svfprintf_r+0x1088>
  40384e:	f1c5 0501 	rsb	r5, r5, #1
  403852:	951f      	str	r5, [sp, #124]	; 0x7c
  403854:	442c      	add	r4, r5
  403856:	e59e      	b.n	403396 <_svfprintf_r+0xed2>
  403858:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40385a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40385c:	4413      	add	r3, r2
  40385e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403860:	441a      	add	r2, r3
  403862:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403866:	920e      	str	r2, [sp, #56]	; 0x38
  403868:	9308      	str	r3, [sp, #32]
  40386a:	e5c7      	b.n	4033fc <_svfprintf_r+0xf38>
  40386c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40386e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403870:	f1c3 0301 	rsb	r3, r3, #1
  403874:	441a      	add	r2, r3
  403876:	4613      	mov	r3, r2
  403878:	e7d0      	b.n	40381c <_svfprintf_r+0x1358>
  40387a:	f01b 0301 	ands.w	r3, fp, #1
  40387e:	9312      	str	r3, [sp, #72]	; 0x48
  403880:	f47f aee2 	bne.w	403648 <_svfprintf_r+0x1184>
  403884:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403886:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40388a:	9308      	str	r3, [sp, #32]
  40388c:	e5b6      	b.n	4033fc <_svfprintf_r+0xf38>
  40388e:	bf00      	nop
  403890:	66666667 	.word	0x66666667
  403894:	00407454 	.word	0x00407454
  403898:	00407470 	.word	0x00407470
  40389c:	00407428 	.word	0x00407428
  4038a0:	00407424 	.word	0x00407424
  4038a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038a6:	b913      	cbnz	r3, 4038ae <_svfprintf_r+0x13ea>
  4038a8:	f01b 0f01 	tst.w	fp, #1
  4038ac:	d002      	beq.n	4038b4 <_svfprintf_r+0x13f0>
  4038ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
  4038b0:	3301      	adds	r3, #1
  4038b2:	e7d4      	b.n	40385e <_svfprintf_r+0x139a>
  4038b4:	2301      	movs	r3, #1
  4038b6:	e73a      	b.n	40372e <_svfprintf_r+0x126a>
  4038b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4038ba:	f89a 3001 	ldrb.w	r3, [sl, #1]
  4038be:	6828      	ldr	r0, [r5, #0]
  4038c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  4038c4:	900a      	str	r0, [sp, #40]	; 0x28
  4038c6:	4628      	mov	r0, r5
  4038c8:	3004      	adds	r0, #4
  4038ca:	46a2      	mov	sl, r4
  4038cc:	900f      	str	r0, [sp, #60]	; 0x3c
  4038ce:	f7fe be51 	b.w	402574 <_svfprintf_r+0xb0>
  4038d2:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4038d6:	f7ff b867 	b.w	4029a8 <_svfprintf_r+0x4e4>
  4038da:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4038de:	f7ff ba15 	b.w	402d0c <_svfprintf_r+0x848>
  4038e2:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  4038e6:	e6a6      	b.n	403636 <_svfprintf_r+0x1172>
  4038e8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4038ec:	f7ff b8eb 	b.w	402ac6 <_svfprintf_r+0x602>
  4038f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4038f2:	230c      	movs	r3, #12
  4038f4:	6013      	str	r3, [r2, #0]
  4038f6:	f04f 33ff 	mov.w	r3, #4294967295
  4038fa:	9309      	str	r3, [sp, #36]	; 0x24
  4038fc:	f7fe bebd 	b.w	40267a <_svfprintf_r+0x1b6>
  403900:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403904:	f7ff b99a 	b.w	402c3c <_svfprintf_r+0x778>
  403908:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40390c:	f7ff b976 	b.w	402bfc <_svfprintf_r+0x738>
  403910:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403914:	f7ff b959 	b.w	402bca <_svfprintf_r+0x706>
  403918:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40391c:	f7ff b912 	b.w	402b44 <_svfprintf_r+0x680>

00403920 <register_fini>:
  403920:	4b02      	ldr	r3, [pc, #8]	; (40392c <register_fini+0xc>)
  403922:	b113      	cbz	r3, 40392a <register_fini+0xa>
  403924:	4802      	ldr	r0, [pc, #8]	; (403930 <register_fini+0x10>)
  403926:	f000 b805 	b.w	403934 <atexit>
  40392a:	4770      	bx	lr
  40392c:	00000000 	.word	0x00000000
  403930:	004048bd 	.word	0x004048bd

00403934 <atexit>:
  403934:	2300      	movs	r3, #0
  403936:	4601      	mov	r1, r0
  403938:	461a      	mov	r2, r3
  40393a:	4618      	mov	r0, r3
  40393c:	f001 bfac 	b.w	405898 <__register_exitproc>

00403940 <quorem>:
  403940:	6902      	ldr	r2, [r0, #16]
  403942:	690b      	ldr	r3, [r1, #16]
  403944:	4293      	cmp	r3, r2
  403946:	f300 808d 	bgt.w	403a64 <quorem+0x124>
  40394a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40394e:	f103 38ff 	add.w	r8, r3, #4294967295
  403952:	f101 0714 	add.w	r7, r1, #20
  403956:	f100 0b14 	add.w	fp, r0, #20
  40395a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40395e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403962:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403966:	b083      	sub	sp, #12
  403968:	3201      	adds	r2, #1
  40396a:	fbb3 f9f2 	udiv	r9, r3, r2
  40396e:	eb0b 0304 	add.w	r3, fp, r4
  403972:	9400      	str	r4, [sp, #0]
  403974:	eb07 0a04 	add.w	sl, r7, r4
  403978:	9301      	str	r3, [sp, #4]
  40397a:	f1b9 0f00 	cmp.w	r9, #0
  40397e:	d039      	beq.n	4039f4 <quorem+0xb4>
  403980:	2500      	movs	r5, #0
  403982:	462e      	mov	r6, r5
  403984:	46bc      	mov	ip, r7
  403986:	46de      	mov	lr, fp
  403988:	f85c 4b04 	ldr.w	r4, [ip], #4
  40398c:	f8de 3000 	ldr.w	r3, [lr]
  403990:	b2a2      	uxth	r2, r4
  403992:	fb09 5502 	mla	r5, r9, r2, r5
  403996:	0c22      	lsrs	r2, r4, #16
  403998:	0c2c      	lsrs	r4, r5, #16
  40399a:	fb09 4202 	mla	r2, r9, r2, r4
  40399e:	b2ad      	uxth	r5, r5
  4039a0:	1b75      	subs	r5, r6, r5
  4039a2:	b296      	uxth	r6, r2
  4039a4:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  4039a8:	fa15 f383 	uxtah	r3, r5, r3
  4039ac:	eb06 4623 	add.w	r6, r6, r3, asr #16
  4039b0:	b29b      	uxth	r3, r3
  4039b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  4039b6:	45e2      	cmp	sl, ip
  4039b8:	ea4f 4512 	mov.w	r5, r2, lsr #16
  4039bc:	f84e 3b04 	str.w	r3, [lr], #4
  4039c0:	ea4f 4626 	mov.w	r6, r6, asr #16
  4039c4:	d2e0      	bcs.n	403988 <quorem+0x48>
  4039c6:	9b00      	ldr	r3, [sp, #0]
  4039c8:	f85b 3003 	ldr.w	r3, [fp, r3]
  4039cc:	b993      	cbnz	r3, 4039f4 <quorem+0xb4>
  4039ce:	9c01      	ldr	r4, [sp, #4]
  4039d0:	1f23      	subs	r3, r4, #4
  4039d2:	459b      	cmp	fp, r3
  4039d4:	d20c      	bcs.n	4039f0 <quorem+0xb0>
  4039d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
  4039da:	b94b      	cbnz	r3, 4039f0 <quorem+0xb0>
  4039dc:	f1a4 0308 	sub.w	r3, r4, #8
  4039e0:	e002      	b.n	4039e8 <quorem+0xa8>
  4039e2:	681a      	ldr	r2, [r3, #0]
  4039e4:	3b04      	subs	r3, #4
  4039e6:	b91a      	cbnz	r2, 4039f0 <quorem+0xb0>
  4039e8:	459b      	cmp	fp, r3
  4039ea:	f108 38ff 	add.w	r8, r8, #4294967295
  4039ee:	d3f8      	bcc.n	4039e2 <quorem+0xa2>
  4039f0:	f8c0 8010 	str.w	r8, [r0, #16]
  4039f4:	4604      	mov	r4, r0
  4039f6:	f001 fd37 	bl	405468 <__mcmp>
  4039fa:	2800      	cmp	r0, #0
  4039fc:	db2e      	blt.n	403a5c <quorem+0x11c>
  4039fe:	f109 0901 	add.w	r9, r9, #1
  403a02:	465d      	mov	r5, fp
  403a04:	2300      	movs	r3, #0
  403a06:	f857 1b04 	ldr.w	r1, [r7], #4
  403a0a:	6828      	ldr	r0, [r5, #0]
  403a0c:	b28a      	uxth	r2, r1
  403a0e:	1a9a      	subs	r2, r3, r2
  403a10:	0c0b      	lsrs	r3, r1, #16
  403a12:	fa12 f280 	uxtah	r2, r2, r0
  403a16:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  403a1a:	eb03 4322 	add.w	r3, r3, r2, asr #16
  403a1e:	b292      	uxth	r2, r2
  403a20:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  403a24:	45ba      	cmp	sl, r7
  403a26:	f845 2b04 	str.w	r2, [r5], #4
  403a2a:	ea4f 4323 	mov.w	r3, r3, asr #16
  403a2e:	d2ea      	bcs.n	403a06 <quorem+0xc6>
  403a30:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  403a34:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  403a38:	b982      	cbnz	r2, 403a5c <quorem+0x11c>
  403a3a:	1f1a      	subs	r2, r3, #4
  403a3c:	4593      	cmp	fp, r2
  403a3e:	d20b      	bcs.n	403a58 <quorem+0x118>
  403a40:	f853 2c04 	ldr.w	r2, [r3, #-4]
  403a44:	b942      	cbnz	r2, 403a58 <quorem+0x118>
  403a46:	3b08      	subs	r3, #8
  403a48:	e002      	b.n	403a50 <quorem+0x110>
  403a4a:	681a      	ldr	r2, [r3, #0]
  403a4c:	3b04      	subs	r3, #4
  403a4e:	b91a      	cbnz	r2, 403a58 <quorem+0x118>
  403a50:	459b      	cmp	fp, r3
  403a52:	f108 38ff 	add.w	r8, r8, #4294967295
  403a56:	d3f8      	bcc.n	403a4a <quorem+0x10a>
  403a58:	f8c4 8010 	str.w	r8, [r4, #16]
  403a5c:	4648      	mov	r0, r9
  403a5e:	b003      	add	sp, #12
  403a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403a64:	2000      	movs	r0, #0
  403a66:	4770      	bx	lr

00403a68 <_dtoa_r>:
  403a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  403a6e:	b09b      	sub	sp, #108	; 0x6c
  403a70:	4604      	mov	r4, r0
  403a72:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  403a74:	4692      	mov	sl, r2
  403a76:	469b      	mov	fp, r3
  403a78:	b141      	cbz	r1, 403a8c <_dtoa_r+0x24>
  403a7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  403a7c:	604a      	str	r2, [r1, #4]
  403a7e:	2301      	movs	r3, #1
  403a80:	4093      	lsls	r3, r2
  403a82:	608b      	str	r3, [r1, #8]
  403a84:	f001 fb18 	bl	4050b8 <_Bfree>
  403a88:	2300      	movs	r3, #0
  403a8a:	6423      	str	r3, [r4, #64]	; 0x40
  403a8c:	f1bb 0f00 	cmp.w	fp, #0
  403a90:	465d      	mov	r5, fp
  403a92:	db35      	blt.n	403b00 <_dtoa_r+0x98>
  403a94:	2300      	movs	r3, #0
  403a96:	6033      	str	r3, [r6, #0]
  403a98:	4b9d      	ldr	r3, [pc, #628]	; (403d10 <_dtoa_r+0x2a8>)
  403a9a:	43ab      	bics	r3, r5
  403a9c:	d015      	beq.n	403aca <_dtoa_r+0x62>
  403a9e:	4650      	mov	r0, sl
  403aa0:	4659      	mov	r1, fp
  403aa2:	2200      	movs	r2, #0
  403aa4:	2300      	movs	r3, #0
  403aa6:	f002 ff0d 	bl	4068c4 <__aeabi_dcmpeq>
  403aaa:	4680      	mov	r8, r0
  403aac:	2800      	cmp	r0, #0
  403aae:	d02d      	beq.n	403b0c <_dtoa_r+0xa4>
  403ab0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403ab2:	2301      	movs	r3, #1
  403ab4:	6013      	str	r3, [r2, #0]
  403ab6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403ab8:	2b00      	cmp	r3, #0
  403aba:	f000 80bd 	beq.w	403c38 <_dtoa_r+0x1d0>
  403abe:	4895      	ldr	r0, [pc, #596]	; (403d14 <_dtoa_r+0x2ac>)
  403ac0:	6018      	str	r0, [r3, #0]
  403ac2:	3801      	subs	r0, #1
  403ac4:	b01b      	add	sp, #108	; 0x6c
  403ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403aca:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403acc:	f242 730f 	movw	r3, #9999	; 0x270f
  403ad0:	6013      	str	r3, [r2, #0]
  403ad2:	f1ba 0f00 	cmp.w	sl, #0
  403ad6:	d10d      	bne.n	403af4 <_dtoa_r+0x8c>
  403ad8:	f3c5 0513 	ubfx	r5, r5, #0, #20
  403adc:	b955      	cbnz	r5, 403af4 <_dtoa_r+0x8c>
  403ade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403ae0:	488d      	ldr	r0, [pc, #564]	; (403d18 <_dtoa_r+0x2b0>)
  403ae2:	2b00      	cmp	r3, #0
  403ae4:	d0ee      	beq.n	403ac4 <_dtoa_r+0x5c>
  403ae6:	f100 0308 	add.w	r3, r0, #8
  403aea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  403aec:	6013      	str	r3, [r2, #0]
  403aee:	b01b      	add	sp, #108	; 0x6c
  403af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403af4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403af6:	4889      	ldr	r0, [pc, #548]	; (403d1c <_dtoa_r+0x2b4>)
  403af8:	2b00      	cmp	r3, #0
  403afa:	d0e3      	beq.n	403ac4 <_dtoa_r+0x5c>
  403afc:	1cc3      	adds	r3, r0, #3
  403afe:	e7f4      	b.n	403aea <_dtoa_r+0x82>
  403b00:	2301      	movs	r3, #1
  403b02:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  403b06:	6033      	str	r3, [r6, #0]
  403b08:	46ab      	mov	fp, r5
  403b0a:	e7c5      	b.n	403a98 <_dtoa_r+0x30>
  403b0c:	aa18      	add	r2, sp, #96	; 0x60
  403b0e:	ab19      	add	r3, sp, #100	; 0x64
  403b10:	9201      	str	r2, [sp, #4]
  403b12:	9300      	str	r3, [sp, #0]
  403b14:	4652      	mov	r2, sl
  403b16:	465b      	mov	r3, fp
  403b18:	4620      	mov	r0, r4
  403b1a:	f001 fd45 	bl	4055a8 <__d2b>
  403b1e:	0d2b      	lsrs	r3, r5, #20
  403b20:	4681      	mov	r9, r0
  403b22:	d071      	beq.n	403c08 <_dtoa_r+0x1a0>
  403b24:	f3cb 0213 	ubfx	r2, fp, #0, #20
  403b28:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  403b2c:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403b2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  403b32:	4650      	mov	r0, sl
  403b34:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  403b38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  403b3c:	2200      	movs	r2, #0
  403b3e:	4b78      	ldr	r3, [pc, #480]	; (403d20 <_dtoa_r+0x2b8>)
  403b40:	f002 faa4 	bl	40608c <__aeabi_dsub>
  403b44:	a36c      	add	r3, pc, #432	; (adr r3, 403cf8 <_dtoa_r+0x290>)
  403b46:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b4a:	f002 fc53 	bl	4063f4 <__aeabi_dmul>
  403b4e:	a36c      	add	r3, pc, #432	; (adr r3, 403d00 <_dtoa_r+0x298>)
  403b50:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b54:	f002 fa9c 	bl	406090 <__adddf3>
  403b58:	e9cd 0102 	strd	r0, r1, [sp, #8]
  403b5c:	4630      	mov	r0, r6
  403b5e:	f002 fbe3 	bl	406328 <__aeabi_i2d>
  403b62:	a369      	add	r3, pc, #420	; (adr r3, 403d08 <_dtoa_r+0x2a0>)
  403b64:	e9d3 2300 	ldrd	r2, r3, [r3]
  403b68:	f002 fc44 	bl	4063f4 <__aeabi_dmul>
  403b6c:	4602      	mov	r2, r0
  403b6e:	460b      	mov	r3, r1
  403b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403b74:	f002 fa8c 	bl	406090 <__adddf3>
  403b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
  403b7c:	f002 feea 	bl	406954 <__aeabi_d2iz>
  403b80:	2200      	movs	r2, #0
  403b82:	9002      	str	r0, [sp, #8]
  403b84:	2300      	movs	r3, #0
  403b86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403b8a:	f002 fea5 	bl	4068d8 <__aeabi_dcmplt>
  403b8e:	2800      	cmp	r0, #0
  403b90:	f040 8173 	bne.w	403e7a <_dtoa_r+0x412>
  403b94:	9d02      	ldr	r5, [sp, #8]
  403b96:	2d16      	cmp	r5, #22
  403b98:	f200 815d 	bhi.w	403e56 <_dtoa_r+0x3ee>
  403b9c:	4b61      	ldr	r3, [pc, #388]	; (403d24 <_dtoa_r+0x2bc>)
  403b9e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  403ba2:	e9d3 0100 	ldrd	r0, r1, [r3]
  403ba6:	4652      	mov	r2, sl
  403ba8:	465b      	mov	r3, fp
  403baa:	f002 feb3 	bl	406914 <__aeabi_dcmpgt>
  403bae:	2800      	cmp	r0, #0
  403bb0:	f000 81c5 	beq.w	403f3e <_dtoa_r+0x4d6>
  403bb4:	1e6b      	subs	r3, r5, #1
  403bb6:	9302      	str	r3, [sp, #8]
  403bb8:	2300      	movs	r3, #0
  403bba:	930e      	str	r3, [sp, #56]	; 0x38
  403bbc:	1bbf      	subs	r7, r7, r6
  403bbe:	1e7b      	subs	r3, r7, #1
  403bc0:	9306      	str	r3, [sp, #24]
  403bc2:	f100 8154 	bmi.w	403e6e <_dtoa_r+0x406>
  403bc6:	2300      	movs	r3, #0
  403bc8:	9308      	str	r3, [sp, #32]
  403bca:	9b02      	ldr	r3, [sp, #8]
  403bcc:	2b00      	cmp	r3, #0
  403bce:	f2c0 8145 	blt.w	403e5c <_dtoa_r+0x3f4>
  403bd2:	9a06      	ldr	r2, [sp, #24]
  403bd4:	930d      	str	r3, [sp, #52]	; 0x34
  403bd6:	4611      	mov	r1, r2
  403bd8:	4419      	add	r1, r3
  403bda:	2300      	movs	r3, #0
  403bdc:	9106      	str	r1, [sp, #24]
  403bde:	930c      	str	r3, [sp, #48]	; 0x30
  403be0:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403be2:	2b09      	cmp	r3, #9
  403be4:	d82a      	bhi.n	403c3c <_dtoa_r+0x1d4>
  403be6:	2b05      	cmp	r3, #5
  403be8:	f340 865b 	ble.w	4048a2 <_dtoa_r+0xe3a>
  403bec:	3b04      	subs	r3, #4
  403bee:	9324      	str	r3, [sp, #144]	; 0x90
  403bf0:	2500      	movs	r5, #0
  403bf2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403bf4:	3b02      	subs	r3, #2
  403bf6:	2b03      	cmp	r3, #3
  403bf8:	f200 8642 	bhi.w	404880 <_dtoa_r+0xe18>
  403bfc:	e8df f013 	tbh	[pc, r3, lsl #1]
  403c00:	02c903d4 	.word	0x02c903d4
  403c04:	046103df 	.word	0x046103df
  403c08:	9f18      	ldr	r7, [sp, #96]	; 0x60
  403c0a:	9e19      	ldr	r6, [sp, #100]	; 0x64
  403c0c:	443e      	add	r6, r7
  403c0e:	f206 4332 	addw	r3, r6, #1074	; 0x432
  403c12:	2b20      	cmp	r3, #32
  403c14:	f340 818e 	ble.w	403f34 <_dtoa_r+0x4cc>
  403c18:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  403c1c:	f206 4012 	addw	r0, r6, #1042	; 0x412
  403c20:	409d      	lsls	r5, r3
  403c22:	fa2a f000 	lsr.w	r0, sl, r0
  403c26:	4328      	orrs	r0, r5
  403c28:	f002 fb6e 	bl	406308 <__aeabi_ui2d>
  403c2c:	2301      	movs	r3, #1
  403c2e:	3e01      	subs	r6, #1
  403c30:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  403c34:	9314      	str	r3, [sp, #80]	; 0x50
  403c36:	e781      	b.n	403b3c <_dtoa_r+0xd4>
  403c38:	483b      	ldr	r0, [pc, #236]	; (403d28 <_dtoa_r+0x2c0>)
  403c3a:	e743      	b.n	403ac4 <_dtoa_r+0x5c>
  403c3c:	2100      	movs	r1, #0
  403c3e:	6461      	str	r1, [r4, #68]	; 0x44
  403c40:	4620      	mov	r0, r4
  403c42:	9125      	str	r1, [sp, #148]	; 0x94
  403c44:	f001 fa12 	bl	40506c <_Balloc>
  403c48:	f04f 33ff 	mov.w	r3, #4294967295
  403c4c:	930a      	str	r3, [sp, #40]	; 0x28
  403c4e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403c50:	930f      	str	r3, [sp, #60]	; 0x3c
  403c52:	2301      	movs	r3, #1
  403c54:	9004      	str	r0, [sp, #16]
  403c56:	6420      	str	r0, [r4, #64]	; 0x40
  403c58:	9224      	str	r2, [sp, #144]	; 0x90
  403c5a:	930b      	str	r3, [sp, #44]	; 0x2c
  403c5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403c5e:	2b00      	cmp	r3, #0
  403c60:	f2c0 80d9 	blt.w	403e16 <_dtoa_r+0x3ae>
  403c64:	9a02      	ldr	r2, [sp, #8]
  403c66:	2a0e      	cmp	r2, #14
  403c68:	f300 80d5 	bgt.w	403e16 <_dtoa_r+0x3ae>
  403c6c:	4b2d      	ldr	r3, [pc, #180]	; (403d24 <_dtoa_r+0x2bc>)
  403c6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403c72:	e9d3 2300 	ldrd	r2, r3, [r3]
  403c76:	e9cd 2308 	strd	r2, r3, [sp, #32]
  403c7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403c7c:	2b00      	cmp	r3, #0
  403c7e:	f2c0 83ba 	blt.w	4043f6 <_dtoa_r+0x98e>
  403c82:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  403c86:	4650      	mov	r0, sl
  403c88:	462a      	mov	r2, r5
  403c8a:	4633      	mov	r3, r6
  403c8c:	4659      	mov	r1, fp
  403c8e:	f002 fcdb 	bl	406648 <__aeabi_ddiv>
  403c92:	f002 fe5f 	bl	406954 <__aeabi_d2iz>
  403c96:	4680      	mov	r8, r0
  403c98:	f002 fb46 	bl	406328 <__aeabi_i2d>
  403c9c:	462a      	mov	r2, r5
  403c9e:	4633      	mov	r3, r6
  403ca0:	f002 fba8 	bl	4063f4 <__aeabi_dmul>
  403ca4:	460b      	mov	r3, r1
  403ca6:	4602      	mov	r2, r0
  403ca8:	4659      	mov	r1, fp
  403caa:	4650      	mov	r0, sl
  403cac:	f002 f9ee 	bl	40608c <__aeabi_dsub>
  403cb0:	9d04      	ldr	r5, [sp, #16]
  403cb2:	f108 0330 	add.w	r3, r8, #48	; 0x30
  403cb6:	702b      	strb	r3, [r5, #0]
  403cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403cba:	2b01      	cmp	r3, #1
  403cbc:	4606      	mov	r6, r0
  403cbe:	460f      	mov	r7, r1
  403cc0:	f105 0501 	add.w	r5, r5, #1
  403cc4:	d068      	beq.n	403d98 <_dtoa_r+0x330>
  403cc6:	2200      	movs	r2, #0
  403cc8:	4b18      	ldr	r3, [pc, #96]	; (403d2c <_dtoa_r+0x2c4>)
  403cca:	f002 fb93 	bl	4063f4 <__aeabi_dmul>
  403cce:	2200      	movs	r2, #0
  403cd0:	2300      	movs	r3, #0
  403cd2:	4606      	mov	r6, r0
  403cd4:	460f      	mov	r7, r1
  403cd6:	f002 fdf5 	bl	4068c4 <__aeabi_dcmpeq>
  403cda:	2800      	cmp	r0, #0
  403cdc:	f040 8088 	bne.w	403df0 <_dtoa_r+0x388>
  403ce0:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  403ce4:	f04f 0a00 	mov.w	sl, #0
  403ce8:	f8df b040 	ldr.w	fp, [pc, #64]	; 403d2c <_dtoa_r+0x2c4>
  403cec:	940c      	str	r4, [sp, #48]	; 0x30
  403cee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  403cf2:	e028      	b.n	403d46 <_dtoa_r+0x2de>
  403cf4:	f3af 8000 	nop.w
  403cf8:	636f4361 	.word	0x636f4361
  403cfc:	3fd287a7 	.word	0x3fd287a7
  403d00:	8b60c8b3 	.word	0x8b60c8b3
  403d04:	3fc68a28 	.word	0x3fc68a28
  403d08:	509f79fb 	.word	0x509f79fb
  403d0c:	3fd34413 	.word	0x3fd34413
  403d10:	7ff00000 	.word	0x7ff00000
  403d14:	0040745d 	.word	0x0040745d
  403d18:	00407480 	.word	0x00407480
  403d1c:	0040748c 	.word	0x0040748c
  403d20:	3ff80000 	.word	0x3ff80000
  403d24:	004074b8 	.word	0x004074b8
  403d28:	0040745c 	.word	0x0040745c
  403d2c:	40240000 	.word	0x40240000
  403d30:	f002 fb60 	bl	4063f4 <__aeabi_dmul>
  403d34:	2200      	movs	r2, #0
  403d36:	2300      	movs	r3, #0
  403d38:	4606      	mov	r6, r0
  403d3a:	460f      	mov	r7, r1
  403d3c:	f002 fdc2 	bl	4068c4 <__aeabi_dcmpeq>
  403d40:	2800      	cmp	r0, #0
  403d42:	f040 83c1 	bne.w	4044c8 <_dtoa_r+0xa60>
  403d46:	4642      	mov	r2, r8
  403d48:	464b      	mov	r3, r9
  403d4a:	4630      	mov	r0, r6
  403d4c:	4639      	mov	r1, r7
  403d4e:	f002 fc7b 	bl	406648 <__aeabi_ddiv>
  403d52:	f002 fdff 	bl	406954 <__aeabi_d2iz>
  403d56:	4604      	mov	r4, r0
  403d58:	f002 fae6 	bl	406328 <__aeabi_i2d>
  403d5c:	4642      	mov	r2, r8
  403d5e:	464b      	mov	r3, r9
  403d60:	f002 fb48 	bl	4063f4 <__aeabi_dmul>
  403d64:	4602      	mov	r2, r0
  403d66:	460b      	mov	r3, r1
  403d68:	4630      	mov	r0, r6
  403d6a:	4639      	mov	r1, r7
  403d6c:	f002 f98e 	bl	40608c <__aeabi_dsub>
  403d70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403d74:	9e04      	ldr	r6, [sp, #16]
  403d76:	f805 eb01 	strb.w	lr, [r5], #1
  403d7a:	eba5 0e06 	sub.w	lr, r5, r6
  403d7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403d80:	45b6      	cmp	lr, r6
  403d82:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403d86:	4652      	mov	r2, sl
  403d88:	465b      	mov	r3, fp
  403d8a:	d1d1      	bne.n	403d30 <_dtoa_r+0x2c8>
  403d8c:	46a0      	mov	r8, r4
  403d8e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403d92:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403d94:	4606      	mov	r6, r0
  403d96:	460f      	mov	r7, r1
  403d98:	4632      	mov	r2, r6
  403d9a:	463b      	mov	r3, r7
  403d9c:	4630      	mov	r0, r6
  403d9e:	4639      	mov	r1, r7
  403da0:	f002 f976 	bl	406090 <__adddf3>
  403da4:	4606      	mov	r6, r0
  403da6:	460f      	mov	r7, r1
  403da8:	4602      	mov	r2, r0
  403daa:	460b      	mov	r3, r1
  403dac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403db0:	f002 fd92 	bl	4068d8 <__aeabi_dcmplt>
  403db4:	b948      	cbnz	r0, 403dca <_dtoa_r+0x362>
  403db6:	4632      	mov	r2, r6
  403db8:	463b      	mov	r3, r7
  403dba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403dbe:	f002 fd81 	bl	4068c4 <__aeabi_dcmpeq>
  403dc2:	b1a8      	cbz	r0, 403df0 <_dtoa_r+0x388>
  403dc4:	f018 0f01 	tst.w	r8, #1
  403dc8:	d012      	beq.n	403df0 <_dtoa_r+0x388>
  403dca:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  403dce:	9a04      	ldr	r2, [sp, #16]
  403dd0:	1e6b      	subs	r3, r5, #1
  403dd2:	e004      	b.n	403dde <_dtoa_r+0x376>
  403dd4:	429a      	cmp	r2, r3
  403dd6:	f000 8401 	beq.w	4045dc <_dtoa_r+0xb74>
  403dda:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  403dde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403de2:	f103 0501 	add.w	r5, r3, #1
  403de6:	d0f5      	beq.n	403dd4 <_dtoa_r+0x36c>
  403de8:	f108 0801 	add.w	r8, r8, #1
  403dec:	f883 8000 	strb.w	r8, [r3]
  403df0:	4649      	mov	r1, r9
  403df2:	4620      	mov	r0, r4
  403df4:	f001 f960 	bl	4050b8 <_Bfree>
  403df8:	2200      	movs	r2, #0
  403dfa:	9b02      	ldr	r3, [sp, #8]
  403dfc:	702a      	strb	r2, [r5, #0]
  403dfe:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403e00:	3301      	adds	r3, #1
  403e02:	6013      	str	r3, [r2, #0]
  403e04:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403e06:	2b00      	cmp	r3, #0
  403e08:	f000 839e 	beq.w	404548 <_dtoa_r+0xae0>
  403e0c:	9804      	ldr	r0, [sp, #16]
  403e0e:	601d      	str	r5, [r3, #0]
  403e10:	b01b      	add	sp, #108	; 0x6c
  403e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403e16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403e18:	2a00      	cmp	r2, #0
  403e1a:	d03e      	beq.n	403e9a <_dtoa_r+0x432>
  403e1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403e1e:	2a01      	cmp	r2, #1
  403e20:	f340 8311 	ble.w	404446 <_dtoa_r+0x9de>
  403e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403e28:	1e5f      	subs	r7, r3, #1
  403e2a:	42ba      	cmp	r2, r7
  403e2c:	f2c0 838f 	blt.w	40454e <_dtoa_r+0xae6>
  403e30:	1bd7      	subs	r7, r2, r7
  403e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e34:	2b00      	cmp	r3, #0
  403e36:	f2c0 848b 	blt.w	404750 <_dtoa_r+0xce8>
  403e3a:	9d08      	ldr	r5, [sp, #32]
  403e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403e3e:	9a08      	ldr	r2, [sp, #32]
  403e40:	441a      	add	r2, r3
  403e42:	9208      	str	r2, [sp, #32]
  403e44:	9a06      	ldr	r2, [sp, #24]
  403e46:	2101      	movs	r1, #1
  403e48:	441a      	add	r2, r3
  403e4a:	4620      	mov	r0, r4
  403e4c:	9206      	str	r2, [sp, #24]
  403e4e:	f001 f9cd 	bl	4051ec <__i2b>
  403e52:	4606      	mov	r6, r0
  403e54:	e024      	b.n	403ea0 <_dtoa_r+0x438>
  403e56:	2301      	movs	r3, #1
  403e58:	930e      	str	r3, [sp, #56]	; 0x38
  403e5a:	e6af      	b.n	403bbc <_dtoa_r+0x154>
  403e5c:	9a08      	ldr	r2, [sp, #32]
  403e5e:	9b02      	ldr	r3, [sp, #8]
  403e60:	1ad2      	subs	r2, r2, r3
  403e62:	425b      	negs	r3, r3
  403e64:	930c      	str	r3, [sp, #48]	; 0x30
  403e66:	2300      	movs	r3, #0
  403e68:	9208      	str	r2, [sp, #32]
  403e6a:	930d      	str	r3, [sp, #52]	; 0x34
  403e6c:	e6b8      	b.n	403be0 <_dtoa_r+0x178>
  403e6e:	f1c7 0301 	rsb	r3, r7, #1
  403e72:	9308      	str	r3, [sp, #32]
  403e74:	2300      	movs	r3, #0
  403e76:	9306      	str	r3, [sp, #24]
  403e78:	e6a7      	b.n	403bca <_dtoa_r+0x162>
  403e7a:	9d02      	ldr	r5, [sp, #8]
  403e7c:	4628      	mov	r0, r5
  403e7e:	f002 fa53 	bl	406328 <__aeabi_i2d>
  403e82:	4602      	mov	r2, r0
  403e84:	460b      	mov	r3, r1
  403e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  403e8a:	f002 fd1b 	bl	4068c4 <__aeabi_dcmpeq>
  403e8e:	2800      	cmp	r0, #0
  403e90:	f47f ae80 	bne.w	403b94 <_dtoa_r+0x12c>
  403e94:	1e6b      	subs	r3, r5, #1
  403e96:	9302      	str	r3, [sp, #8]
  403e98:	e67c      	b.n	403b94 <_dtoa_r+0x12c>
  403e9a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403e9c:	9d08      	ldr	r5, [sp, #32]
  403e9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403ea0:	2d00      	cmp	r5, #0
  403ea2:	dd0c      	ble.n	403ebe <_dtoa_r+0x456>
  403ea4:	9906      	ldr	r1, [sp, #24]
  403ea6:	2900      	cmp	r1, #0
  403ea8:	460b      	mov	r3, r1
  403eaa:	dd08      	ble.n	403ebe <_dtoa_r+0x456>
  403eac:	42a9      	cmp	r1, r5
  403eae:	9a08      	ldr	r2, [sp, #32]
  403eb0:	bfa8      	it	ge
  403eb2:	462b      	movge	r3, r5
  403eb4:	1ad2      	subs	r2, r2, r3
  403eb6:	1aed      	subs	r5, r5, r3
  403eb8:	1acb      	subs	r3, r1, r3
  403eba:	9208      	str	r2, [sp, #32]
  403ebc:	9306      	str	r3, [sp, #24]
  403ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403ec0:	b1d3      	cbz	r3, 403ef8 <_dtoa_r+0x490>
  403ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403ec4:	2b00      	cmp	r3, #0
  403ec6:	f000 82b7 	beq.w	404438 <_dtoa_r+0x9d0>
  403eca:	2f00      	cmp	r7, #0
  403ecc:	dd10      	ble.n	403ef0 <_dtoa_r+0x488>
  403ece:	4631      	mov	r1, r6
  403ed0:	463a      	mov	r2, r7
  403ed2:	4620      	mov	r0, r4
  403ed4:	f001 fa26 	bl	405324 <__pow5mult>
  403ed8:	464a      	mov	r2, r9
  403eda:	4601      	mov	r1, r0
  403edc:	4606      	mov	r6, r0
  403ede:	4620      	mov	r0, r4
  403ee0:	f001 f98e 	bl	405200 <__multiply>
  403ee4:	4649      	mov	r1, r9
  403ee6:	4680      	mov	r8, r0
  403ee8:	4620      	mov	r0, r4
  403eea:	f001 f8e5 	bl	4050b8 <_Bfree>
  403eee:	46c1      	mov	r9, r8
  403ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403ef2:	1bda      	subs	r2, r3, r7
  403ef4:	f040 82a1 	bne.w	40443a <_dtoa_r+0x9d2>
  403ef8:	2101      	movs	r1, #1
  403efa:	4620      	mov	r0, r4
  403efc:	f001 f976 	bl	4051ec <__i2b>
  403f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f02:	2b00      	cmp	r3, #0
  403f04:	4680      	mov	r8, r0
  403f06:	dd1c      	ble.n	403f42 <_dtoa_r+0x4da>
  403f08:	4601      	mov	r1, r0
  403f0a:	461a      	mov	r2, r3
  403f0c:	4620      	mov	r0, r4
  403f0e:	f001 fa09 	bl	405324 <__pow5mult>
  403f12:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f14:	2b01      	cmp	r3, #1
  403f16:	4680      	mov	r8, r0
  403f18:	f340 8254 	ble.w	4043c4 <_dtoa_r+0x95c>
  403f1c:	2300      	movs	r3, #0
  403f1e:	930c      	str	r3, [sp, #48]	; 0x30
  403f20:	f8d8 3010 	ldr.w	r3, [r8, #16]
  403f24:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  403f28:	6918      	ldr	r0, [r3, #16]
  403f2a:	f001 f90f 	bl	40514c <__hi0bits>
  403f2e:	f1c0 0020 	rsb	r0, r0, #32
  403f32:	e010      	b.n	403f56 <_dtoa_r+0x4ee>
  403f34:	f1c3 0520 	rsb	r5, r3, #32
  403f38:	fa0a f005 	lsl.w	r0, sl, r5
  403f3c:	e674      	b.n	403c28 <_dtoa_r+0x1c0>
  403f3e:	900e      	str	r0, [sp, #56]	; 0x38
  403f40:	e63c      	b.n	403bbc <_dtoa_r+0x154>
  403f42:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f44:	2b01      	cmp	r3, #1
  403f46:	f340 8287 	ble.w	404458 <_dtoa_r+0x9f0>
  403f4a:	2300      	movs	r3, #0
  403f4c:	930c      	str	r3, [sp, #48]	; 0x30
  403f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f50:	2001      	movs	r0, #1
  403f52:	2b00      	cmp	r3, #0
  403f54:	d1e4      	bne.n	403f20 <_dtoa_r+0x4b8>
  403f56:	9a06      	ldr	r2, [sp, #24]
  403f58:	4410      	add	r0, r2
  403f5a:	f010 001f 	ands.w	r0, r0, #31
  403f5e:	f000 80a1 	beq.w	4040a4 <_dtoa_r+0x63c>
  403f62:	f1c0 0320 	rsb	r3, r0, #32
  403f66:	2b04      	cmp	r3, #4
  403f68:	f340 849e 	ble.w	4048a8 <_dtoa_r+0xe40>
  403f6c:	9b08      	ldr	r3, [sp, #32]
  403f6e:	f1c0 001c 	rsb	r0, r0, #28
  403f72:	4403      	add	r3, r0
  403f74:	9308      	str	r3, [sp, #32]
  403f76:	4613      	mov	r3, r2
  403f78:	4403      	add	r3, r0
  403f7a:	4405      	add	r5, r0
  403f7c:	9306      	str	r3, [sp, #24]
  403f7e:	9b08      	ldr	r3, [sp, #32]
  403f80:	2b00      	cmp	r3, #0
  403f82:	dd05      	ble.n	403f90 <_dtoa_r+0x528>
  403f84:	4649      	mov	r1, r9
  403f86:	461a      	mov	r2, r3
  403f88:	4620      	mov	r0, r4
  403f8a:	f001 fa1b 	bl	4053c4 <__lshift>
  403f8e:	4681      	mov	r9, r0
  403f90:	9b06      	ldr	r3, [sp, #24]
  403f92:	2b00      	cmp	r3, #0
  403f94:	dd05      	ble.n	403fa2 <_dtoa_r+0x53a>
  403f96:	4641      	mov	r1, r8
  403f98:	461a      	mov	r2, r3
  403f9a:	4620      	mov	r0, r4
  403f9c:	f001 fa12 	bl	4053c4 <__lshift>
  403fa0:	4680      	mov	r8, r0
  403fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403fa4:	2b00      	cmp	r3, #0
  403fa6:	f040 8086 	bne.w	4040b6 <_dtoa_r+0x64e>
  403faa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403fac:	2b00      	cmp	r3, #0
  403fae:	f340 8266 	ble.w	40447e <_dtoa_r+0xa16>
  403fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403fb4:	2b00      	cmp	r3, #0
  403fb6:	f000 8098 	beq.w	4040ea <_dtoa_r+0x682>
  403fba:	2d00      	cmp	r5, #0
  403fbc:	dd05      	ble.n	403fca <_dtoa_r+0x562>
  403fbe:	4631      	mov	r1, r6
  403fc0:	462a      	mov	r2, r5
  403fc2:	4620      	mov	r0, r4
  403fc4:	f001 f9fe 	bl	4053c4 <__lshift>
  403fc8:	4606      	mov	r6, r0
  403fca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403fcc:	2b00      	cmp	r3, #0
  403fce:	f040 8337 	bne.w	404640 <_dtoa_r+0xbd8>
  403fd2:	9606      	str	r6, [sp, #24]
  403fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403fd6:	9a04      	ldr	r2, [sp, #16]
  403fd8:	f8dd b018 	ldr.w	fp, [sp, #24]
  403fdc:	3b01      	subs	r3, #1
  403fde:	18d3      	adds	r3, r2, r3
  403fe0:	930b      	str	r3, [sp, #44]	; 0x2c
  403fe2:	f00a 0301 	and.w	r3, sl, #1
  403fe6:	930c      	str	r3, [sp, #48]	; 0x30
  403fe8:	4617      	mov	r7, r2
  403fea:	46c2      	mov	sl, r8
  403fec:	4651      	mov	r1, sl
  403fee:	4648      	mov	r0, r9
  403ff0:	f7ff fca6 	bl	403940 <quorem>
  403ff4:	4631      	mov	r1, r6
  403ff6:	4605      	mov	r5, r0
  403ff8:	4648      	mov	r0, r9
  403ffa:	f001 fa35 	bl	405468 <__mcmp>
  403ffe:	465a      	mov	r2, fp
  404000:	900a      	str	r0, [sp, #40]	; 0x28
  404002:	4651      	mov	r1, sl
  404004:	4620      	mov	r0, r4
  404006:	f001 fa4b 	bl	4054a0 <__mdiff>
  40400a:	68c2      	ldr	r2, [r0, #12]
  40400c:	4680      	mov	r8, r0
  40400e:	f105 0330 	add.w	r3, r5, #48	; 0x30
  404012:	2a00      	cmp	r2, #0
  404014:	f040 822b 	bne.w	40446e <_dtoa_r+0xa06>
  404018:	4601      	mov	r1, r0
  40401a:	4648      	mov	r0, r9
  40401c:	9308      	str	r3, [sp, #32]
  40401e:	f001 fa23 	bl	405468 <__mcmp>
  404022:	4641      	mov	r1, r8
  404024:	9006      	str	r0, [sp, #24]
  404026:	4620      	mov	r0, r4
  404028:	f001 f846 	bl	4050b8 <_Bfree>
  40402c:	9a06      	ldr	r2, [sp, #24]
  40402e:	9b08      	ldr	r3, [sp, #32]
  404030:	b932      	cbnz	r2, 404040 <_dtoa_r+0x5d8>
  404032:	9924      	ldr	r1, [sp, #144]	; 0x90
  404034:	b921      	cbnz	r1, 404040 <_dtoa_r+0x5d8>
  404036:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404038:	2a00      	cmp	r2, #0
  40403a:	f000 83ef 	beq.w	40481c <_dtoa_r+0xdb4>
  40403e:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404040:	990a      	ldr	r1, [sp, #40]	; 0x28
  404042:	2900      	cmp	r1, #0
  404044:	f2c0 829f 	blt.w	404586 <_dtoa_r+0xb1e>
  404048:	d105      	bne.n	404056 <_dtoa_r+0x5ee>
  40404a:	9924      	ldr	r1, [sp, #144]	; 0x90
  40404c:	b919      	cbnz	r1, 404056 <_dtoa_r+0x5ee>
  40404e:	990c      	ldr	r1, [sp, #48]	; 0x30
  404050:	2900      	cmp	r1, #0
  404052:	f000 8298 	beq.w	404586 <_dtoa_r+0xb1e>
  404056:	2a00      	cmp	r2, #0
  404058:	f300 8306 	bgt.w	404668 <_dtoa_r+0xc00>
  40405c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  40405e:	703b      	strb	r3, [r7, #0]
  404060:	f107 0801 	add.w	r8, r7, #1
  404064:	4297      	cmp	r7, r2
  404066:	4645      	mov	r5, r8
  404068:	f000 830c 	beq.w	404684 <_dtoa_r+0xc1c>
  40406c:	4649      	mov	r1, r9
  40406e:	2300      	movs	r3, #0
  404070:	220a      	movs	r2, #10
  404072:	4620      	mov	r0, r4
  404074:	f001 f82a 	bl	4050cc <__multadd>
  404078:	455e      	cmp	r6, fp
  40407a:	4681      	mov	r9, r0
  40407c:	4631      	mov	r1, r6
  40407e:	f04f 0300 	mov.w	r3, #0
  404082:	f04f 020a 	mov.w	r2, #10
  404086:	4620      	mov	r0, r4
  404088:	f000 81eb 	beq.w	404462 <_dtoa_r+0x9fa>
  40408c:	f001 f81e 	bl	4050cc <__multadd>
  404090:	4659      	mov	r1, fp
  404092:	4606      	mov	r6, r0
  404094:	2300      	movs	r3, #0
  404096:	220a      	movs	r2, #10
  404098:	4620      	mov	r0, r4
  40409a:	f001 f817 	bl	4050cc <__multadd>
  40409e:	4647      	mov	r7, r8
  4040a0:	4683      	mov	fp, r0
  4040a2:	e7a3      	b.n	403fec <_dtoa_r+0x584>
  4040a4:	201c      	movs	r0, #28
  4040a6:	9b08      	ldr	r3, [sp, #32]
  4040a8:	4403      	add	r3, r0
  4040aa:	9308      	str	r3, [sp, #32]
  4040ac:	9b06      	ldr	r3, [sp, #24]
  4040ae:	4403      	add	r3, r0
  4040b0:	4405      	add	r5, r0
  4040b2:	9306      	str	r3, [sp, #24]
  4040b4:	e763      	b.n	403f7e <_dtoa_r+0x516>
  4040b6:	4641      	mov	r1, r8
  4040b8:	4648      	mov	r0, r9
  4040ba:	f001 f9d5 	bl	405468 <__mcmp>
  4040be:	2800      	cmp	r0, #0
  4040c0:	f6bf af73 	bge.w	403faa <_dtoa_r+0x542>
  4040c4:	9f02      	ldr	r7, [sp, #8]
  4040c6:	4649      	mov	r1, r9
  4040c8:	2300      	movs	r3, #0
  4040ca:	220a      	movs	r2, #10
  4040cc:	4620      	mov	r0, r4
  4040ce:	3f01      	subs	r7, #1
  4040d0:	9702      	str	r7, [sp, #8]
  4040d2:	f000 fffb 	bl	4050cc <__multadd>
  4040d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4040d8:	4681      	mov	r9, r0
  4040da:	2b00      	cmp	r3, #0
  4040dc:	f040 83b6 	bne.w	40484c <_dtoa_r+0xde4>
  4040e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4040e2:	2b00      	cmp	r3, #0
  4040e4:	f340 83bf 	ble.w	404866 <_dtoa_r+0xdfe>
  4040e8:	930a      	str	r3, [sp, #40]	; 0x28
  4040ea:	f8dd b010 	ldr.w	fp, [sp, #16]
  4040ee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  4040f0:	465d      	mov	r5, fp
  4040f2:	e002      	b.n	4040fa <_dtoa_r+0x692>
  4040f4:	f000 ffea 	bl	4050cc <__multadd>
  4040f8:	4681      	mov	r9, r0
  4040fa:	4641      	mov	r1, r8
  4040fc:	4648      	mov	r0, r9
  4040fe:	f7ff fc1f 	bl	403940 <quorem>
  404102:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  404106:	f805 ab01 	strb.w	sl, [r5], #1
  40410a:	eba5 030b 	sub.w	r3, r5, fp
  40410e:	42bb      	cmp	r3, r7
  404110:	f04f 020a 	mov.w	r2, #10
  404114:	f04f 0300 	mov.w	r3, #0
  404118:	4649      	mov	r1, r9
  40411a:	4620      	mov	r0, r4
  40411c:	dbea      	blt.n	4040f4 <_dtoa_r+0x68c>
  40411e:	9b04      	ldr	r3, [sp, #16]
  404120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404122:	2a01      	cmp	r2, #1
  404124:	bfac      	ite	ge
  404126:	189b      	addge	r3, r3, r2
  404128:	3301      	addlt	r3, #1
  40412a:	461d      	mov	r5, r3
  40412c:	f04f 0b00 	mov.w	fp, #0
  404130:	4649      	mov	r1, r9
  404132:	2201      	movs	r2, #1
  404134:	4620      	mov	r0, r4
  404136:	f001 f945 	bl	4053c4 <__lshift>
  40413a:	4641      	mov	r1, r8
  40413c:	4681      	mov	r9, r0
  40413e:	f001 f993 	bl	405468 <__mcmp>
  404142:	2800      	cmp	r0, #0
  404144:	f340 823d 	ble.w	4045c2 <_dtoa_r+0xb5a>
  404148:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  40414c:	9904      	ldr	r1, [sp, #16]
  40414e:	1e6b      	subs	r3, r5, #1
  404150:	e004      	b.n	40415c <_dtoa_r+0x6f4>
  404152:	428b      	cmp	r3, r1
  404154:	f000 81ae 	beq.w	4044b4 <_dtoa_r+0xa4c>
  404158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  40415c:	2a39      	cmp	r2, #57	; 0x39
  40415e:	f103 0501 	add.w	r5, r3, #1
  404162:	d0f6      	beq.n	404152 <_dtoa_r+0x6ea>
  404164:	3201      	adds	r2, #1
  404166:	701a      	strb	r2, [r3, #0]
  404168:	4641      	mov	r1, r8
  40416a:	4620      	mov	r0, r4
  40416c:	f000 ffa4 	bl	4050b8 <_Bfree>
  404170:	2e00      	cmp	r6, #0
  404172:	f43f ae3d 	beq.w	403df0 <_dtoa_r+0x388>
  404176:	f1bb 0f00 	cmp.w	fp, #0
  40417a:	d005      	beq.n	404188 <_dtoa_r+0x720>
  40417c:	45b3      	cmp	fp, r6
  40417e:	d003      	beq.n	404188 <_dtoa_r+0x720>
  404180:	4659      	mov	r1, fp
  404182:	4620      	mov	r0, r4
  404184:	f000 ff98 	bl	4050b8 <_Bfree>
  404188:	4631      	mov	r1, r6
  40418a:	4620      	mov	r0, r4
  40418c:	f000 ff94 	bl	4050b8 <_Bfree>
  404190:	e62e      	b.n	403df0 <_dtoa_r+0x388>
  404192:	2300      	movs	r3, #0
  404194:	930b      	str	r3, [sp, #44]	; 0x2c
  404196:	9b02      	ldr	r3, [sp, #8]
  404198:	9a25      	ldr	r2, [sp, #148]	; 0x94
  40419a:	4413      	add	r3, r2
  40419c:	930f      	str	r3, [sp, #60]	; 0x3c
  40419e:	3301      	adds	r3, #1
  4041a0:	2b01      	cmp	r3, #1
  4041a2:	461f      	mov	r7, r3
  4041a4:	461e      	mov	r6, r3
  4041a6:	930a      	str	r3, [sp, #40]	; 0x28
  4041a8:	bfb8      	it	lt
  4041aa:	2701      	movlt	r7, #1
  4041ac:	2100      	movs	r1, #0
  4041ae:	2f17      	cmp	r7, #23
  4041b0:	6461      	str	r1, [r4, #68]	; 0x44
  4041b2:	d90a      	bls.n	4041ca <_dtoa_r+0x762>
  4041b4:	2201      	movs	r2, #1
  4041b6:	2304      	movs	r3, #4
  4041b8:	005b      	lsls	r3, r3, #1
  4041ba:	f103 0014 	add.w	r0, r3, #20
  4041be:	4287      	cmp	r7, r0
  4041c0:	4611      	mov	r1, r2
  4041c2:	f102 0201 	add.w	r2, r2, #1
  4041c6:	d2f7      	bcs.n	4041b8 <_dtoa_r+0x750>
  4041c8:	6461      	str	r1, [r4, #68]	; 0x44
  4041ca:	4620      	mov	r0, r4
  4041cc:	f000 ff4e 	bl	40506c <_Balloc>
  4041d0:	2e0e      	cmp	r6, #14
  4041d2:	9004      	str	r0, [sp, #16]
  4041d4:	6420      	str	r0, [r4, #64]	; 0x40
  4041d6:	f63f ad41 	bhi.w	403c5c <_dtoa_r+0x1f4>
  4041da:	2d00      	cmp	r5, #0
  4041dc:	f43f ad3e 	beq.w	403c5c <_dtoa_r+0x1f4>
  4041e0:	9902      	ldr	r1, [sp, #8]
  4041e2:	2900      	cmp	r1, #0
  4041e4:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  4041e8:	f340 8202 	ble.w	4045f0 <_dtoa_r+0xb88>
  4041ec:	4bb8      	ldr	r3, [pc, #736]	; (4044d0 <_dtoa_r+0xa68>)
  4041ee:	f001 020f 	and.w	r2, r1, #15
  4041f2:	110d      	asrs	r5, r1, #4
  4041f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4041f8:	06e9      	lsls	r1, r5, #27
  4041fa:	e9d3 6700 	ldrd	r6, r7, [r3]
  4041fe:	f140 81ae 	bpl.w	40455e <_dtoa_r+0xaf6>
  404202:	4bb4      	ldr	r3, [pc, #720]	; (4044d4 <_dtoa_r+0xa6c>)
  404204:	4650      	mov	r0, sl
  404206:	4659      	mov	r1, fp
  404208:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  40420c:	f002 fa1c 	bl	406648 <__aeabi_ddiv>
  404210:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  404214:	f005 050f 	and.w	r5, r5, #15
  404218:	f04f 0a03 	mov.w	sl, #3
  40421c:	b18d      	cbz	r5, 404242 <_dtoa_r+0x7da>
  40421e:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 4044d4 <_dtoa_r+0xa6c>
  404222:	07ea      	lsls	r2, r5, #31
  404224:	d509      	bpl.n	40423a <_dtoa_r+0x7d2>
  404226:	4630      	mov	r0, r6
  404228:	4639      	mov	r1, r7
  40422a:	e9d8 2300 	ldrd	r2, r3, [r8]
  40422e:	f002 f8e1 	bl	4063f4 <__aeabi_dmul>
  404232:	f10a 0a01 	add.w	sl, sl, #1
  404236:	4606      	mov	r6, r0
  404238:	460f      	mov	r7, r1
  40423a:	106d      	asrs	r5, r5, #1
  40423c:	f108 0808 	add.w	r8, r8, #8
  404240:	d1ef      	bne.n	404222 <_dtoa_r+0x7ba>
  404242:	463b      	mov	r3, r7
  404244:	4632      	mov	r2, r6
  404246:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  40424a:	f002 f9fd 	bl	406648 <__aeabi_ddiv>
  40424e:	4607      	mov	r7, r0
  404250:	4688      	mov	r8, r1
  404252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404254:	b143      	cbz	r3, 404268 <_dtoa_r+0x800>
  404256:	2200      	movs	r2, #0
  404258:	4b9f      	ldr	r3, [pc, #636]	; (4044d8 <_dtoa_r+0xa70>)
  40425a:	4638      	mov	r0, r7
  40425c:	4641      	mov	r1, r8
  40425e:	f002 fb3b 	bl	4068d8 <__aeabi_dcmplt>
  404262:	2800      	cmp	r0, #0
  404264:	f040 8286 	bne.w	404774 <_dtoa_r+0xd0c>
  404268:	4650      	mov	r0, sl
  40426a:	f002 f85d 	bl	406328 <__aeabi_i2d>
  40426e:	463a      	mov	r2, r7
  404270:	4643      	mov	r3, r8
  404272:	f002 f8bf 	bl	4063f4 <__aeabi_dmul>
  404276:	4b99      	ldr	r3, [pc, #612]	; (4044dc <_dtoa_r+0xa74>)
  404278:	2200      	movs	r2, #0
  40427a:	f001 ff09 	bl	406090 <__adddf3>
  40427e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404280:	4605      	mov	r5, r0
  404282:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404286:	2b00      	cmp	r3, #0
  404288:	f000 813e 	beq.w	404508 <_dtoa_r+0xaa0>
  40428c:	9b02      	ldr	r3, [sp, #8]
  40428e:	9315      	str	r3, [sp, #84]	; 0x54
  404290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404292:	9312      	str	r3, [sp, #72]	; 0x48
  404294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  404296:	2b00      	cmp	r3, #0
  404298:	f000 81fa 	beq.w	404690 <_dtoa_r+0xc28>
  40429c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  40429e:	4b8c      	ldr	r3, [pc, #560]	; (4044d0 <_dtoa_r+0xa68>)
  4042a0:	498f      	ldr	r1, [pc, #572]	; (4044e0 <_dtoa_r+0xa78>)
  4042a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4042a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  4042aa:	2000      	movs	r0, #0
  4042ac:	f002 f9cc 	bl	406648 <__aeabi_ddiv>
  4042b0:	462a      	mov	r2, r5
  4042b2:	4633      	mov	r3, r6
  4042b4:	f001 feea 	bl	40608c <__aeabi_dsub>
  4042b8:	4682      	mov	sl, r0
  4042ba:	468b      	mov	fp, r1
  4042bc:	4638      	mov	r0, r7
  4042be:	4641      	mov	r1, r8
  4042c0:	f002 fb48 	bl	406954 <__aeabi_d2iz>
  4042c4:	4605      	mov	r5, r0
  4042c6:	f002 f82f 	bl	406328 <__aeabi_i2d>
  4042ca:	4602      	mov	r2, r0
  4042cc:	460b      	mov	r3, r1
  4042ce:	4638      	mov	r0, r7
  4042d0:	4641      	mov	r1, r8
  4042d2:	f001 fedb 	bl	40608c <__aeabi_dsub>
  4042d6:	3530      	adds	r5, #48	; 0x30
  4042d8:	fa5f f885 	uxtb.w	r8, r5
  4042dc:	9d04      	ldr	r5, [sp, #16]
  4042de:	4606      	mov	r6, r0
  4042e0:	460f      	mov	r7, r1
  4042e2:	f885 8000 	strb.w	r8, [r5]
  4042e6:	4602      	mov	r2, r0
  4042e8:	460b      	mov	r3, r1
  4042ea:	4650      	mov	r0, sl
  4042ec:	4659      	mov	r1, fp
  4042ee:	3501      	adds	r5, #1
  4042f0:	f002 fb10 	bl	406914 <__aeabi_dcmpgt>
  4042f4:	2800      	cmp	r0, #0
  4042f6:	d154      	bne.n	4043a2 <_dtoa_r+0x93a>
  4042f8:	4632      	mov	r2, r6
  4042fa:	463b      	mov	r3, r7
  4042fc:	2000      	movs	r0, #0
  4042fe:	4976      	ldr	r1, [pc, #472]	; (4044d8 <_dtoa_r+0xa70>)
  404300:	f001 fec4 	bl	40608c <__aeabi_dsub>
  404304:	4602      	mov	r2, r0
  404306:	460b      	mov	r3, r1
  404308:	4650      	mov	r0, sl
  40430a:	4659      	mov	r1, fp
  40430c:	f002 fb02 	bl	406914 <__aeabi_dcmpgt>
  404310:	2800      	cmp	r0, #0
  404312:	f040 8270 	bne.w	4047f6 <_dtoa_r+0xd8e>
  404316:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404318:	2a01      	cmp	r2, #1
  40431a:	f000 8111 	beq.w	404540 <_dtoa_r+0xad8>
  40431e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404320:	9a04      	ldr	r2, [sp, #16]
  404322:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404326:	4413      	add	r3, r2
  404328:	4699      	mov	r9, r3
  40432a:	e00d      	b.n	404348 <_dtoa_r+0x8e0>
  40432c:	2000      	movs	r0, #0
  40432e:	496a      	ldr	r1, [pc, #424]	; (4044d8 <_dtoa_r+0xa70>)
  404330:	f001 feac 	bl	40608c <__aeabi_dsub>
  404334:	4652      	mov	r2, sl
  404336:	465b      	mov	r3, fp
  404338:	f002 face 	bl	4068d8 <__aeabi_dcmplt>
  40433c:	2800      	cmp	r0, #0
  40433e:	f040 8258 	bne.w	4047f2 <_dtoa_r+0xd8a>
  404342:	454d      	cmp	r5, r9
  404344:	f000 80fa 	beq.w	40453c <_dtoa_r+0xad4>
  404348:	4650      	mov	r0, sl
  40434a:	4659      	mov	r1, fp
  40434c:	2200      	movs	r2, #0
  40434e:	4b65      	ldr	r3, [pc, #404]	; (4044e4 <_dtoa_r+0xa7c>)
  404350:	f002 f850 	bl	4063f4 <__aeabi_dmul>
  404354:	2200      	movs	r2, #0
  404356:	4b63      	ldr	r3, [pc, #396]	; (4044e4 <_dtoa_r+0xa7c>)
  404358:	4682      	mov	sl, r0
  40435a:	468b      	mov	fp, r1
  40435c:	4630      	mov	r0, r6
  40435e:	4639      	mov	r1, r7
  404360:	f002 f848 	bl	4063f4 <__aeabi_dmul>
  404364:	460f      	mov	r7, r1
  404366:	4606      	mov	r6, r0
  404368:	f002 faf4 	bl	406954 <__aeabi_d2iz>
  40436c:	4680      	mov	r8, r0
  40436e:	f001 ffdb 	bl	406328 <__aeabi_i2d>
  404372:	4602      	mov	r2, r0
  404374:	460b      	mov	r3, r1
  404376:	4630      	mov	r0, r6
  404378:	4639      	mov	r1, r7
  40437a:	f001 fe87 	bl	40608c <__aeabi_dsub>
  40437e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404382:	fa5f f888 	uxtb.w	r8, r8
  404386:	4652      	mov	r2, sl
  404388:	465b      	mov	r3, fp
  40438a:	f805 8b01 	strb.w	r8, [r5], #1
  40438e:	4606      	mov	r6, r0
  404390:	460f      	mov	r7, r1
  404392:	f002 faa1 	bl	4068d8 <__aeabi_dcmplt>
  404396:	4632      	mov	r2, r6
  404398:	463b      	mov	r3, r7
  40439a:	2800      	cmp	r0, #0
  40439c:	d0c6      	beq.n	40432c <_dtoa_r+0x8c4>
  40439e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4043a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4043a4:	9302      	str	r3, [sp, #8]
  4043a6:	e523      	b.n	403df0 <_dtoa_r+0x388>
  4043a8:	2300      	movs	r3, #0
  4043aa:	930b      	str	r3, [sp, #44]	; 0x2c
  4043ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4043ae:	2b00      	cmp	r3, #0
  4043b0:	f340 80dc 	ble.w	40456c <_dtoa_r+0xb04>
  4043b4:	461f      	mov	r7, r3
  4043b6:	461e      	mov	r6, r3
  4043b8:	930f      	str	r3, [sp, #60]	; 0x3c
  4043ba:	930a      	str	r3, [sp, #40]	; 0x28
  4043bc:	e6f6      	b.n	4041ac <_dtoa_r+0x744>
  4043be:	2301      	movs	r3, #1
  4043c0:	930b      	str	r3, [sp, #44]	; 0x2c
  4043c2:	e7f3      	b.n	4043ac <_dtoa_r+0x944>
  4043c4:	f1ba 0f00 	cmp.w	sl, #0
  4043c8:	f47f ada8 	bne.w	403f1c <_dtoa_r+0x4b4>
  4043cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
  4043d0:	2b00      	cmp	r3, #0
  4043d2:	f47f adba 	bne.w	403f4a <_dtoa_r+0x4e2>
  4043d6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  4043da:	0d3f      	lsrs	r7, r7, #20
  4043dc:	053f      	lsls	r7, r7, #20
  4043de:	2f00      	cmp	r7, #0
  4043e0:	f000 820d 	beq.w	4047fe <_dtoa_r+0xd96>
  4043e4:	9b08      	ldr	r3, [sp, #32]
  4043e6:	3301      	adds	r3, #1
  4043e8:	9308      	str	r3, [sp, #32]
  4043ea:	9b06      	ldr	r3, [sp, #24]
  4043ec:	3301      	adds	r3, #1
  4043ee:	9306      	str	r3, [sp, #24]
  4043f0:	2301      	movs	r3, #1
  4043f2:	930c      	str	r3, [sp, #48]	; 0x30
  4043f4:	e5ab      	b.n	403f4e <_dtoa_r+0x4e6>
  4043f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4043f8:	2b00      	cmp	r3, #0
  4043fa:	f73f ac42 	bgt.w	403c82 <_dtoa_r+0x21a>
  4043fe:	f040 8221 	bne.w	404844 <_dtoa_r+0xddc>
  404402:	2200      	movs	r2, #0
  404404:	4b38      	ldr	r3, [pc, #224]	; (4044e8 <_dtoa_r+0xa80>)
  404406:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40440a:	f001 fff3 	bl	4063f4 <__aeabi_dmul>
  40440e:	4652      	mov	r2, sl
  404410:	465b      	mov	r3, fp
  404412:	f002 fa75 	bl	406900 <__aeabi_dcmpge>
  404416:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  40441a:	4646      	mov	r6, r8
  40441c:	2800      	cmp	r0, #0
  40441e:	d041      	beq.n	4044a4 <_dtoa_r+0xa3c>
  404420:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404422:	9d04      	ldr	r5, [sp, #16]
  404424:	43db      	mvns	r3, r3
  404426:	9302      	str	r3, [sp, #8]
  404428:	4641      	mov	r1, r8
  40442a:	4620      	mov	r0, r4
  40442c:	f000 fe44 	bl	4050b8 <_Bfree>
  404430:	2e00      	cmp	r6, #0
  404432:	f43f acdd 	beq.w	403df0 <_dtoa_r+0x388>
  404436:	e6a7      	b.n	404188 <_dtoa_r+0x720>
  404438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  40443a:	4649      	mov	r1, r9
  40443c:	4620      	mov	r0, r4
  40443e:	f000 ff71 	bl	405324 <__pow5mult>
  404442:	4681      	mov	r9, r0
  404444:	e558      	b.n	403ef8 <_dtoa_r+0x490>
  404446:	9a14      	ldr	r2, [sp, #80]	; 0x50
  404448:	2a00      	cmp	r2, #0
  40444a:	f000 8187 	beq.w	40475c <_dtoa_r+0xcf4>
  40444e:	f203 4333 	addw	r3, r3, #1075	; 0x433
  404452:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404454:	9d08      	ldr	r5, [sp, #32]
  404456:	e4f2      	b.n	403e3e <_dtoa_r+0x3d6>
  404458:	f1ba 0f00 	cmp.w	sl, #0
  40445c:	f47f ad75 	bne.w	403f4a <_dtoa_r+0x4e2>
  404460:	e7b4      	b.n	4043cc <_dtoa_r+0x964>
  404462:	f000 fe33 	bl	4050cc <__multadd>
  404466:	4647      	mov	r7, r8
  404468:	4606      	mov	r6, r0
  40446a:	4683      	mov	fp, r0
  40446c:	e5be      	b.n	403fec <_dtoa_r+0x584>
  40446e:	4601      	mov	r1, r0
  404470:	4620      	mov	r0, r4
  404472:	9306      	str	r3, [sp, #24]
  404474:	f000 fe20 	bl	4050b8 <_Bfree>
  404478:	2201      	movs	r2, #1
  40447a:	9b06      	ldr	r3, [sp, #24]
  40447c:	e5e0      	b.n	404040 <_dtoa_r+0x5d8>
  40447e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404480:	2b02      	cmp	r3, #2
  404482:	f77f ad96 	ble.w	403fb2 <_dtoa_r+0x54a>
  404486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404488:	2b00      	cmp	r3, #0
  40448a:	d1c9      	bne.n	404420 <_dtoa_r+0x9b8>
  40448c:	4641      	mov	r1, r8
  40448e:	2205      	movs	r2, #5
  404490:	4620      	mov	r0, r4
  404492:	f000 fe1b 	bl	4050cc <__multadd>
  404496:	4601      	mov	r1, r0
  404498:	4680      	mov	r8, r0
  40449a:	4648      	mov	r0, r9
  40449c:	f000 ffe4 	bl	405468 <__mcmp>
  4044a0:	2800      	cmp	r0, #0
  4044a2:	ddbd      	ble.n	404420 <_dtoa_r+0x9b8>
  4044a4:	9a02      	ldr	r2, [sp, #8]
  4044a6:	9904      	ldr	r1, [sp, #16]
  4044a8:	2331      	movs	r3, #49	; 0x31
  4044aa:	3201      	adds	r2, #1
  4044ac:	9202      	str	r2, [sp, #8]
  4044ae:	700b      	strb	r3, [r1, #0]
  4044b0:	1c4d      	adds	r5, r1, #1
  4044b2:	e7b9      	b.n	404428 <_dtoa_r+0x9c0>
  4044b4:	9a02      	ldr	r2, [sp, #8]
  4044b6:	3201      	adds	r2, #1
  4044b8:	9202      	str	r2, [sp, #8]
  4044ba:	9a04      	ldr	r2, [sp, #16]
  4044bc:	2331      	movs	r3, #49	; 0x31
  4044be:	7013      	strb	r3, [r2, #0]
  4044c0:	e652      	b.n	404168 <_dtoa_r+0x700>
  4044c2:	2301      	movs	r3, #1
  4044c4:	930b      	str	r3, [sp, #44]	; 0x2c
  4044c6:	e666      	b.n	404196 <_dtoa_r+0x72e>
  4044c8:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  4044cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4044ce:	e48f      	b.n	403df0 <_dtoa_r+0x388>
  4044d0:	004074b8 	.word	0x004074b8
  4044d4:	00407490 	.word	0x00407490
  4044d8:	3ff00000 	.word	0x3ff00000
  4044dc:	401c0000 	.word	0x401c0000
  4044e0:	3fe00000 	.word	0x3fe00000
  4044e4:	40240000 	.word	0x40240000
  4044e8:	40140000 	.word	0x40140000
  4044ec:	4650      	mov	r0, sl
  4044ee:	f001 ff1b 	bl	406328 <__aeabi_i2d>
  4044f2:	463a      	mov	r2, r7
  4044f4:	4643      	mov	r3, r8
  4044f6:	f001 ff7d 	bl	4063f4 <__aeabi_dmul>
  4044fa:	2200      	movs	r2, #0
  4044fc:	4bc1      	ldr	r3, [pc, #772]	; (404804 <_dtoa_r+0xd9c>)
  4044fe:	f001 fdc7 	bl	406090 <__adddf3>
  404502:	4605      	mov	r5, r0
  404504:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  404508:	4641      	mov	r1, r8
  40450a:	2200      	movs	r2, #0
  40450c:	4bbe      	ldr	r3, [pc, #760]	; (404808 <_dtoa_r+0xda0>)
  40450e:	4638      	mov	r0, r7
  404510:	f001 fdbc 	bl	40608c <__aeabi_dsub>
  404514:	462a      	mov	r2, r5
  404516:	4633      	mov	r3, r6
  404518:	4682      	mov	sl, r0
  40451a:	468b      	mov	fp, r1
  40451c:	f002 f9fa 	bl	406914 <__aeabi_dcmpgt>
  404520:	4680      	mov	r8, r0
  404522:	2800      	cmp	r0, #0
  404524:	f040 8110 	bne.w	404748 <_dtoa_r+0xce0>
  404528:	462a      	mov	r2, r5
  40452a:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  40452e:	4650      	mov	r0, sl
  404530:	4659      	mov	r1, fp
  404532:	f002 f9d1 	bl	4068d8 <__aeabi_dcmplt>
  404536:	b118      	cbz	r0, 404540 <_dtoa_r+0xad8>
  404538:	4646      	mov	r6, r8
  40453a:	e771      	b.n	404420 <_dtoa_r+0x9b8>
  40453c:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404540:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  404544:	f7ff bb8a 	b.w	403c5c <_dtoa_r+0x1f4>
  404548:	9804      	ldr	r0, [sp, #16]
  40454a:	f7ff babb 	b.w	403ac4 <_dtoa_r+0x5c>
  40454e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404550:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404552:	970c      	str	r7, [sp, #48]	; 0x30
  404554:	1afb      	subs	r3, r7, r3
  404556:	441a      	add	r2, r3
  404558:	920d      	str	r2, [sp, #52]	; 0x34
  40455a:	2700      	movs	r7, #0
  40455c:	e469      	b.n	403e32 <_dtoa_r+0x3ca>
  40455e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  404562:	f04f 0a02 	mov.w	sl, #2
  404566:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40456a:	e657      	b.n	40421c <_dtoa_r+0x7b4>
  40456c:	2100      	movs	r1, #0
  40456e:	2301      	movs	r3, #1
  404570:	6461      	str	r1, [r4, #68]	; 0x44
  404572:	4620      	mov	r0, r4
  404574:	9325      	str	r3, [sp, #148]	; 0x94
  404576:	f000 fd79 	bl	40506c <_Balloc>
  40457a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40457c:	9004      	str	r0, [sp, #16]
  40457e:	6420      	str	r0, [r4, #64]	; 0x40
  404580:	930a      	str	r3, [sp, #40]	; 0x28
  404582:	930f      	str	r3, [sp, #60]	; 0x3c
  404584:	e629      	b.n	4041da <_dtoa_r+0x772>
  404586:	2a00      	cmp	r2, #0
  404588:	46d0      	mov	r8, sl
  40458a:	f8cd b018 	str.w	fp, [sp, #24]
  40458e:	469a      	mov	sl, r3
  404590:	dd11      	ble.n	4045b6 <_dtoa_r+0xb4e>
  404592:	4649      	mov	r1, r9
  404594:	2201      	movs	r2, #1
  404596:	4620      	mov	r0, r4
  404598:	f000 ff14 	bl	4053c4 <__lshift>
  40459c:	4641      	mov	r1, r8
  40459e:	4681      	mov	r9, r0
  4045a0:	f000 ff62 	bl	405468 <__mcmp>
  4045a4:	2800      	cmp	r0, #0
  4045a6:	f340 8146 	ble.w	404836 <_dtoa_r+0xdce>
  4045aa:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  4045ae:	f000 8106 	beq.w	4047be <_dtoa_r+0xd56>
  4045b2:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  4045b6:	46b3      	mov	fp, r6
  4045b8:	f887 a000 	strb.w	sl, [r7]
  4045bc:	1c7d      	adds	r5, r7, #1
  4045be:	9e06      	ldr	r6, [sp, #24]
  4045c0:	e5d2      	b.n	404168 <_dtoa_r+0x700>
  4045c2:	d104      	bne.n	4045ce <_dtoa_r+0xb66>
  4045c4:	f01a 0f01 	tst.w	sl, #1
  4045c8:	d001      	beq.n	4045ce <_dtoa_r+0xb66>
  4045ca:	e5bd      	b.n	404148 <_dtoa_r+0x6e0>
  4045cc:	4615      	mov	r5, r2
  4045ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4045d2:	2b30      	cmp	r3, #48	; 0x30
  4045d4:	f105 32ff 	add.w	r2, r5, #4294967295
  4045d8:	d0f8      	beq.n	4045cc <_dtoa_r+0xb64>
  4045da:	e5c5      	b.n	404168 <_dtoa_r+0x700>
  4045dc:	9904      	ldr	r1, [sp, #16]
  4045de:	2230      	movs	r2, #48	; 0x30
  4045e0:	700a      	strb	r2, [r1, #0]
  4045e2:	9a02      	ldr	r2, [sp, #8]
  4045e4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4045e8:	3201      	adds	r2, #1
  4045ea:	9202      	str	r2, [sp, #8]
  4045ec:	f7ff bbfc 	b.w	403de8 <_dtoa_r+0x380>
  4045f0:	f000 80bb 	beq.w	40476a <_dtoa_r+0xd02>
  4045f4:	9b02      	ldr	r3, [sp, #8]
  4045f6:	425d      	negs	r5, r3
  4045f8:	4b84      	ldr	r3, [pc, #528]	; (40480c <_dtoa_r+0xda4>)
  4045fa:	f005 020f 	and.w	r2, r5, #15
  4045fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404602:	e9d3 2300 	ldrd	r2, r3, [r3]
  404606:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  40460a:	f001 fef3 	bl	4063f4 <__aeabi_dmul>
  40460e:	112d      	asrs	r5, r5, #4
  404610:	4607      	mov	r7, r0
  404612:	4688      	mov	r8, r1
  404614:	f000 812c 	beq.w	404870 <_dtoa_r+0xe08>
  404618:	4e7d      	ldr	r6, [pc, #500]	; (404810 <_dtoa_r+0xda8>)
  40461a:	f04f 0a02 	mov.w	sl, #2
  40461e:	07eb      	lsls	r3, r5, #31
  404620:	d509      	bpl.n	404636 <_dtoa_r+0xbce>
  404622:	4638      	mov	r0, r7
  404624:	4641      	mov	r1, r8
  404626:	e9d6 2300 	ldrd	r2, r3, [r6]
  40462a:	f001 fee3 	bl	4063f4 <__aeabi_dmul>
  40462e:	f10a 0a01 	add.w	sl, sl, #1
  404632:	4607      	mov	r7, r0
  404634:	4688      	mov	r8, r1
  404636:	106d      	asrs	r5, r5, #1
  404638:	f106 0608 	add.w	r6, r6, #8
  40463c:	d1ef      	bne.n	40461e <_dtoa_r+0xbb6>
  40463e:	e608      	b.n	404252 <_dtoa_r+0x7ea>
  404640:	6871      	ldr	r1, [r6, #4]
  404642:	4620      	mov	r0, r4
  404644:	f000 fd12 	bl	40506c <_Balloc>
  404648:	6933      	ldr	r3, [r6, #16]
  40464a:	3302      	adds	r3, #2
  40464c:	009a      	lsls	r2, r3, #2
  40464e:	4605      	mov	r5, r0
  404650:	f106 010c 	add.w	r1, r6, #12
  404654:	300c      	adds	r0, #12
  404656:	f000 fc63 	bl	404f20 <memcpy>
  40465a:	4629      	mov	r1, r5
  40465c:	2201      	movs	r2, #1
  40465e:	4620      	mov	r0, r4
  404660:	f000 feb0 	bl	4053c4 <__lshift>
  404664:	9006      	str	r0, [sp, #24]
  404666:	e4b5      	b.n	403fd4 <_dtoa_r+0x56c>
  404668:	2b39      	cmp	r3, #57	; 0x39
  40466a:	f8cd b018 	str.w	fp, [sp, #24]
  40466e:	46d0      	mov	r8, sl
  404670:	f000 80a5 	beq.w	4047be <_dtoa_r+0xd56>
  404674:	f103 0a01 	add.w	sl, r3, #1
  404678:	46b3      	mov	fp, r6
  40467a:	f887 a000 	strb.w	sl, [r7]
  40467e:	1c7d      	adds	r5, r7, #1
  404680:	9e06      	ldr	r6, [sp, #24]
  404682:	e571      	b.n	404168 <_dtoa_r+0x700>
  404684:	465a      	mov	r2, fp
  404686:	46d0      	mov	r8, sl
  404688:	46b3      	mov	fp, r6
  40468a:	469a      	mov	sl, r3
  40468c:	4616      	mov	r6, r2
  40468e:	e54f      	b.n	404130 <_dtoa_r+0x6c8>
  404690:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404692:	495e      	ldr	r1, [pc, #376]	; (40480c <_dtoa_r+0xda4>)
  404694:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  404698:	462a      	mov	r2, r5
  40469a:	4633      	mov	r3, r6
  40469c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  4046a0:	f001 fea8 	bl	4063f4 <__aeabi_dmul>
  4046a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  4046a8:	4638      	mov	r0, r7
  4046aa:	4641      	mov	r1, r8
  4046ac:	f002 f952 	bl	406954 <__aeabi_d2iz>
  4046b0:	4605      	mov	r5, r0
  4046b2:	f001 fe39 	bl	406328 <__aeabi_i2d>
  4046b6:	460b      	mov	r3, r1
  4046b8:	4602      	mov	r2, r0
  4046ba:	4641      	mov	r1, r8
  4046bc:	4638      	mov	r0, r7
  4046be:	f001 fce5 	bl	40608c <__aeabi_dsub>
  4046c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046c4:	460f      	mov	r7, r1
  4046c6:	9904      	ldr	r1, [sp, #16]
  4046c8:	3530      	adds	r5, #48	; 0x30
  4046ca:	2b01      	cmp	r3, #1
  4046cc:	700d      	strb	r5, [r1, #0]
  4046ce:	4606      	mov	r6, r0
  4046d0:	f101 0501 	add.w	r5, r1, #1
  4046d4:	d026      	beq.n	404724 <_dtoa_r+0xcbc>
  4046d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4046d8:	9a04      	ldr	r2, [sp, #16]
  4046da:	f8df b13c 	ldr.w	fp, [pc, #316]	; 404818 <_dtoa_r+0xdb0>
  4046de:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4046e2:	4413      	add	r3, r2
  4046e4:	f04f 0a00 	mov.w	sl, #0
  4046e8:	4699      	mov	r9, r3
  4046ea:	4652      	mov	r2, sl
  4046ec:	465b      	mov	r3, fp
  4046ee:	4630      	mov	r0, r6
  4046f0:	4639      	mov	r1, r7
  4046f2:	f001 fe7f 	bl	4063f4 <__aeabi_dmul>
  4046f6:	460f      	mov	r7, r1
  4046f8:	4606      	mov	r6, r0
  4046fa:	f002 f92b 	bl	406954 <__aeabi_d2iz>
  4046fe:	4680      	mov	r8, r0
  404700:	f001 fe12 	bl	406328 <__aeabi_i2d>
  404704:	f108 0830 	add.w	r8, r8, #48	; 0x30
  404708:	4602      	mov	r2, r0
  40470a:	460b      	mov	r3, r1
  40470c:	4630      	mov	r0, r6
  40470e:	4639      	mov	r1, r7
  404710:	f001 fcbc 	bl	40608c <__aeabi_dsub>
  404714:	f805 8b01 	strb.w	r8, [r5], #1
  404718:	454d      	cmp	r5, r9
  40471a:	4606      	mov	r6, r0
  40471c:	460f      	mov	r7, r1
  40471e:	d1e4      	bne.n	4046ea <_dtoa_r+0xc82>
  404720:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  404724:	4b3b      	ldr	r3, [pc, #236]	; (404814 <_dtoa_r+0xdac>)
  404726:	2200      	movs	r2, #0
  404728:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  40472c:	f001 fcb0 	bl	406090 <__adddf3>
  404730:	4632      	mov	r2, r6
  404732:	463b      	mov	r3, r7
  404734:	f002 f8d0 	bl	4068d8 <__aeabi_dcmplt>
  404738:	2800      	cmp	r0, #0
  40473a:	d046      	beq.n	4047ca <_dtoa_r+0xd62>
  40473c:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40473e:	9302      	str	r3, [sp, #8]
  404740:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404744:	f7ff bb43 	b.w	403dce <_dtoa_r+0x366>
  404748:	f04f 0800 	mov.w	r8, #0
  40474c:	4646      	mov	r6, r8
  40474e:	e6a9      	b.n	4044a4 <_dtoa_r+0xa3c>
  404750:	9b08      	ldr	r3, [sp, #32]
  404752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404754:	1a9d      	subs	r5, r3, r2
  404756:	2300      	movs	r3, #0
  404758:	f7ff bb71 	b.w	403e3e <_dtoa_r+0x3d6>
  40475c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40475e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404760:	9d08      	ldr	r5, [sp, #32]
  404762:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404766:	f7ff bb6a 	b.w	403e3e <_dtoa_r+0x3d6>
  40476a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40476e:	f04f 0a02 	mov.w	sl, #2
  404772:	e56e      	b.n	404252 <_dtoa_r+0x7ea>
  404774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404776:	2b00      	cmp	r3, #0
  404778:	f43f aeb8 	beq.w	4044ec <_dtoa_r+0xa84>
  40477c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40477e:	2b00      	cmp	r3, #0
  404780:	f77f aede 	ble.w	404540 <_dtoa_r+0xad8>
  404784:	2200      	movs	r2, #0
  404786:	4b24      	ldr	r3, [pc, #144]	; (404818 <_dtoa_r+0xdb0>)
  404788:	4638      	mov	r0, r7
  40478a:	4641      	mov	r1, r8
  40478c:	f001 fe32 	bl	4063f4 <__aeabi_dmul>
  404790:	4607      	mov	r7, r0
  404792:	4688      	mov	r8, r1
  404794:	f10a 0001 	add.w	r0, sl, #1
  404798:	f001 fdc6 	bl	406328 <__aeabi_i2d>
  40479c:	463a      	mov	r2, r7
  40479e:	4643      	mov	r3, r8
  4047a0:	f001 fe28 	bl	4063f4 <__aeabi_dmul>
  4047a4:	2200      	movs	r2, #0
  4047a6:	4b17      	ldr	r3, [pc, #92]	; (404804 <_dtoa_r+0xd9c>)
  4047a8:	f001 fc72 	bl	406090 <__adddf3>
  4047ac:	9a02      	ldr	r2, [sp, #8]
  4047ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4047b0:	9312      	str	r3, [sp, #72]	; 0x48
  4047b2:	3a01      	subs	r2, #1
  4047b4:	4605      	mov	r5, r0
  4047b6:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  4047ba:	9215      	str	r2, [sp, #84]	; 0x54
  4047bc:	e56a      	b.n	404294 <_dtoa_r+0x82c>
  4047be:	2239      	movs	r2, #57	; 0x39
  4047c0:	46b3      	mov	fp, r6
  4047c2:	703a      	strb	r2, [r7, #0]
  4047c4:	9e06      	ldr	r6, [sp, #24]
  4047c6:	1c7d      	adds	r5, r7, #1
  4047c8:	e4c0      	b.n	40414c <_dtoa_r+0x6e4>
  4047ca:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  4047ce:	2000      	movs	r0, #0
  4047d0:	4910      	ldr	r1, [pc, #64]	; (404814 <_dtoa_r+0xdac>)
  4047d2:	f001 fc5b 	bl	40608c <__aeabi_dsub>
  4047d6:	4632      	mov	r2, r6
  4047d8:	463b      	mov	r3, r7
  4047da:	f002 f89b 	bl	406914 <__aeabi_dcmpgt>
  4047de:	b908      	cbnz	r0, 4047e4 <_dtoa_r+0xd7c>
  4047e0:	e6ae      	b.n	404540 <_dtoa_r+0xad8>
  4047e2:	4615      	mov	r5, r2
  4047e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  4047e8:	2b30      	cmp	r3, #48	; 0x30
  4047ea:	f105 32ff 	add.w	r2, r5, #4294967295
  4047ee:	d0f8      	beq.n	4047e2 <_dtoa_r+0xd7a>
  4047f0:	e5d7      	b.n	4043a2 <_dtoa_r+0x93a>
  4047f2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4047f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4047f8:	9302      	str	r3, [sp, #8]
  4047fa:	f7ff bae8 	b.w	403dce <_dtoa_r+0x366>
  4047fe:	970c      	str	r7, [sp, #48]	; 0x30
  404800:	f7ff bba5 	b.w	403f4e <_dtoa_r+0x4e6>
  404804:	401c0000 	.word	0x401c0000
  404808:	40140000 	.word	0x40140000
  40480c:	004074b8 	.word	0x004074b8
  404810:	00407490 	.word	0x00407490
  404814:	3fe00000 	.word	0x3fe00000
  404818:	40240000 	.word	0x40240000
  40481c:	2b39      	cmp	r3, #57	; 0x39
  40481e:	f8cd b018 	str.w	fp, [sp, #24]
  404822:	46d0      	mov	r8, sl
  404824:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  404828:	469a      	mov	sl, r3
  40482a:	d0c8      	beq.n	4047be <_dtoa_r+0xd56>
  40482c:	f1bb 0f00 	cmp.w	fp, #0
  404830:	f73f aebf 	bgt.w	4045b2 <_dtoa_r+0xb4a>
  404834:	e6bf      	b.n	4045b6 <_dtoa_r+0xb4e>
  404836:	f47f aebe 	bne.w	4045b6 <_dtoa_r+0xb4e>
  40483a:	f01a 0f01 	tst.w	sl, #1
  40483e:	f43f aeba 	beq.w	4045b6 <_dtoa_r+0xb4e>
  404842:	e6b2      	b.n	4045aa <_dtoa_r+0xb42>
  404844:	f04f 0800 	mov.w	r8, #0
  404848:	4646      	mov	r6, r8
  40484a:	e5e9      	b.n	404420 <_dtoa_r+0x9b8>
  40484c:	4631      	mov	r1, r6
  40484e:	2300      	movs	r3, #0
  404850:	220a      	movs	r2, #10
  404852:	4620      	mov	r0, r4
  404854:	f000 fc3a 	bl	4050cc <__multadd>
  404858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40485a:	2b00      	cmp	r3, #0
  40485c:	4606      	mov	r6, r0
  40485e:	dd0a      	ble.n	404876 <_dtoa_r+0xe0e>
  404860:	930a      	str	r3, [sp, #40]	; 0x28
  404862:	f7ff bbaa 	b.w	403fba <_dtoa_r+0x552>
  404866:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404868:	2b02      	cmp	r3, #2
  40486a:	dc23      	bgt.n	4048b4 <_dtoa_r+0xe4c>
  40486c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40486e:	e43b      	b.n	4040e8 <_dtoa_r+0x680>
  404870:	f04f 0a02 	mov.w	sl, #2
  404874:	e4ed      	b.n	404252 <_dtoa_r+0x7ea>
  404876:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404878:	2b02      	cmp	r3, #2
  40487a:	dc1b      	bgt.n	4048b4 <_dtoa_r+0xe4c>
  40487c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40487e:	e7ef      	b.n	404860 <_dtoa_r+0xdf8>
  404880:	2500      	movs	r5, #0
  404882:	6465      	str	r5, [r4, #68]	; 0x44
  404884:	4629      	mov	r1, r5
  404886:	4620      	mov	r0, r4
  404888:	f000 fbf0 	bl	40506c <_Balloc>
  40488c:	f04f 33ff 	mov.w	r3, #4294967295
  404890:	930a      	str	r3, [sp, #40]	; 0x28
  404892:	930f      	str	r3, [sp, #60]	; 0x3c
  404894:	2301      	movs	r3, #1
  404896:	9004      	str	r0, [sp, #16]
  404898:	9525      	str	r5, [sp, #148]	; 0x94
  40489a:	6420      	str	r0, [r4, #64]	; 0x40
  40489c:	930b      	str	r3, [sp, #44]	; 0x2c
  40489e:	f7ff b9dd 	b.w	403c5c <_dtoa_r+0x1f4>
  4048a2:	2501      	movs	r5, #1
  4048a4:	f7ff b9a5 	b.w	403bf2 <_dtoa_r+0x18a>
  4048a8:	f43f ab69 	beq.w	403f7e <_dtoa_r+0x516>
  4048ac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  4048b0:	f7ff bbf9 	b.w	4040a6 <_dtoa_r+0x63e>
  4048b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4048b6:	930a      	str	r3, [sp, #40]	; 0x28
  4048b8:	e5e5      	b.n	404486 <_dtoa_r+0xa1e>
  4048ba:	bf00      	nop

004048bc <__libc_fini_array>:
  4048bc:	b538      	push	{r3, r4, r5, lr}
  4048be:	4c0a      	ldr	r4, [pc, #40]	; (4048e8 <__libc_fini_array+0x2c>)
  4048c0:	4d0a      	ldr	r5, [pc, #40]	; (4048ec <__libc_fini_array+0x30>)
  4048c2:	1b64      	subs	r4, r4, r5
  4048c4:	10a4      	asrs	r4, r4, #2
  4048c6:	d00a      	beq.n	4048de <__libc_fini_array+0x22>
  4048c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4048cc:	3b01      	subs	r3, #1
  4048ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4048d2:	3c01      	subs	r4, #1
  4048d4:	f855 3904 	ldr.w	r3, [r5], #-4
  4048d8:	4798      	blx	r3
  4048da:	2c00      	cmp	r4, #0
  4048dc:	d1f9      	bne.n	4048d2 <__libc_fini_array+0x16>
  4048de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4048e2:	f002 bee7 	b.w	4076b4 <_fini>
  4048e6:	bf00      	nop
  4048e8:	004076c4 	.word	0x004076c4
  4048ec:	004076c0 	.word	0x004076c0

004048f0 <_localeconv_r>:
  4048f0:	4a04      	ldr	r2, [pc, #16]	; (404904 <_localeconv_r+0x14>)
  4048f2:	4b05      	ldr	r3, [pc, #20]	; (404908 <_localeconv_r+0x18>)
  4048f4:	6812      	ldr	r2, [r2, #0]
  4048f6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4048f8:	2800      	cmp	r0, #0
  4048fa:	bf08      	it	eq
  4048fc:	4618      	moveq	r0, r3
  4048fe:	30f0      	adds	r0, #240	; 0xf0
  404900:	4770      	bx	lr
  404902:	bf00      	nop
  404904:	20400020 	.word	0x20400020
  404908:	20400864 	.word	0x20400864

0040490c <__retarget_lock_acquire_recursive>:
  40490c:	4770      	bx	lr
  40490e:	bf00      	nop

00404910 <__retarget_lock_release_recursive>:
  404910:	4770      	bx	lr
  404912:	bf00      	nop

00404914 <_malloc_r>:
  404914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404918:	f101 060b 	add.w	r6, r1, #11
  40491c:	2e16      	cmp	r6, #22
  40491e:	b083      	sub	sp, #12
  404920:	4605      	mov	r5, r0
  404922:	f240 809e 	bls.w	404a62 <_malloc_r+0x14e>
  404926:	f036 0607 	bics.w	r6, r6, #7
  40492a:	f100 80bd 	bmi.w	404aa8 <_malloc_r+0x194>
  40492e:	42b1      	cmp	r1, r6
  404930:	f200 80ba 	bhi.w	404aa8 <_malloc_r+0x194>
  404934:	f000 fb8e 	bl	405054 <__malloc_lock>
  404938:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  40493c:	f0c0 8293 	bcc.w	404e66 <_malloc_r+0x552>
  404940:	0a73      	lsrs	r3, r6, #9
  404942:	f000 80b8 	beq.w	404ab6 <_malloc_r+0x1a2>
  404946:	2b04      	cmp	r3, #4
  404948:	f200 8179 	bhi.w	404c3e <_malloc_r+0x32a>
  40494c:	09b3      	lsrs	r3, r6, #6
  40494e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404952:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404956:	00c3      	lsls	r3, r0, #3
  404958:	4fbf      	ldr	r7, [pc, #764]	; (404c58 <_malloc_r+0x344>)
  40495a:	443b      	add	r3, r7
  40495c:	f1a3 0108 	sub.w	r1, r3, #8
  404960:	685c      	ldr	r4, [r3, #4]
  404962:	42a1      	cmp	r1, r4
  404964:	d106      	bne.n	404974 <_malloc_r+0x60>
  404966:	e00c      	b.n	404982 <_malloc_r+0x6e>
  404968:	2a00      	cmp	r2, #0
  40496a:	f280 80aa 	bge.w	404ac2 <_malloc_r+0x1ae>
  40496e:	68e4      	ldr	r4, [r4, #12]
  404970:	42a1      	cmp	r1, r4
  404972:	d006      	beq.n	404982 <_malloc_r+0x6e>
  404974:	6863      	ldr	r3, [r4, #4]
  404976:	f023 0303 	bic.w	r3, r3, #3
  40497a:	1b9a      	subs	r2, r3, r6
  40497c:	2a0f      	cmp	r2, #15
  40497e:	ddf3      	ble.n	404968 <_malloc_r+0x54>
  404980:	4670      	mov	r0, lr
  404982:	693c      	ldr	r4, [r7, #16]
  404984:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 404c6c <_malloc_r+0x358>
  404988:	4574      	cmp	r4, lr
  40498a:	f000 81ab 	beq.w	404ce4 <_malloc_r+0x3d0>
  40498e:	6863      	ldr	r3, [r4, #4]
  404990:	f023 0303 	bic.w	r3, r3, #3
  404994:	1b9a      	subs	r2, r3, r6
  404996:	2a0f      	cmp	r2, #15
  404998:	f300 8190 	bgt.w	404cbc <_malloc_r+0x3a8>
  40499c:	2a00      	cmp	r2, #0
  40499e:	f8c7 e014 	str.w	lr, [r7, #20]
  4049a2:	f8c7 e010 	str.w	lr, [r7, #16]
  4049a6:	f280 809d 	bge.w	404ae4 <_malloc_r+0x1d0>
  4049aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4049ae:	f080 8161 	bcs.w	404c74 <_malloc_r+0x360>
  4049b2:	08db      	lsrs	r3, r3, #3
  4049b4:	f103 0c01 	add.w	ip, r3, #1
  4049b8:	1099      	asrs	r1, r3, #2
  4049ba:	687a      	ldr	r2, [r7, #4]
  4049bc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4049c0:	f8c4 8008 	str.w	r8, [r4, #8]
  4049c4:	2301      	movs	r3, #1
  4049c6:	408b      	lsls	r3, r1
  4049c8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  4049cc:	4313      	orrs	r3, r2
  4049ce:	3908      	subs	r1, #8
  4049d0:	60e1      	str	r1, [r4, #12]
  4049d2:	607b      	str	r3, [r7, #4]
  4049d4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  4049d8:	f8c8 400c 	str.w	r4, [r8, #12]
  4049dc:	1082      	asrs	r2, r0, #2
  4049de:	2401      	movs	r4, #1
  4049e0:	4094      	lsls	r4, r2
  4049e2:	429c      	cmp	r4, r3
  4049e4:	f200 808b 	bhi.w	404afe <_malloc_r+0x1ea>
  4049e8:	421c      	tst	r4, r3
  4049ea:	d106      	bne.n	4049fa <_malloc_r+0xe6>
  4049ec:	f020 0003 	bic.w	r0, r0, #3
  4049f0:	0064      	lsls	r4, r4, #1
  4049f2:	421c      	tst	r4, r3
  4049f4:	f100 0004 	add.w	r0, r0, #4
  4049f8:	d0fa      	beq.n	4049f0 <_malloc_r+0xdc>
  4049fa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4049fe:	46cc      	mov	ip, r9
  404a00:	4680      	mov	r8, r0
  404a02:	f8dc 300c 	ldr.w	r3, [ip, #12]
  404a06:	459c      	cmp	ip, r3
  404a08:	d107      	bne.n	404a1a <_malloc_r+0x106>
  404a0a:	e16d      	b.n	404ce8 <_malloc_r+0x3d4>
  404a0c:	2a00      	cmp	r2, #0
  404a0e:	f280 817b 	bge.w	404d08 <_malloc_r+0x3f4>
  404a12:	68db      	ldr	r3, [r3, #12]
  404a14:	459c      	cmp	ip, r3
  404a16:	f000 8167 	beq.w	404ce8 <_malloc_r+0x3d4>
  404a1a:	6859      	ldr	r1, [r3, #4]
  404a1c:	f021 0103 	bic.w	r1, r1, #3
  404a20:	1b8a      	subs	r2, r1, r6
  404a22:	2a0f      	cmp	r2, #15
  404a24:	ddf2      	ble.n	404a0c <_malloc_r+0xf8>
  404a26:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  404a2a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404a2e:	9300      	str	r3, [sp, #0]
  404a30:	199c      	adds	r4, r3, r6
  404a32:	4628      	mov	r0, r5
  404a34:	f046 0601 	orr.w	r6, r6, #1
  404a38:	f042 0501 	orr.w	r5, r2, #1
  404a3c:	605e      	str	r6, [r3, #4]
  404a3e:	f8c8 c00c 	str.w	ip, [r8, #12]
  404a42:	f8cc 8008 	str.w	r8, [ip, #8]
  404a46:	617c      	str	r4, [r7, #20]
  404a48:	613c      	str	r4, [r7, #16]
  404a4a:	f8c4 e00c 	str.w	lr, [r4, #12]
  404a4e:	f8c4 e008 	str.w	lr, [r4, #8]
  404a52:	6065      	str	r5, [r4, #4]
  404a54:	505a      	str	r2, [r3, r1]
  404a56:	f000 fb03 	bl	405060 <__malloc_unlock>
  404a5a:	9b00      	ldr	r3, [sp, #0]
  404a5c:	f103 0408 	add.w	r4, r3, #8
  404a60:	e01e      	b.n	404aa0 <_malloc_r+0x18c>
  404a62:	2910      	cmp	r1, #16
  404a64:	d820      	bhi.n	404aa8 <_malloc_r+0x194>
  404a66:	f000 faf5 	bl	405054 <__malloc_lock>
  404a6a:	2610      	movs	r6, #16
  404a6c:	2318      	movs	r3, #24
  404a6e:	2002      	movs	r0, #2
  404a70:	4f79      	ldr	r7, [pc, #484]	; (404c58 <_malloc_r+0x344>)
  404a72:	443b      	add	r3, r7
  404a74:	f1a3 0208 	sub.w	r2, r3, #8
  404a78:	685c      	ldr	r4, [r3, #4]
  404a7a:	4294      	cmp	r4, r2
  404a7c:	f000 813d 	beq.w	404cfa <_malloc_r+0x3e6>
  404a80:	6863      	ldr	r3, [r4, #4]
  404a82:	68e1      	ldr	r1, [r4, #12]
  404a84:	68a6      	ldr	r6, [r4, #8]
  404a86:	f023 0303 	bic.w	r3, r3, #3
  404a8a:	4423      	add	r3, r4
  404a8c:	4628      	mov	r0, r5
  404a8e:	685a      	ldr	r2, [r3, #4]
  404a90:	60f1      	str	r1, [r6, #12]
  404a92:	f042 0201 	orr.w	r2, r2, #1
  404a96:	608e      	str	r6, [r1, #8]
  404a98:	605a      	str	r2, [r3, #4]
  404a9a:	f000 fae1 	bl	405060 <__malloc_unlock>
  404a9e:	3408      	adds	r4, #8
  404aa0:	4620      	mov	r0, r4
  404aa2:	b003      	add	sp, #12
  404aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404aa8:	2400      	movs	r4, #0
  404aaa:	230c      	movs	r3, #12
  404aac:	4620      	mov	r0, r4
  404aae:	602b      	str	r3, [r5, #0]
  404ab0:	b003      	add	sp, #12
  404ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ab6:	2040      	movs	r0, #64	; 0x40
  404ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
  404abc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404ac0:	e74a      	b.n	404958 <_malloc_r+0x44>
  404ac2:	4423      	add	r3, r4
  404ac4:	68e1      	ldr	r1, [r4, #12]
  404ac6:	685a      	ldr	r2, [r3, #4]
  404ac8:	68a6      	ldr	r6, [r4, #8]
  404aca:	f042 0201 	orr.w	r2, r2, #1
  404ace:	60f1      	str	r1, [r6, #12]
  404ad0:	4628      	mov	r0, r5
  404ad2:	608e      	str	r6, [r1, #8]
  404ad4:	605a      	str	r2, [r3, #4]
  404ad6:	f000 fac3 	bl	405060 <__malloc_unlock>
  404ada:	3408      	adds	r4, #8
  404adc:	4620      	mov	r0, r4
  404ade:	b003      	add	sp, #12
  404ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ae4:	4423      	add	r3, r4
  404ae6:	4628      	mov	r0, r5
  404ae8:	685a      	ldr	r2, [r3, #4]
  404aea:	f042 0201 	orr.w	r2, r2, #1
  404aee:	605a      	str	r2, [r3, #4]
  404af0:	f000 fab6 	bl	405060 <__malloc_unlock>
  404af4:	3408      	adds	r4, #8
  404af6:	4620      	mov	r0, r4
  404af8:	b003      	add	sp, #12
  404afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404afe:	68bc      	ldr	r4, [r7, #8]
  404b00:	6863      	ldr	r3, [r4, #4]
  404b02:	f023 0803 	bic.w	r8, r3, #3
  404b06:	45b0      	cmp	r8, r6
  404b08:	d304      	bcc.n	404b14 <_malloc_r+0x200>
  404b0a:	eba8 0306 	sub.w	r3, r8, r6
  404b0e:	2b0f      	cmp	r3, #15
  404b10:	f300 8085 	bgt.w	404c1e <_malloc_r+0x30a>
  404b14:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404c70 <_malloc_r+0x35c>
  404b18:	4b50      	ldr	r3, [pc, #320]	; (404c5c <_malloc_r+0x348>)
  404b1a:	f8d9 2000 	ldr.w	r2, [r9]
  404b1e:	681b      	ldr	r3, [r3, #0]
  404b20:	3201      	adds	r2, #1
  404b22:	4433      	add	r3, r6
  404b24:	eb04 0a08 	add.w	sl, r4, r8
  404b28:	f000 8155 	beq.w	404dd6 <_malloc_r+0x4c2>
  404b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404b30:	330f      	adds	r3, #15
  404b32:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  404b36:	f02b 0b0f 	bic.w	fp, fp, #15
  404b3a:	4659      	mov	r1, fp
  404b3c:	4628      	mov	r0, r5
  404b3e:	f000 fd8f 	bl	405660 <_sbrk_r>
  404b42:	1c41      	adds	r1, r0, #1
  404b44:	4602      	mov	r2, r0
  404b46:	f000 80fc 	beq.w	404d42 <_malloc_r+0x42e>
  404b4a:	4582      	cmp	sl, r0
  404b4c:	f200 80f7 	bhi.w	404d3e <_malloc_r+0x42a>
  404b50:	4b43      	ldr	r3, [pc, #268]	; (404c60 <_malloc_r+0x34c>)
  404b52:	6819      	ldr	r1, [r3, #0]
  404b54:	4459      	add	r1, fp
  404b56:	6019      	str	r1, [r3, #0]
  404b58:	f000 814d 	beq.w	404df6 <_malloc_r+0x4e2>
  404b5c:	f8d9 0000 	ldr.w	r0, [r9]
  404b60:	3001      	adds	r0, #1
  404b62:	bf1b      	ittet	ne
  404b64:	eba2 0a0a 	subne.w	sl, r2, sl
  404b68:	4451      	addne	r1, sl
  404b6a:	f8c9 2000 	streq.w	r2, [r9]
  404b6e:	6019      	strne	r1, [r3, #0]
  404b70:	f012 0107 	ands.w	r1, r2, #7
  404b74:	f000 8115 	beq.w	404da2 <_malloc_r+0x48e>
  404b78:	f1c1 0008 	rsb	r0, r1, #8
  404b7c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404b80:	4402      	add	r2, r0
  404b82:	3108      	adds	r1, #8
  404b84:	eb02 090b 	add.w	r9, r2, fp
  404b88:	f3c9 090b 	ubfx	r9, r9, #0, #12
  404b8c:	eba1 0909 	sub.w	r9, r1, r9
  404b90:	4649      	mov	r1, r9
  404b92:	4628      	mov	r0, r5
  404b94:	9301      	str	r3, [sp, #4]
  404b96:	9200      	str	r2, [sp, #0]
  404b98:	f000 fd62 	bl	405660 <_sbrk_r>
  404b9c:	1c43      	adds	r3, r0, #1
  404b9e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404ba2:	f000 8143 	beq.w	404e2c <_malloc_r+0x518>
  404ba6:	1a80      	subs	r0, r0, r2
  404ba8:	4448      	add	r0, r9
  404baa:	f040 0001 	orr.w	r0, r0, #1
  404bae:	6819      	ldr	r1, [r3, #0]
  404bb0:	60ba      	str	r2, [r7, #8]
  404bb2:	4449      	add	r1, r9
  404bb4:	42bc      	cmp	r4, r7
  404bb6:	6050      	str	r0, [r2, #4]
  404bb8:	6019      	str	r1, [r3, #0]
  404bba:	d017      	beq.n	404bec <_malloc_r+0x2d8>
  404bbc:	f1b8 0f0f 	cmp.w	r8, #15
  404bc0:	f240 80fb 	bls.w	404dba <_malloc_r+0x4a6>
  404bc4:	6860      	ldr	r0, [r4, #4]
  404bc6:	f1a8 020c 	sub.w	r2, r8, #12
  404bca:	f022 0207 	bic.w	r2, r2, #7
  404bce:	eb04 0e02 	add.w	lr, r4, r2
  404bd2:	f000 0001 	and.w	r0, r0, #1
  404bd6:	f04f 0c05 	mov.w	ip, #5
  404bda:	4310      	orrs	r0, r2
  404bdc:	2a0f      	cmp	r2, #15
  404bde:	6060      	str	r0, [r4, #4]
  404be0:	f8ce c004 	str.w	ip, [lr, #4]
  404be4:	f8ce c008 	str.w	ip, [lr, #8]
  404be8:	f200 8117 	bhi.w	404e1a <_malloc_r+0x506>
  404bec:	4b1d      	ldr	r3, [pc, #116]	; (404c64 <_malloc_r+0x350>)
  404bee:	68bc      	ldr	r4, [r7, #8]
  404bf0:	681a      	ldr	r2, [r3, #0]
  404bf2:	4291      	cmp	r1, r2
  404bf4:	bf88      	it	hi
  404bf6:	6019      	strhi	r1, [r3, #0]
  404bf8:	4b1b      	ldr	r3, [pc, #108]	; (404c68 <_malloc_r+0x354>)
  404bfa:	681a      	ldr	r2, [r3, #0]
  404bfc:	4291      	cmp	r1, r2
  404bfe:	6862      	ldr	r2, [r4, #4]
  404c00:	bf88      	it	hi
  404c02:	6019      	strhi	r1, [r3, #0]
  404c04:	f022 0203 	bic.w	r2, r2, #3
  404c08:	4296      	cmp	r6, r2
  404c0a:	eba2 0306 	sub.w	r3, r2, r6
  404c0e:	d801      	bhi.n	404c14 <_malloc_r+0x300>
  404c10:	2b0f      	cmp	r3, #15
  404c12:	dc04      	bgt.n	404c1e <_malloc_r+0x30a>
  404c14:	4628      	mov	r0, r5
  404c16:	f000 fa23 	bl	405060 <__malloc_unlock>
  404c1a:	2400      	movs	r4, #0
  404c1c:	e740      	b.n	404aa0 <_malloc_r+0x18c>
  404c1e:	19a2      	adds	r2, r4, r6
  404c20:	f043 0301 	orr.w	r3, r3, #1
  404c24:	f046 0601 	orr.w	r6, r6, #1
  404c28:	6066      	str	r6, [r4, #4]
  404c2a:	4628      	mov	r0, r5
  404c2c:	60ba      	str	r2, [r7, #8]
  404c2e:	6053      	str	r3, [r2, #4]
  404c30:	f000 fa16 	bl	405060 <__malloc_unlock>
  404c34:	3408      	adds	r4, #8
  404c36:	4620      	mov	r0, r4
  404c38:	b003      	add	sp, #12
  404c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c3e:	2b14      	cmp	r3, #20
  404c40:	d971      	bls.n	404d26 <_malloc_r+0x412>
  404c42:	2b54      	cmp	r3, #84	; 0x54
  404c44:	f200 80a3 	bhi.w	404d8e <_malloc_r+0x47a>
  404c48:	0b33      	lsrs	r3, r6, #12
  404c4a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  404c4e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404c52:	00c3      	lsls	r3, r0, #3
  404c54:	e680      	b.n	404958 <_malloc_r+0x44>
  404c56:	bf00      	nop
  404c58:	20400454 	.word	0x20400454
  404c5c:	20400ca8 	.word	0x20400ca8
  404c60:	20400c78 	.word	0x20400c78
  404c64:	20400ca0 	.word	0x20400ca0
  404c68:	20400ca4 	.word	0x20400ca4
  404c6c:	2040045c 	.word	0x2040045c
  404c70:	2040085c 	.word	0x2040085c
  404c74:	0a5a      	lsrs	r2, r3, #9
  404c76:	2a04      	cmp	r2, #4
  404c78:	d95b      	bls.n	404d32 <_malloc_r+0x41e>
  404c7a:	2a14      	cmp	r2, #20
  404c7c:	f200 80ae 	bhi.w	404ddc <_malloc_r+0x4c8>
  404c80:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404c84:	00c9      	lsls	r1, r1, #3
  404c86:	325b      	adds	r2, #91	; 0x5b
  404c88:	eb07 0c01 	add.w	ip, r7, r1
  404c8c:	5879      	ldr	r1, [r7, r1]
  404c8e:	f1ac 0c08 	sub.w	ip, ip, #8
  404c92:	458c      	cmp	ip, r1
  404c94:	f000 8088 	beq.w	404da8 <_malloc_r+0x494>
  404c98:	684a      	ldr	r2, [r1, #4]
  404c9a:	f022 0203 	bic.w	r2, r2, #3
  404c9e:	4293      	cmp	r3, r2
  404ca0:	d273      	bcs.n	404d8a <_malloc_r+0x476>
  404ca2:	6889      	ldr	r1, [r1, #8]
  404ca4:	458c      	cmp	ip, r1
  404ca6:	d1f7      	bne.n	404c98 <_malloc_r+0x384>
  404ca8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404cac:	687b      	ldr	r3, [r7, #4]
  404cae:	60e2      	str	r2, [r4, #12]
  404cb0:	f8c4 c008 	str.w	ip, [r4, #8]
  404cb4:	6094      	str	r4, [r2, #8]
  404cb6:	f8cc 400c 	str.w	r4, [ip, #12]
  404cba:	e68f      	b.n	4049dc <_malloc_r+0xc8>
  404cbc:	19a1      	adds	r1, r4, r6
  404cbe:	f046 0c01 	orr.w	ip, r6, #1
  404cc2:	f042 0601 	orr.w	r6, r2, #1
  404cc6:	f8c4 c004 	str.w	ip, [r4, #4]
  404cca:	4628      	mov	r0, r5
  404ccc:	6179      	str	r1, [r7, #20]
  404cce:	6139      	str	r1, [r7, #16]
  404cd0:	f8c1 e00c 	str.w	lr, [r1, #12]
  404cd4:	f8c1 e008 	str.w	lr, [r1, #8]
  404cd8:	604e      	str	r6, [r1, #4]
  404cda:	50e2      	str	r2, [r4, r3]
  404cdc:	f000 f9c0 	bl	405060 <__malloc_unlock>
  404ce0:	3408      	adds	r4, #8
  404ce2:	e6dd      	b.n	404aa0 <_malloc_r+0x18c>
  404ce4:	687b      	ldr	r3, [r7, #4]
  404ce6:	e679      	b.n	4049dc <_malloc_r+0xc8>
  404ce8:	f108 0801 	add.w	r8, r8, #1
  404cec:	f018 0f03 	tst.w	r8, #3
  404cf0:	f10c 0c08 	add.w	ip, ip, #8
  404cf4:	f47f ae85 	bne.w	404a02 <_malloc_r+0xee>
  404cf8:	e02d      	b.n	404d56 <_malloc_r+0x442>
  404cfa:	68dc      	ldr	r4, [r3, #12]
  404cfc:	42a3      	cmp	r3, r4
  404cfe:	bf08      	it	eq
  404d00:	3002      	addeq	r0, #2
  404d02:	f43f ae3e 	beq.w	404982 <_malloc_r+0x6e>
  404d06:	e6bb      	b.n	404a80 <_malloc_r+0x16c>
  404d08:	4419      	add	r1, r3
  404d0a:	461c      	mov	r4, r3
  404d0c:	684a      	ldr	r2, [r1, #4]
  404d0e:	68db      	ldr	r3, [r3, #12]
  404d10:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404d14:	f042 0201 	orr.w	r2, r2, #1
  404d18:	604a      	str	r2, [r1, #4]
  404d1a:	4628      	mov	r0, r5
  404d1c:	60f3      	str	r3, [r6, #12]
  404d1e:	609e      	str	r6, [r3, #8]
  404d20:	f000 f99e 	bl	405060 <__malloc_unlock>
  404d24:	e6bc      	b.n	404aa0 <_malloc_r+0x18c>
  404d26:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  404d2a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404d2e:	00c3      	lsls	r3, r0, #3
  404d30:	e612      	b.n	404958 <_malloc_r+0x44>
  404d32:	099a      	lsrs	r2, r3, #6
  404d34:	f102 0139 	add.w	r1, r2, #57	; 0x39
  404d38:	00c9      	lsls	r1, r1, #3
  404d3a:	3238      	adds	r2, #56	; 0x38
  404d3c:	e7a4      	b.n	404c88 <_malloc_r+0x374>
  404d3e:	42bc      	cmp	r4, r7
  404d40:	d054      	beq.n	404dec <_malloc_r+0x4d8>
  404d42:	68bc      	ldr	r4, [r7, #8]
  404d44:	6862      	ldr	r2, [r4, #4]
  404d46:	f022 0203 	bic.w	r2, r2, #3
  404d4a:	e75d      	b.n	404c08 <_malloc_r+0x2f4>
  404d4c:	f859 3908 	ldr.w	r3, [r9], #-8
  404d50:	4599      	cmp	r9, r3
  404d52:	f040 8086 	bne.w	404e62 <_malloc_r+0x54e>
  404d56:	f010 0f03 	tst.w	r0, #3
  404d5a:	f100 30ff 	add.w	r0, r0, #4294967295
  404d5e:	d1f5      	bne.n	404d4c <_malloc_r+0x438>
  404d60:	687b      	ldr	r3, [r7, #4]
  404d62:	ea23 0304 	bic.w	r3, r3, r4
  404d66:	607b      	str	r3, [r7, #4]
  404d68:	0064      	lsls	r4, r4, #1
  404d6a:	429c      	cmp	r4, r3
  404d6c:	f63f aec7 	bhi.w	404afe <_malloc_r+0x1ea>
  404d70:	2c00      	cmp	r4, #0
  404d72:	f43f aec4 	beq.w	404afe <_malloc_r+0x1ea>
  404d76:	421c      	tst	r4, r3
  404d78:	4640      	mov	r0, r8
  404d7a:	f47f ae3e 	bne.w	4049fa <_malloc_r+0xe6>
  404d7e:	0064      	lsls	r4, r4, #1
  404d80:	421c      	tst	r4, r3
  404d82:	f100 0004 	add.w	r0, r0, #4
  404d86:	d0fa      	beq.n	404d7e <_malloc_r+0x46a>
  404d88:	e637      	b.n	4049fa <_malloc_r+0xe6>
  404d8a:	468c      	mov	ip, r1
  404d8c:	e78c      	b.n	404ca8 <_malloc_r+0x394>
  404d8e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404d92:	d815      	bhi.n	404dc0 <_malloc_r+0x4ac>
  404d94:	0bf3      	lsrs	r3, r6, #15
  404d96:	f103 0078 	add.w	r0, r3, #120	; 0x78
  404d9a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  404d9e:	00c3      	lsls	r3, r0, #3
  404da0:	e5da      	b.n	404958 <_malloc_r+0x44>
  404da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404da6:	e6ed      	b.n	404b84 <_malloc_r+0x270>
  404da8:	687b      	ldr	r3, [r7, #4]
  404daa:	1092      	asrs	r2, r2, #2
  404dac:	2101      	movs	r1, #1
  404dae:	fa01 f202 	lsl.w	r2, r1, r2
  404db2:	4313      	orrs	r3, r2
  404db4:	607b      	str	r3, [r7, #4]
  404db6:	4662      	mov	r2, ip
  404db8:	e779      	b.n	404cae <_malloc_r+0x39a>
  404dba:	2301      	movs	r3, #1
  404dbc:	6053      	str	r3, [r2, #4]
  404dbe:	e729      	b.n	404c14 <_malloc_r+0x300>
  404dc0:	f240 5254 	movw	r2, #1364	; 0x554
  404dc4:	4293      	cmp	r3, r2
  404dc6:	d822      	bhi.n	404e0e <_malloc_r+0x4fa>
  404dc8:	0cb3      	lsrs	r3, r6, #18
  404dca:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404dce:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404dd2:	00c3      	lsls	r3, r0, #3
  404dd4:	e5c0      	b.n	404958 <_malloc_r+0x44>
  404dd6:	f103 0b10 	add.w	fp, r3, #16
  404dda:	e6ae      	b.n	404b3a <_malloc_r+0x226>
  404ddc:	2a54      	cmp	r2, #84	; 0x54
  404dde:	d829      	bhi.n	404e34 <_malloc_r+0x520>
  404de0:	0b1a      	lsrs	r2, r3, #12
  404de2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404de6:	00c9      	lsls	r1, r1, #3
  404de8:	326e      	adds	r2, #110	; 0x6e
  404dea:	e74d      	b.n	404c88 <_malloc_r+0x374>
  404dec:	4b20      	ldr	r3, [pc, #128]	; (404e70 <_malloc_r+0x55c>)
  404dee:	6819      	ldr	r1, [r3, #0]
  404df0:	4459      	add	r1, fp
  404df2:	6019      	str	r1, [r3, #0]
  404df4:	e6b2      	b.n	404b5c <_malloc_r+0x248>
  404df6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  404dfa:	2800      	cmp	r0, #0
  404dfc:	f47f aeae 	bne.w	404b5c <_malloc_r+0x248>
  404e00:	eb08 030b 	add.w	r3, r8, fp
  404e04:	68ba      	ldr	r2, [r7, #8]
  404e06:	f043 0301 	orr.w	r3, r3, #1
  404e0a:	6053      	str	r3, [r2, #4]
  404e0c:	e6ee      	b.n	404bec <_malloc_r+0x2d8>
  404e0e:	207f      	movs	r0, #127	; 0x7f
  404e10:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404e14:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  404e18:	e59e      	b.n	404958 <_malloc_r+0x44>
  404e1a:	f104 0108 	add.w	r1, r4, #8
  404e1e:	4628      	mov	r0, r5
  404e20:	9300      	str	r3, [sp, #0]
  404e22:	f000 fe1b 	bl	405a5c <_free_r>
  404e26:	9b00      	ldr	r3, [sp, #0]
  404e28:	6819      	ldr	r1, [r3, #0]
  404e2a:	e6df      	b.n	404bec <_malloc_r+0x2d8>
  404e2c:	2001      	movs	r0, #1
  404e2e:	f04f 0900 	mov.w	r9, #0
  404e32:	e6bc      	b.n	404bae <_malloc_r+0x29a>
  404e34:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  404e38:	d805      	bhi.n	404e46 <_malloc_r+0x532>
  404e3a:	0bda      	lsrs	r2, r3, #15
  404e3c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404e40:	00c9      	lsls	r1, r1, #3
  404e42:	3277      	adds	r2, #119	; 0x77
  404e44:	e720      	b.n	404c88 <_malloc_r+0x374>
  404e46:	f240 5154 	movw	r1, #1364	; 0x554
  404e4a:	428a      	cmp	r2, r1
  404e4c:	d805      	bhi.n	404e5a <_malloc_r+0x546>
  404e4e:	0c9a      	lsrs	r2, r3, #18
  404e50:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404e54:	00c9      	lsls	r1, r1, #3
  404e56:	327c      	adds	r2, #124	; 0x7c
  404e58:	e716      	b.n	404c88 <_malloc_r+0x374>
  404e5a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  404e5e:	227e      	movs	r2, #126	; 0x7e
  404e60:	e712      	b.n	404c88 <_malloc_r+0x374>
  404e62:	687b      	ldr	r3, [r7, #4]
  404e64:	e780      	b.n	404d68 <_malloc_r+0x454>
  404e66:	08f0      	lsrs	r0, r6, #3
  404e68:	f106 0308 	add.w	r3, r6, #8
  404e6c:	e600      	b.n	404a70 <_malloc_r+0x15c>
  404e6e:	bf00      	nop
  404e70:	20400c78 	.word	0x20400c78
	...

00404e80 <memchr>:
  404e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404e84:	2a10      	cmp	r2, #16
  404e86:	db2b      	blt.n	404ee0 <memchr+0x60>
  404e88:	f010 0f07 	tst.w	r0, #7
  404e8c:	d008      	beq.n	404ea0 <memchr+0x20>
  404e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404e92:	3a01      	subs	r2, #1
  404e94:	428b      	cmp	r3, r1
  404e96:	d02d      	beq.n	404ef4 <memchr+0x74>
  404e98:	f010 0f07 	tst.w	r0, #7
  404e9c:	b342      	cbz	r2, 404ef0 <memchr+0x70>
  404e9e:	d1f6      	bne.n	404e8e <memchr+0xe>
  404ea0:	b4f0      	push	{r4, r5, r6, r7}
  404ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  404eaa:	f022 0407 	bic.w	r4, r2, #7
  404eae:	f07f 0700 	mvns.w	r7, #0
  404eb2:	2300      	movs	r3, #0
  404eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404eb8:	3c08      	subs	r4, #8
  404eba:	ea85 0501 	eor.w	r5, r5, r1
  404ebe:	ea86 0601 	eor.w	r6, r6, r1
  404ec2:	fa85 f547 	uadd8	r5, r5, r7
  404ec6:	faa3 f587 	sel	r5, r3, r7
  404eca:	fa86 f647 	uadd8	r6, r6, r7
  404ece:	faa5 f687 	sel	r6, r5, r7
  404ed2:	b98e      	cbnz	r6, 404ef8 <memchr+0x78>
  404ed4:	d1ee      	bne.n	404eb4 <memchr+0x34>
  404ed6:	bcf0      	pop	{r4, r5, r6, r7}
  404ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404edc:	f002 0207 	and.w	r2, r2, #7
  404ee0:	b132      	cbz	r2, 404ef0 <memchr+0x70>
  404ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
  404ee6:	3a01      	subs	r2, #1
  404ee8:	ea83 0301 	eor.w	r3, r3, r1
  404eec:	b113      	cbz	r3, 404ef4 <memchr+0x74>
  404eee:	d1f8      	bne.n	404ee2 <memchr+0x62>
  404ef0:	2000      	movs	r0, #0
  404ef2:	4770      	bx	lr
  404ef4:	3801      	subs	r0, #1
  404ef6:	4770      	bx	lr
  404ef8:	2d00      	cmp	r5, #0
  404efa:	bf06      	itte	eq
  404efc:	4635      	moveq	r5, r6
  404efe:	3803      	subeq	r0, #3
  404f00:	3807      	subne	r0, #7
  404f02:	f015 0f01 	tst.w	r5, #1
  404f06:	d107      	bne.n	404f18 <memchr+0x98>
  404f08:	3001      	adds	r0, #1
  404f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
  404f0e:	bf02      	ittt	eq
  404f10:	3001      	addeq	r0, #1
  404f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  404f16:	3001      	addeq	r0, #1
  404f18:	bcf0      	pop	{r4, r5, r6, r7}
  404f1a:	3801      	subs	r0, #1
  404f1c:	4770      	bx	lr
  404f1e:	bf00      	nop

00404f20 <memcpy>:
  404f20:	4684      	mov	ip, r0
  404f22:	ea41 0300 	orr.w	r3, r1, r0
  404f26:	f013 0303 	ands.w	r3, r3, #3
  404f2a:	d16d      	bne.n	405008 <memcpy+0xe8>
  404f2c:	3a40      	subs	r2, #64	; 0x40
  404f2e:	d341      	bcc.n	404fb4 <memcpy+0x94>
  404f30:	f851 3b04 	ldr.w	r3, [r1], #4
  404f34:	f840 3b04 	str.w	r3, [r0], #4
  404f38:	f851 3b04 	ldr.w	r3, [r1], #4
  404f3c:	f840 3b04 	str.w	r3, [r0], #4
  404f40:	f851 3b04 	ldr.w	r3, [r1], #4
  404f44:	f840 3b04 	str.w	r3, [r0], #4
  404f48:	f851 3b04 	ldr.w	r3, [r1], #4
  404f4c:	f840 3b04 	str.w	r3, [r0], #4
  404f50:	f851 3b04 	ldr.w	r3, [r1], #4
  404f54:	f840 3b04 	str.w	r3, [r0], #4
  404f58:	f851 3b04 	ldr.w	r3, [r1], #4
  404f5c:	f840 3b04 	str.w	r3, [r0], #4
  404f60:	f851 3b04 	ldr.w	r3, [r1], #4
  404f64:	f840 3b04 	str.w	r3, [r0], #4
  404f68:	f851 3b04 	ldr.w	r3, [r1], #4
  404f6c:	f840 3b04 	str.w	r3, [r0], #4
  404f70:	f851 3b04 	ldr.w	r3, [r1], #4
  404f74:	f840 3b04 	str.w	r3, [r0], #4
  404f78:	f851 3b04 	ldr.w	r3, [r1], #4
  404f7c:	f840 3b04 	str.w	r3, [r0], #4
  404f80:	f851 3b04 	ldr.w	r3, [r1], #4
  404f84:	f840 3b04 	str.w	r3, [r0], #4
  404f88:	f851 3b04 	ldr.w	r3, [r1], #4
  404f8c:	f840 3b04 	str.w	r3, [r0], #4
  404f90:	f851 3b04 	ldr.w	r3, [r1], #4
  404f94:	f840 3b04 	str.w	r3, [r0], #4
  404f98:	f851 3b04 	ldr.w	r3, [r1], #4
  404f9c:	f840 3b04 	str.w	r3, [r0], #4
  404fa0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fa4:	f840 3b04 	str.w	r3, [r0], #4
  404fa8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fac:	f840 3b04 	str.w	r3, [r0], #4
  404fb0:	3a40      	subs	r2, #64	; 0x40
  404fb2:	d2bd      	bcs.n	404f30 <memcpy+0x10>
  404fb4:	3230      	adds	r2, #48	; 0x30
  404fb6:	d311      	bcc.n	404fdc <memcpy+0xbc>
  404fb8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fbc:	f840 3b04 	str.w	r3, [r0], #4
  404fc0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fc4:	f840 3b04 	str.w	r3, [r0], #4
  404fc8:	f851 3b04 	ldr.w	r3, [r1], #4
  404fcc:	f840 3b04 	str.w	r3, [r0], #4
  404fd0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fd4:	f840 3b04 	str.w	r3, [r0], #4
  404fd8:	3a10      	subs	r2, #16
  404fda:	d2ed      	bcs.n	404fb8 <memcpy+0x98>
  404fdc:	320c      	adds	r2, #12
  404fde:	d305      	bcc.n	404fec <memcpy+0xcc>
  404fe0:	f851 3b04 	ldr.w	r3, [r1], #4
  404fe4:	f840 3b04 	str.w	r3, [r0], #4
  404fe8:	3a04      	subs	r2, #4
  404fea:	d2f9      	bcs.n	404fe0 <memcpy+0xc0>
  404fec:	3204      	adds	r2, #4
  404fee:	d008      	beq.n	405002 <memcpy+0xe2>
  404ff0:	07d2      	lsls	r2, r2, #31
  404ff2:	bf1c      	itt	ne
  404ff4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404ff8:	f800 3b01 	strbne.w	r3, [r0], #1
  404ffc:	d301      	bcc.n	405002 <memcpy+0xe2>
  404ffe:	880b      	ldrh	r3, [r1, #0]
  405000:	8003      	strh	r3, [r0, #0]
  405002:	4660      	mov	r0, ip
  405004:	4770      	bx	lr
  405006:	bf00      	nop
  405008:	2a08      	cmp	r2, #8
  40500a:	d313      	bcc.n	405034 <memcpy+0x114>
  40500c:	078b      	lsls	r3, r1, #30
  40500e:	d08d      	beq.n	404f2c <memcpy+0xc>
  405010:	f010 0303 	ands.w	r3, r0, #3
  405014:	d08a      	beq.n	404f2c <memcpy+0xc>
  405016:	f1c3 0304 	rsb	r3, r3, #4
  40501a:	1ad2      	subs	r2, r2, r3
  40501c:	07db      	lsls	r3, r3, #31
  40501e:	bf1c      	itt	ne
  405020:	f811 3b01 	ldrbne.w	r3, [r1], #1
  405024:	f800 3b01 	strbne.w	r3, [r0], #1
  405028:	d380      	bcc.n	404f2c <memcpy+0xc>
  40502a:	f831 3b02 	ldrh.w	r3, [r1], #2
  40502e:	f820 3b02 	strh.w	r3, [r0], #2
  405032:	e77b      	b.n	404f2c <memcpy+0xc>
  405034:	3a04      	subs	r2, #4
  405036:	d3d9      	bcc.n	404fec <memcpy+0xcc>
  405038:	3a01      	subs	r2, #1
  40503a:	f811 3b01 	ldrb.w	r3, [r1], #1
  40503e:	f800 3b01 	strb.w	r3, [r0], #1
  405042:	d2f9      	bcs.n	405038 <memcpy+0x118>
  405044:	780b      	ldrb	r3, [r1, #0]
  405046:	7003      	strb	r3, [r0, #0]
  405048:	784b      	ldrb	r3, [r1, #1]
  40504a:	7043      	strb	r3, [r0, #1]
  40504c:	788b      	ldrb	r3, [r1, #2]
  40504e:	7083      	strb	r3, [r0, #2]
  405050:	4660      	mov	r0, ip
  405052:	4770      	bx	lr

00405054 <__malloc_lock>:
  405054:	4801      	ldr	r0, [pc, #4]	; (40505c <__malloc_lock+0x8>)
  405056:	f7ff bc59 	b.w	40490c <__retarget_lock_acquire_recursive>
  40505a:	bf00      	nop
  40505c:	20400cbc 	.word	0x20400cbc

00405060 <__malloc_unlock>:
  405060:	4801      	ldr	r0, [pc, #4]	; (405068 <__malloc_unlock+0x8>)
  405062:	f7ff bc55 	b.w	404910 <__retarget_lock_release_recursive>
  405066:	bf00      	nop
  405068:	20400cbc 	.word	0x20400cbc

0040506c <_Balloc>:
  40506c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40506e:	b570      	push	{r4, r5, r6, lr}
  405070:	4605      	mov	r5, r0
  405072:	460c      	mov	r4, r1
  405074:	b14b      	cbz	r3, 40508a <_Balloc+0x1e>
  405076:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  40507a:	b180      	cbz	r0, 40509e <_Balloc+0x32>
  40507c:	6802      	ldr	r2, [r0, #0]
  40507e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  405082:	2300      	movs	r3, #0
  405084:	6103      	str	r3, [r0, #16]
  405086:	60c3      	str	r3, [r0, #12]
  405088:	bd70      	pop	{r4, r5, r6, pc}
  40508a:	2221      	movs	r2, #33	; 0x21
  40508c:	2104      	movs	r1, #4
  40508e:	f000 fc65 	bl	40595c <_calloc_r>
  405092:	64e8      	str	r0, [r5, #76]	; 0x4c
  405094:	4603      	mov	r3, r0
  405096:	2800      	cmp	r0, #0
  405098:	d1ed      	bne.n	405076 <_Balloc+0xa>
  40509a:	2000      	movs	r0, #0
  40509c:	bd70      	pop	{r4, r5, r6, pc}
  40509e:	2101      	movs	r1, #1
  4050a0:	fa01 f604 	lsl.w	r6, r1, r4
  4050a4:	1d72      	adds	r2, r6, #5
  4050a6:	4628      	mov	r0, r5
  4050a8:	0092      	lsls	r2, r2, #2
  4050aa:	f000 fc57 	bl	40595c <_calloc_r>
  4050ae:	2800      	cmp	r0, #0
  4050b0:	d0f3      	beq.n	40509a <_Balloc+0x2e>
  4050b2:	6044      	str	r4, [r0, #4]
  4050b4:	6086      	str	r6, [r0, #8]
  4050b6:	e7e4      	b.n	405082 <_Balloc+0x16>

004050b8 <_Bfree>:
  4050b8:	b131      	cbz	r1, 4050c8 <_Bfree+0x10>
  4050ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4050bc:	684a      	ldr	r2, [r1, #4]
  4050be:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  4050c2:	6008      	str	r0, [r1, #0]
  4050c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  4050c8:	4770      	bx	lr
  4050ca:	bf00      	nop

004050cc <__multadd>:
  4050cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4050ce:	690c      	ldr	r4, [r1, #16]
  4050d0:	b083      	sub	sp, #12
  4050d2:	460d      	mov	r5, r1
  4050d4:	4606      	mov	r6, r0
  4050d6:	f101 0e14 	add.w	lr, r1, #20
  4050da:	2700      	movs	r7, #0
  4050dc:	f8de 0000 	ldr.w	r0, [lr]
  4050e0:	b281      	uxth	r1, r0
  4050e2:	fb02 3301 	mla	r3, r2, r1, r3
  4050e6:	0c01      	lsrs	r1, r0, #16
  4050e8:	0c18      	lsrs	r0, r3, #16
  4050ea:	fb02 0101 	mla	r1, r2, r1, r0
  4050ee:	b29b      	uxth	r3, r3
  4050f0:	3701      	adds	r7, #1
  4050f2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  4050f6:	42bc      	cmp	r4, r7
  4050f8:	f84e 3b04 	str.w	r3, [lr], #4
  4050fc:	ea4f 4311 	mov.w	r3, r1, lsr #16
  405100:	dcec      	bgt.n	4050dc <__multadd+0x10>
  405102:	b13b      	cbz	r3, 405114 <__multadd+0x48>
  405104:	68aa      	ldr	r2, [r5, #8]
  405106:	4294      	cmp	r4, r2
  405108:	da07      	bge.n	40511a <__multadd+0x4e>
  40510a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40510e:	3401      	adds	r4, #1
  405110:	6153      	str	r3, [r2, #20]
  405112:	612c      	str	r4, [r5, #16]
  405114:	4628      	mov	r0, r5
  405116:	b003      	add	sp, #12
  405118:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40511a:	6869      	ldr	r1, [r5, #4]
  40511c:	9301      	str	r3, [sp, #4]
  40511e:	3101      	adds	r1, #1
  405120:	4630      	mov	r0, r6
  405122:	f7ff ffa3 	bl	40506c <_Balloc>
  405126:	692a      	ldr	r2, [r5, #16]
  405128:	3202      	adds	r2, #2
  40512a:	f105 010c 	add.w	r1, r5, #12
  40512e:	4607      	mov	r7, r0
  405130:	0092      	lsls	r2, r2, #2
  405132:	300c      	adds	r0, #12
  405134:	f7ff fef4 	bl	404f20 <memcpy>
  405138:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  40513a:	6869      	ldr	r1, [r5, #4]
  40513c:	9b01      	ldr	r3, [sp, #4]
  40513e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  405142:	6028      	str	r0, [r5, #0]
  405144:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  405148:	463d      	mov	r5, r7
  40514a:	e7de      	b.n	40510a <__multadd+0x3e>

0040514c <__hi0bits>:
  40514c:	0c02      	lsrs	r2, r0, #16
  40514e:	0412      	lsls	r2, r2, #16
  405150:	4603      	mov	r3, r0
  405152:	b9b2      	cbnz	r2, 405182 <__hi0bits+0x36>
  405154:	0403      	lsls	r3, r0, #16
  405156:	2010      	movs	r0, #16
  405158:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  40515c:	bf04      	itt	eq
  40515e:	021b      	lsleq	r3, r3, #8
  405160:	3008      	addeq	r0, #8
  405162:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  405166:	bf04      	itt	eq
  405168:	011b      	lsleq	r3, r3, #4
  40516a:	3004      	addeq	r0, #4
  40516c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  405170:	bf04      	itt	eq
  405172:	009b      	lsleq	r3, r3, #2
  405174:	3002      	addeq	r0, #2
  405176:	2b00      	cmp	r3, #0
  405178:	db02      	blt.n	405180 <__hi0bits+0x34>
  40517a:	005b      	lsls	r3, r3, #1
  40517c:	d403      	bmi.n	405186 <__hi0bits+0x3a>
  40517e:	2020      	movs	r0, #32
  405180:	4770      	bx	lr
  405182:	2000      	movs	r0, #0
  405184:	e7e8      	b.n	405158 <__hi0bits+0xc>
  405186:	3001      	adds	r0, #1
  405188:	4770      	bx	lr
  40518a:	bf00      	nop

0040518c <__lo0bits>:
  40518c:	6803      	ldr	r3, [r0, #0]
  40518e:	f013 0207 	ands.w	r2, r3, #7
  405192:	4601      	mov	r1, r0
  405194:	d007      	beq.n	4051a6 <__lo0bits+0x1a>
  405196:	07da      	lsls	r2, r3, #31
  405198:	d421      	bmi.n	4051de <__lo0bits+0x52>
  40519a:	0798      	lsls	r0, r3, #30
  40519c:	d421      	bmi.n	4051e2 <__lo0bits+0x56>
  40519e:	089b      	lsrs	r3, r3, #2
  4051a0:	600b      	str	r3, [r1, #0]
  4051a2:	2002      	movs	r0, #2
  4051a4:	4770      	bx	lr
  4051a6:	b298      	uxth	r0, r3
  4051a8:	b198      	cbz	r0, 4051d2 <__lo0bits+0x46>
  4051aa:	4610      	mov	r0, r2
  4051ac:	f013 0fff 	tst.w	r3, #255	; 0xff
  4051b0:	bf04      	itt	eq
  4051b2:	0a1b      	lsreq	r3, r3, #8
  4051b4:	3008      	addeq	r0, #8
  4051b6:	071a      	lsls	r2, r3, #28
  4051b8:	bf04      	itt	eq
  4051ba:	091b      	lsreq	r3, r3, #4
  4051bc:	3004      	addeq	r0, #4
  4051be:	079a      	lsls	r2, r3, #30
  4051c0:	bf04      	itt	eq
  4051c2:	089b      	lsreq	r3, r3, #2
  4051c4:	3002      	addeq	r0, #2
  4051c6:	07da      	lsls	r2, r3, #31
  4051c8:	d407      	bmi.n	4051da <__lo0bits+0x4e>
  4051ca:	085b      	lsrs	r3, r3, #1
  4051cc:	d104      	bne.n	4051d8 <__lo0bits+0x4c>
  4051ce:	2020      	movs	r0, #32
  4051d0:	4770      	bx	lr
  4051d2:	0c1b      	lsrs	r3, r3, #16
  4051d4:	2010      	movs	r0, #16
  4051d6:	e7e9      	b.n	4051ac <__lo0bits+0x20>
  4051d8:	3001      	adds	r0, #1
  4051da:	600b      	str	r3, [r1, #0]
  4051dc:	4770      	bx	lr
  4051de:	2000      	movs	r0, #0
  4051e0:	4770      	bx	lr
  4051e2:	085b      	lsrs	r3, r3, #1
  4051e4:	600b      	str	r3, [r1, #0]
  4051e6:	2001      	movs	r0, #1
  4051e8:	4770      	bx	lr
  4051ea:	bf00      	nop

004051ec <__i2b>:
  4051ec:	b510      	push	{r4, lr}
  4051ee:	460c      	mov	r4, r1
  4051f0:	2101      	movs	r1, #1
  4051f2:	f7ff ff3b 	bl	40506c <_Balloc>
  4051f6:	2201      	movs	r2, #1
  4051f8:	6144      	str	r4, [r0, #20]
  4051fa:	6102      	str	r2, [r0, #16]
  4051fc:	bd10      	pop	{r4, pc}
  4051fe:	bf00      	nop

00405200 <__multiply>:
  405200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405204:	690c      	ldr	r4, [r1, #16]
  405206:	6915      	ldr	r5, [r2, #16]
  405208:	42ac      	cmp	r4, r5
  40520a:	b083      	sub	sp, #12
  40520c:	468b      	mov	fp, r1
  40520e:	4616      	mov	r6, r2
  405210:	da04      	bge.n	40521c <__multiply+0x1c>
  405212:	4622      	mov	r2, r4
  405214:	46b3      	mov	fp, r6
  405216:	462c      	mov	r4, r5
  405218:	460e      	mov	r6, r1
  40521a:	4615      	mov	r5, r2
  40521c:	f8db 3008 	ldr.w	r3, [fp, #8]
  405220:	f8db 1004 	ldr.w	r1, [fp, #4]
  405224:	eb04 0805 	add.w	r8, r4, r5
  405228:	4598      	cmp	r8, r3
  40522a:	bfc8      	it	gt
  40522c:	3101      	addgt	r1, #1
  40522e:	f7ff ff1d 	bl	40506c <_Balloc>
  405232:	f100 0914 	add.w	r9, r0, #20
  405236:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  40523a:	45d1      	cmp	r9, sl
  40523c:	9000      	str	r0, [sp, #0]
  40523e:	d205      	bcs.n	40524c <__multiply+0x4c>
  405240:	464b      	mov	r3, r9
  405242:	2100      	movs	r1, #0
  405244:	f843 1b04 	str.w	r1, [r3], #4
  405248:	459a      	cmp	sl, r3
  40524a:	d8fb      	bhi.n	405244 <__multiply+0x44>
  40524c:	f106 0c14 	add.w	ip, r6, #20
  405250:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  405254:	f10b 0b14 	add.w	fp, fp, #20
  405258:	459c      	cmp	ip, r3
  40525a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  40525e:	d24c      	bcs.n	4052fa <__multiply+0xfa>
  405260:	f8cd a004 	str.w	sl, [sp, #4]
  405264:	469a      	mov	sl, r3
  405266:	f8dc 5000 	ldr.w	r5, [ip]
  40526a:	b2af      	uxth	r7, r5
  40526c:	b1ef      	cbz	r7, 4052aa <__multiply+0xaa>
  40526e:	2100      	movs	r1, #0
  405270:	464d      	mov	r5, r9
  405272:	465e      	mov	r6, fp
  405274:	460c      	mov	r4, r1
  405276:	f856 2b04 	ldr.w	r2, [r6], #4
  40527a:	6828      	ldr	r0, [r5, #0]
  40527c:	b293      	uxth	r3, r2
  40527e:	b281      	uxth	r1, r0
  405280:	fb07 1303 	mla	r3, r7, r3, r1
  405284:	0c12      	lsrs	r2, r2, #16
  405286:	0c01      	lsrs	r1, r0, #16
  405288:	4423      	add	r3, r4
  40528a:	fb07 1102 	mla	r1, r7, r2, r1
  40528e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  405292:	b29b      	uxth	r3, r3
  405294:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  405298:	45b6      	cmp	lr, r6
  40529a:	f845 3b04 	str.w	r3, [r5], #4
  40529e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  4052a2:	d8e8      	bhi.n	405276 <__multiply+0x76>
  4052a4:	602c      	str	r4, [r5, #0]
  4052a6:	f8dc 5000 	ldr.w	r5, [ip]
  4052aa:	0c2d      	lsrs	r5, r5, #16
  4052ac:	d01d      	beq.n	4052ea <__multiply+0xea>
  4052ae:	f8d9 3000 	ldr.w	r3, [r9]
  4052b2:	4648      	mov	r0, r9
  4052b4:	461c      	mov	r4, r3
  4052b6:	4659      	mov	r1, fp
  4052b8:	2200      	movs	r2, #0
  4052ba:	880e      	ldrh	r6, [r1, #0]
  4052bc:	0c24      	lsrs	r4, r4, #16
  4052be:	fb05 4406 	mla	r4, r5, r6, r4
  4052c2:	4422      	add	r2, r4
  4052c4:	b29b      	uxth	r3, r3
  4052c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  4052ca:	f840 3b04 	str.w	r3, [r0], #4
  4052ce:	f851 3b04 	ldr.w	r3, [r1], #4
  4052d2:	6804      	ldr	r4, [r0, #0]
  4052d4:	0c1b      	lsrs	r3, r3, #16
  4052d6:	b2a6      	uxth	r6, r4
  4052d8:	fb05 6303 	mla	r3, r5, r3, r6
  4052dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  4052e0:	458e      	cmp	lr, r1
  4052e2:	ea4f 4213 	mov.w	r2, r3, lsr #16
  4052e6:	d8e8      	bhi.n	4052ba <__multiply+0xba>
  4052e8:	6003      	str	r3, [r0, #0]
  4052ea:	f10c 0c04 	add.w	ip, ip, #4
  4052ee:	45e2      	cmp	sl, ip
  4052f0:	f109 0904 	add.w	r9, r9, #4
  4052f4:	d8b7      	bhi.n	405266 <__multiply+0x66>
  4052f6:	f8dd a004 	ldr.w	sl, [sp, #4]
  4052fa:	f1b8 0f00 	cmp.w	r8, #0
  4052fe:	dd0b      	ble.n	405318 <__multiply+0x118>
  405300:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  405304:	f1aa 0a04 	sub.w	sl, sl, #4
  405308:	b11b      	cbz	r3, 405312 <__multiply+0x112>
  40530a:	e005      	b.n	405318 <__multiply+0x118>
  40530c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  405310:	b913      	cbnz	r3, 405318 <__multiply+0x118>
  405312:	f1b8 0801 	subs.w	r8, r8, #1
  405316:	d1f9      	bne.n	40530c <__multiply+0x10c>
  405318:	9800      	ldr	r0, [sp, #0]
  40531a:	f8c0 8010 	str.w	r8, [r0, #16]
  40531e:	b003      	add	sp, #12
  405320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405324 <__pow5mult>:
  405324:	f012 0303 	ands.w	r3, r2, #3
  405328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40532c:	4614      	mov	r4, r2
  40532e:	4607      	mov	r7, r0
  405330:	d12e      	bne.n	405390 <__pow5mult+0x6c>
  405332:	460d      	mov	r5, r1
  405334:	10a4      	asrs	r4, r4, #2
  405336:	d01c      	beq.n	405372 <__pow5mult+0x4e>
  405338:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  40533a:	b396      	cbz	r6, 4053a2 <__pow5mult+0x7e>
  40533c:	07e3      	lsls	r3, r4, #31
  40533e:	f04f 0800 	mov.w	r8, #0
  405342:	d406      	bmi.n	405352 <__pow5mult+0x2e>
  405344:	1064      	asrs	r4, r4, #1
  405346:	d014      	beq.n	405372 <__pow5mult+0x4e>
  405348:	6830      	ldr	r0, [r6, #0]
  40534a:	b1a8      	cbz	r0, 405378 <__pow5mult+0x54>
  40534c:	4606      	mov	r6, r0
  40534e:	07e3      	lsls	r3, r4, #31
  405350:	d5f8      	bpl.n	405344 <__pow5mult+0x20>
  405352:	4632      	mov	r2, r6
  405354:	4629      	mov	r1, r5
  405356:	4638      	mov	r0, r7
  405358:	f7ff ff52 	bl	405200 <__multiply>
  40535c:	b1b5      	cbz	r5, 40538c <__pow5mult+0x68>
  40535e:	686a      	ldr	r2, [r5, #4]
  405360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405362:	1064      	asrs	r4, r4, #1
  405364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  405368:	6029      	str	r1, [r5, #0]
  40536a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  40536e:	4605      	mov	r5, r0
  405370:	d1ea      	bne.n	405348 <__pow5mult+0x24>
  405372:	4628      	mov	r0, r5
  405374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405378:	4632      	mov	r2, r6
  40537a:	4631      	mov	r1, r6
  40537c:	4638      	mov	r0, r7
  40537e:	f7ff ff3f 	bl	405200 <__multiply>
  405382:	6030      	str	r0, [r6, #0]
  405384:	f8c0 8000 	str.w	r8, [r0]
  405388:	4606      	mov	r6, r0
  40538a:	e7e0      	b.n	40534e <__pow5mult+0x2a>
  40538c:	4605      	mov	r5, r0
  40538e:	e7d9      	b.n	405344 <__pow5mult+0x20>
  405390:	1e5a      	subs	r2, r3, #1
  405392:	4d0b      	ldr	r5, [pc, #44]	; (4053c0 <__pow5mult+0x9c>)
  405394:	2300      	movs	r3, #0
  405396:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40539a:	f7ff fe97 	bl	4050cc <__multadd>
  40539e:	4605      	mov	r5, r0
  4053a0:	e7c8      	b.n	405334 <__pow5mult+0x10>
  4053a2:	2101      	movs	r1, #1
  4053a4:	4638      	mov	r0, r7
  4053a6:	f7ff fe61 	bl	40506c <_Balloc>
  4053aa:	f240 2171 	movw	r1, #625	; 0x271
  4053ae:	2201      	movs	r2, #1
  4053b0:	2300      	movs	r3, #0
  4053b2:	6141      	str	r1, [r0, #20]
  4053b4:	6102      	str	r2, [r0, #16]
  4053b6:	4606      	mov	r6, r0
  4053b8:	64b8      	str	r0, [r7, #72]	; 0x48
  4053ba:	6003      	str	r3, [r0, #0]
  4053bc:	e7be      	b.n	40533c <__pow5mult+0x18>
  4053be:	bf00      	nop
  4053c0:	00407580 	.word	0x00407580

004053c4 <__lshift>:
  4053c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4053c8:	4691      	mov	r9, r2
  4053ca:	690a      	ldr	r2, [r1, #16]
  4053cc:	688b      	ldr	r3, [r1, #8]
  4053ce:	ea4f 1469 	mov.w	r4, r9, asr #5
  4053d2:	eb04 0802 	add.w	r8, r4, r2
  4053d6:	f108 0501 	add.w	r5, r8, #1
  4053da:	429d      	cmp	r5, r3
  4053dc:	460e      	mov	r6, r1
  4053de:	4607      	mov	r7, r0
  4053e0:	6849      	ldr	r1, [r1, #4]
  4053e2:	dd04      	ble.n	4053ee <__lshift+0x2a>
  4053e4:	005b      	lsls	r3, r3, #1
  4053e6:	429d      	cmp	r5, r3
  4053e8:	f101 0101 	add.w	r1, r1, #1
  4053ec:	dcfa      	bgt.n	4053e4 <__lshift+0x20>
  4053ee:	4638      	mov	r0, r7
  4053f0:	f7ff fe3c 	bl	40506c <_Balloc>
  4053f4:	2c00      	cmp	r4, #0
  4053f6:	f100 0314 	add.w	r3, r0, #20
  4053fa:	dd06      	ble.n	40540a <__lshift+0x46>
  4053fc:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  405400:	2100      	movs	r1, #0
  405402:	f843 1b04 	str.w	r1, [r3], #4
  405406:	429a      	cmp	r2, r3
  405408:	d1fb      	bne.n	405402 <__lshift+0x3e>
  40540a:	6934      	ldr	r4, [r6, #16]
  40540c:	f106 0114 	add.w	r1, r6, #20
  405410:	f019 091f 	ands.w	r9, r9, #31
  405414:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  405418:	d01d      	beq.n	405456 <__lshift+0x92>
  40541a:	f1c9 0c20 	rsb	ip, r9, #32
  40541e:	2200      	movs	r2, #0
  405420:	680c      	ldr	r4, [r1, #0]
  405422:	fa04 f409 	lsl.w	r4, r4, r9
  405426:	4314      	orrs	r4, r2
  405428:	f843 4b04 	str.w	r4, [r3], #4
  40542c:	f851 2b04 	ldr.w	r2, [r1], #4
  405430:	458e      	cmp	lr, r1
  405432:	fa22 f20c 	lsr.w	r2, r2, ip
  405436:	d8f3      	bhi.n	405420 <__lshift+0x5c>
  405438:	601a      	str	r2, [r3, #0]
  40543a:	b10a      	cbz	r2, 405440 <__lshift+0x7c>
  40543c:	f108 0502 	add.w	r5, r8, #2
  405440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  405442:	6872      	ldr	r2, [r6, #4]
  405444:	3d01      	subs	r5, #1
  405446:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  40544a:	6105      	str	r5, [r0, #16]
  40544c:	6031      	str	r1, [r6, #0]
  40544e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  405452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405456:	3b04      	subs	r3, #4
  405458:	f851 2b04 	ldr.w	r2, [r1], #4
  40545c:	f843 2f04 	str.w	r2, [r3, #4]!
  405460:	458e      	cmp	lr, r1
  405462:	d8f9      	bhi.n	405458 <__lshift+0x94>
  405464:	e7ec      	b.n	405440 <__lshift+0x7c>
  405466:	bf00      	nop

00405468 <__mcmp>:
  405468:	b430      	push	{r4, r5}
  40546a:	690b      	ldr	r3, [r1, #16]
  40546c:	4605      	mov	r5, r0
  40546e:	6900      	ldr	r0, [r0, #16]
  405470:	1ac0      	subs	r0, r0, r3
  405472:	d10f      	bne.n	405494 <__mcmp+0x2c>
  405474:	009b      	lsls	r3, r3, #2
  405476:	3514      	adds	r5, #20
  405478:	3114      	adds	r1, #20
  40547a:	4419      	add	r1, r3
  40547c:	442b      	add	r3, r5
  40547e:	e001      	b.n	405484 <__mcmp+0x1c>
  405480:	429d      	cmp	r5, r3
  405482:	d207      	bcs.n	405494 <__mcmp+0x2c>
  405484:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  405488:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40548c:	4294      	cmp	r4, r2
  40548e:	d0f7      	beq.n	405480 <__mcmp+0x18>
  405490:	d302      	bcc.n	405498 <__mcmp+0x30>
  405492:	2001      	movs	r0, #1
  405494:	bc30      	pop	{r4, r5}
  405496:	4770      	bx	lr
  405498:	f04f 30ff 	mov.w	r0, #4294967295
  40549c:	e7fa      	b.n	405494 <__mcmp+0x2c>
  40549e:	bf00      	nop

004054a0 <__mdiff>:
  4054a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054a4:	690f      	ldr	r7, [r1, #16]
  4054a6:	460e      	mov	r6, r1
  4054a8:	6911      	ldr	r1, [r2, #16]
  4054aa:	1a7f      	subs	r7, r7, r1
  4054ac:	2f00      	cmp	r7, #0
  4054ae:	4690      	mov	r8, r2
  4054b0:	d117      	bne.n	4054e2 <__mdiff+0x42>
  4054b2:	0089      	lsls	r1, r1, #2
  4054b4:	f106 0514 	add.w	r5, r6, #20
  4054b8:	f102 0e14 	add.w	lr, r2, #20
  4054bc:	186b      	adds	r3, r5, r1
  4054be:	4471      	add	r1, lr
  4054c0:	e001      	b.n	4054c6 <__mdiff+0x26>
  4054c2:	429d      	cmp	r5, r3
  4054c4:	d25c      	bcs.n	405580 <__mdiff+0xe0>
  4054c6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  4054ca:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  4054ce:	42a2      	cmp	r2, r4
  4054d0:	d0f7      	beq.n	4054c2 <__mdiff+0x22>
  4054d2:	d25e      	bcs.n	405592 <__mdiff+0xf2>
  4054d4:	4633      	mov	r3, r6
  4054d6:	462c      	mov	r4, r5
  4054d8:	4646      	mov	r6, r8
  4054da:	4675      	mov	r5, lr
  4054dc:	4698      	mov	r8, r3
  4054de:	2701      	movs	r7, #1
  4054e0:	e005      	b.n	4054ee <__mdiff+0x4e>
  4054e2:	db58      	blt.n	405596 <__mdiff+0xf6>
  4054e4:	f106 0514 	add.w	r5, r6, #20
  4054e8:	f108 0414 	add.w	r4, r8, #20
  4054ec:	2700      	movs	r7, #0
  4054ee:	6871      	ldr	r1, [r6, #4]
  4054f0:	f7ff fdbc 	bl	40506c <_Balloc>
  4054f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4054f8:	6936      	ldr	r6, [r6, #16]
  4054fa:	60c7      	str	r7, [r0, #12]
  4054fc:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  405500:	46a6      	mov	lr, r4
  405502:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  405506:	f100 0414 	add.w	r4, r0, #20
  40550a:	2300      	movs	r3, #0
  40550c:	f85e 1b04 	ldr.w	r1, [lr], #4
  405510:	f855 8b04 	ldr.w	r8, [r5], #4
  405514:	b28a      	uxth	r2, r1
  405516:	fa13 f388 	uxtah	r3, r3, r8
  40551a:	0c09      	lsrs	r1, r1, #16
  40551c:	1a9a      	subs	r2, r3, r2
  40551e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  405522:	eb03 4322 	add.w	r3, r3, r2, asr #16
  405526:	b292      	uxth	r2, r2
  405528:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  40552c:	45f4      	cmp	ip, lr
  40552e:	f844 2b04 	str.w	r2, [r4], #4
  405532:	ea4f 4323 	mov.w	r3, r3, asr #16
  405536:	d8e9      	bhi.n	40550c <__mdiff+0x6c>
  405538:	42af      	cmp	r7, r5
  40553a:	d917      	bls.n	40556c <__mdiff+0xcc>
  40553c:	46a4      	mov	ip, r4
  40553e:	46ae      	mov	lr, r5
  405540:	f85e 2b04 	ldr.w	r2, [lr], #4
  405544:	fa13 f382 	uxtah	r3, r3, r2
  405548:	1419      	asrs	r1, r3, #16
  40554a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  40554e:	b29b      	uxth	r3, r3
  405550:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405554:	4577      	cmp	r7, lr
  405556:	f84c 2b04 	str.w	r2, [ip], #4
  40555a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40555e:	d8ef      	bhi.n	405540 <__mdiff+0xa0>
  405560:	43ed      	mvns	r5, r5
  405562:	442f      	add	r7, r5
  405564:	f027 0703 	bic.w	r7, r7, #3
  405568:	3704      	adds	r7, #4
  40556a:	443c      	add	r4, r7
  40556c:	3c04      	subs	r4, #4
  40556e:	b922      	cbnz	r2, 40557a <__mdiff+0xda>
  405570:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405574:	3e01      	subs	r6, #1
  405576:	2b00      	cmp	r3, #0
  405578:	d0fa      	beq.n	405570 <__mdiff+0xd0>
  40557a:	6106      	str	r6, [r0, #16]
  40557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405580:	2100      	movs	r1, #0
  405582:	f7ff fd73 	bl	40506c <_Balloc>
  405586:	2201      	movs	r2, #1
  405588:	2300      	movs	r3, #0
  40558a:	6102      	str	r2, [r0, #16]
  40558c:	6143      	str	r3, [r0, #20]
  40558e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405592:	4674      	mov	r4, lr
  405594:	e7ab      	b.n	4054ee <__mdiff+0x4e>
  405596:	4633      	mov	r3, r6
  405598:	f106 0414 	add.w	r4, r6, #20
  40559c:	f102 0514 	add.w	r5, r2, #20
  4055a0:	4616      	mov	r6, r2
  4055a2:	2701      	movs	r7, #1
  4055a4:	4698      	mov	r8, r3
  4055a6:	e7a2      	b.n	4054ee <__mdiff+0x4e>

004055a8 <__d2b>:
  4055a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4055ac:	b082      	sub	sp, #8
  4055ae:	2101      	movs	r1, #1
  4055b0:	461c      	mov	r4, r3
  4055b2:	f3c3 570a 	ubfx	r7, r3, #20, #11
  4055b6:	4615      	mov	r5, r2
  4055b8:	9e08      	ldr	r6, [sp, #32]
  4055ba:	f7ff fd57 	bl	40506c <_Balloc>
  4055be:	f3c4 0413 	ubfx	r4, r4, #0, #20
  4055c2:	4680      	mov	r8, r0
  4055c4:	b10f      	cbz	r7, 4055ca <__d2b+0x22>
  4055c6:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  4055ca:	9401      	str	r4, [sp, #4]
  4055cc:	b31d      	cbz	r5, 405616 <__d2b+0x6e>
  4055ce:	a802      	add	r0, sp, #8
  4055d0:	f840 5d08 	str.w	r5, [r0, #-8]!
  4055d4:	f7ff fdda 	bl	40518c <__lo0bits>
  4055d8:	2800      	cmp	r0, #0
  4055da:	d134      	bne.n	405646 <__d2b+0x9e>
  4055dc:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4055e0:	f8c8 2014 	str.w	r2, [r8, #20]
  4055e4:	2b00      	cmp	r3, #0
  4055e6:	bf0c      	ite	eq
  4055e8:	2101      	moveq	r1, #1
  4055ea:	2102      	movne	r1, #2
  4055ec:	f8c8 3018 	str.w	r3, [r8, #24]
  4055f0:	f8c8 1010 	str.w	r1, [r8, #16]
  4055f4:	b9df      	cbnz	r7, 40562e <__d2b+0x86>
  4055f6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4055fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4055fe:	6030      	str	r0, [r6, #0]
  405600:	6918      	ldr	r0, [r3, #16]
  405602:	f7ff fda3 	bl	40514c <__hi0bits>
  405606:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405608:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40560c:	6018      	str	r0, [r3, #0]
  40560e:	4640      	mov	r0, r8
  405610:	b002      	add	sp, #8
  405612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405616:	a801      	add	r0, sp, #4
  405618:	f7ff fdb8 	bl	40518c <__lo0bits>
  40561c:	9b01      	ldr	r3, [sp, #4]
  40561e:	f8c8 3014 	str.w	r3, [r8, #20]
  405622:	2101      	movs	r1, #1
  405624:	3020      	adds	r0, #32
  405626:	f8c8 1010 	str.w	r1, [r8, #16]
  40562a:	2f00      	cmp	r7, #0
  40562c:	d0e3      	beq.n	4055f6 <__d2b+0x4e>
  40562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  405630:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  405634:	4407      	add	r7, r0
  405636:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  40563a:	6037      	str	r7, [r6, #0]
  40563c:	6018      	str	r0, [r3, #0]
  40563e:	4640      	mov	r0, r8
  405640:	b002      	add	sp, #8
  405642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405646:	e89d 000a 	ldmia.w	sp, {r1, r3}
  40564a:	f1c0 0220 	rsb	r2, r0, #32
  40564e:	fa03 f202 	lsl.w	r2, r3, r2
  405652:	430a      	orrs	r2, r1
  405654:	40c3      	lsrs	r3, r0
  405656:	9301      	str	r3, [sp, #4]
  405658:	f8c8 2014 	str.w	r2, [r8, #20]
  40565c:	e7c2      	b.n	4055e4 <__d2b+0x3c>
  40565e:	bf00      	nop

00405660 <_sbrk_r>:
  405660:	b538      	push	{r3, r4, r5, lr}
  405662:	4c07      	ldr	r4, [pc, #28]	; (405680 <_sbrk_r+0x20>)
  405664:	2300      	movs	r3, #0
  405666:	4605      	mov	r5, r0
  405668:	4608      	mov	r0, r1
  40566a:	6023      	str	r3, [r4, #0]
  40566c:	f7fc f970 	bl	401950 <_sbrk>
  405670:	1c43      	adds	r3, r0, #1
  405672:	d000      	beq.n	405676 <_sbrk_r+0x16>
  405674:	bd38      	pop	{r3, r4, r5, pc}
  405676:	6823      	ldr	r3, [r4, #0]
  405678:	2b00      	cmp	r3, #0
  40567a:	d0fb      	beq.n	405674 <_sbrk_r+0x14>
  40567c:	602b      	str	r3, [r5, #0]
  40567e:	bd38      	pop	{r3, r4, r5, pc}
  405680:	20400cd0 	.word	0x20400cd0
	...

004056c0 <strlen>:
  4056c0:	f890 f000 	pld	[r0]
  4056c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  4056c8:	f020 0107 	bic.w	r1, r0, #7
  4056cc:	f06f 0c00 	mvn.w	ip, #0
  4056d0:	f010 0407 	ands.w	r4, r0, #7
  4056d4:	f891 f020 	pld	[r1, #32]
  4056d8:	f040 8049 	bne.w	40576e <strlen+0xae>
  4056dc:	f04f 0400 	mov.w	r4, #0
  4056e0:	f06f 0007 	mvn.w	r0, #7
  4056e4:	e9d1 2300 	ldrd	r2, r3, [r1]
  4056e8:	f891 f040 	pld	[r1, #64]	; 0x40
  4056ec:	f100 0008 	add.w	r0, r0, #8
  4056f0:	fa82 f24c 	uadd8	r2, r2, ip
  4056f4:	faa4 f28c 	sel	r2, r4, ip
  4056f8:	fa83 f34c 	uadd8	r3, r3, ip
  4056fc:	faa2 f38c 	sel	r3, r2, ip
  405700:	bb4b      	cbnz	r3, 405756 <strlen+0x96>
  405702:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405706:	fa82 f24c 	uadd8	r2, r2, ip
  40570a:	f100 0008 	add.w	r0, r0, #8
  40570e:	faa4 f28c 	sel	r2, r4, ip
  405712:	fa83 f34c 	uadd8	r3, r3, ip
  405716:	faa2 f38c 	sel	r3, r2, ip
  40571a:	b9e3      	cbnz	r3, 405756 <strlen+0x96>
  40571c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  405720:	fa82 f24c 	uadd8	r2, r2, ip
  405724:	f100 0008 	add.w	r0, r0, #8
  405728:	faa4 f28c 	sel	r2, r4, ip
  40572c:	fa83 f34c 	uadd8	r3, r3, ip
  405730:	faa2 f38c 	sel	r3, r2, ip
  405734:	b97b      	cbnz	r3, 405756 <strlen+0x96>
  405736:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  40573a:	f101 0120 	add.w	r1, r1, #32
  40573e:	fa82 f24c 	uadd8	r2, r2, ip
  405742:	f100 0008 	add.w	r0, r0, #8
  405746:	faa4 f28c 	sel	r2, r4, ip
  40574a:	fa83 f34c 	uadd8	r3, r3, ip
  40574e:	faa2 f38c 	sel	r3, r2, ip
  405752:	2b00      	cmp	r3, #0
  405754:	d0c6      	beq.n	4056e4 <strlen+0x24>
  405756:	2a00      	cmp	r2, #0
  405758:	bf04      	itt	eq
  40575a:	3004      	addeq	r0, #4
  40575c:	461a      	moveq	r2, r3
  40575e:	ba12      	rev	r2, r2
  405760:	fab2 f282 	clz	r2, r2
  405764:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  405768:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  40576c:	4770      	bx	lr
  40576e:	e9d1 2300 	ldrd	r2, r3, [r1]
  405772:	f004 0503 	and.w	r5, r4, #3
  405776:	f1c4 0000 	rsb	r0, r4, #0
  40577a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  40577e:	f014 0f04 	tst.w	r4, #4
  405782:	f891 f040 	pld	[r1, #64]	; 0x40
  405786:	fa0c f505 	lsl.w	r5, ip, r5
  40578a:	ea62 0205 	orn	r2, r2, r5
  40578e:	bf1c      	itt	ne
  405790:	ea63 0305 	ornne	r3, r3, r5
  405794:	4662      	movne	r2, ip
  405796:	f04f 0400 	mov.w	r4, #0
  40579a:	e7a9      	b.n	4056f0 <strlen+0x30>

0040579c <__ssprint_r>:
  40579c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057a0:	6893      	ldr	r3, [r2, #8]
  4057a2:	b083      	sub	sp, #12
  4057a4:	4690      	mov	r8, r2
  4057a6:	2b00      	cmp	r3, #0
  4057a8:	d070      	beq.n	40588c <__ssprint_r+0xf0>
  4057aa:	4682      	mov	sl, r0
  4057ac:	460c      	mov	r4, r1
  4057ae:	6817      	ldr	r7, [r2, #0]
  4057b0:	688d      	ldr	r5, [r1, #8]
  4057b2:	6808      	ldr	r0, [r1, #0]
  4057b4:	e042      	b.n	40583c <__ssprint_r+0xa0>
  4057b6:	89a3      	ldrh	r3, [r4, #12]
  4057b8:	f413 6f90 	tst.w	r3, #1152	; 0x480
  4057bc:	d02e      	beq.n	40581c <__ssprint_r+0x80>
  4057be:	6965      	ldr	r5, [r4, #20]
  4057c0:	6921      	ldr	r1, [r4, #16]
  4057c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  4057c6:	eba0 0b01 	sub.w	fp, r0, r1
  4057ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  4057ce:	f10b 0001 	add.w	r0, fp, #1
  4057d2:	106d      	asrs	r5, r5, #1
  4057d4:	4430      	add	r0, r6
  4057d6:	42a8      	cmp	r0, r5
  4057d8:	462a      	mov	r2, r5
  4057da:	bf84      	itt	hi
  4057dc:	4605      	movhi	r5, r0
  4057de:	462a      	movhi	r2, r5
  4057e0:	055b      	lsls	r3, r3, #21
  4057e2:	d538      	bpl.n	405856 <__ssprint_r+0xba>
  4057e4:	4611      	mov	r1, r2
  4057e6:	4650      	mov	r0, sl
  4057e8:	f7ff f894 	bl	404914 <_malloc_r>
  4057ec:	2800      	cmp	r0, #0
  4057ee:	d03c      	beq.n	40586a <__ssprint_r+0xce>
  4057f0:	465a      	mov	r2, fp
  4057f2:	6921      	ldr	r1, [r4, #16]
  4057f4:	9001      	str	r0, [sp, #4]
  4057f6:	f7ff fb93 	bl	404f20 <memcpy>
  4057fa:	89a2      	ldrh	r2, [r4, #12]
  4057fc:	9b01      	ldr	r3, [sp, #4]
  4057fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405806:	81a2      	strh	r2, [r4, #12]
  405808:	eba5 020b 	sub.w	r2, r5, fp
  40580c:	eb03 000b 	add.w	r0, r3, fp
  405810:	6165      	str	r5, [r4, #20]
  405812:	6123      	str	r3, [r4, #16]
  405814:	6020      	str	r0, [r4, #0]
  405816:	60a2      	str	r2, [r4, #8]
  405818:	4635      	mov	r5, r6
  40581a:	46b3      	mov	fp, r6
  40581c:	465a      	mov	r2, fp
  40581e:	4649      	mov	r1, r9
  405820:	f000 fa18 	bl	405c54 <memmove>
  405824:	f8d8 3008 	ldr.w	r3, [r8, #8]
  405828:	68a2      	ldr	r2, [r4, #8]
  40582a:	6820      	ldr	r0, [r4, #0]
  40582c:	1b55      	subs	r5, r2, r5
  40582e:	4458      	add	r0, fp
  405830:	1b9e      	subs	r6, r3, r6
  405832:	60a5      	str	r5, [r4, #8]
  405834:	6020      	str	r0, [r4, #0]
  405836:	f8c8 6008 	str.w	r6, [r8, #8]
  40583a:	b33e      	cbz	r6, 40588c <__ssprint_r+0xf0>
  40583c:	687e      	ldr	r6, [r7, #4]
  40583e:	463b      	mov	r3, r7
  405840:	3708      	adds	r7, #8
  405842:	2e00      	cmp	r6, #0
  405844:	d0fa      	beq.n	40583c <__ssprint_r+0xa0>
  405846:	42ae      	cmp	r6, r5
  405848:	f8d3 9000 	ldr.w	r9, [r3]
  40584c:	46ab      	mov	fp, r5
  40584e:	d2b2      	bcs.n	4057b6 <__ssprint_r+0x1a>
  405850:	4635      	mov	r5, r6
  405852:	46b3      	mov	fp, r6
  405854:	e7e2      	b.n	40581c <__ssprint_r+0x80>
  405856:	4650      	mov	r0, sl
  405858:	f000 fa60 	bl	405d1c <_realloc_r>
  40585c:	4603      	mov	r3, r0
  40585e:	2800      	cmp	r0, #0
  405860:	d1d2      	bne.n	405808 <__ssprint_r+0x6c>
  405862:	6921      	ldr	r1, [r4, #16]
  405864:	4650      	mov	r0, sl
  405866:	f000 f8f9 	bl	405a5c <_free_r>
  40586a:	230c      	movs	r3, #12
  40586c:	f8ca 3000 	str.w	r3, [sl]
  405870:	89a3      	ldrh	r3, [r4, #12]
  405872:	2200      	movs	r2, #0
  405874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405878:	f04f 30ff 	mov.w	r0, #4294967295
  40587c:	81a3      	strh	r3, [r4, #12]
  40587e:	f8c8 2008 	str.w	r2, [r8, #8]
  405882:	f8c8 2004 	str.w	r2, [r8, #4]
  405886:	b003      	add	sp, #12
  405888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40588c:	2000      	movs	r0, #0
  40588e:	f8c8 0004 	str.w	r0, [r8, #4]
  405892:	b003      	add	sp, #12
  405894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405898 <__register_exitproc>:
  405898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40589c:	4d2c      	ldr	r5, [pc, #176]	; (405950 <__register_exitproc+0xb8>)
  40589e:	4606      	mov	r6, r0
  4058a0:	6828      	ldr	r0, [r5, #0]
  4058a2:	4698      	mov	r8, r3
  4058a4:	460f      	mov	r7, r1
  4058a6:	4691      	mov	r9, r2
  4058a8:	f7ff f830 	bl	40490c <__retarget_lock_acquire_recursive>
  4058ac:	4b29      	ldr	r3, [pc, #164]	; (405954 <__register_exitproc+0xbc>)
  4058ae:	681c      	ldr	r4, [r3, #0]
  4058b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4058b4:	2b00      	cmp	r3, #0
  4058b6:	d03e      	beq.n	405936 <__register_exitproc+0x9e>
  4058b8:	685a      	ldr	r2, [r3, #4]
  4058ba:	2a1f      	cmp	r2, #31
  4058bc:	dc1c      	bgt.n	4058f8 <__register_exitproc+0x60>
  4058be:	f102 0e01 	add.w	lr, r2, #1
  4058c2:	b176      	cbz	r6, 4058e2 <__register_exitproc+0x4a>
  4058c4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4058c8:	2401      	movs	r4, #1
  4058ca:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4058ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4058d2:	4094      	lsls	r4, r2
  4058d4:	4320      	orrs	r0, r4
  4058d6:	2e02      	cmp	r6, #2
  4058d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4058dc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  4058e0:	d023      	beq.n	40592a <__register_exitproc+0x92>
  4058e2:	3202      	adds	r2, #2
  4058e4:	f8c3 e004 	str.w	lr, [r3, #4]
  4058e8:	6828      	ldr	r0, [r5, #0]
  4058ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  4058ee:	f7ff f80f 	bl	404910 <__retarget_lock_release_recursive>
  4058f2:	2000      	movs	r0, #0
  4058f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4058f8:	4b17      	ldr	r3, [pc, #92]	; (405958 <__register_exitproc+0xc0>)
  4058fa:	b30b      	cbz	r3, 405940 <__register_exitproc+0xa8>
  4058fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405900:	f3af 8000 	nop.w
  405904:	4603      	mov	r3, r0
  405906:	b1d8      	cbz	r0, 405940 <__register_exitproc+0xa8>
  405908:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40590c:	6002      	str	r2, [r0, #0]
  40590e:	2100      	movs	r1, #0
  405910:	6041      	str	r1, [r0, #4]
  405912:	460a      	mov	r2, r1
  405914:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405918:	f04f 0e01 	mov.w	lr, #1
  40591c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  405920:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  405924:	2e00      	cmp	r6, #0
  405926:	d0dc      	beq.n	4058e2 <__register_exitproc+0x4a>
  405928:	e7cc      	b.n	4058c4 <__register_exitproc+0x2c>
  40592a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40592e:	430c      	orrs	r4, r1
  405930:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  405934:	e7d5      	b.n	4058e2 <__register_exitproc+0x4a>
  405936:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40593a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40593e:	e7bb      	b.n	4058b8 <__register_exitproc+0x20>
  405940:	6828      	ldr	r0, [r5, #0]
  405942:	f7fe ffe5 	bl	404910 <__retarget_lock_release_recursive>
  405946:	f04f 30ff 	mov.w	r0, #4294967295
  40594a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40594e:	bf00      	nop
  405950:	20400450 	.word	0x20400450
  405954:	00407418 	.word	0x00407418
  405958:	00000000 	.word	0x00000000

0040595c <_calloc_r>:
  40595c:	b510      	push	{r4, lr}
  40595e:	fb02 f101 	mul.w	r1, r2, r1
  405962:	f7fe ffd7 	bl	404914 <_malloc_r>
  405966:	4604      	mov	r4, r0
  405968:	b1d8      	cbz	r0, 4059a2 <_calloc_r+0x46>
  40596a:	f850 2c04 	ldr.w	r2, [r0, #-4]
  40596e:	f022 0203 	bic.w	r2, r2, #3
  405972:	3a04      	subs	r2, #4
  405974:	2a24      	cmp	r2, #36	; 0x24
  405976:	d818      	bhi.n	4059aa <_calloc_r+0x4e>
  405978:	2a13      	cmp	r2, #19
  40597a:	d914      	bls.n	4059a6 <_calloc_r+0x4a>
  40597c:	2300      	movs	r3, #0
  40597e:	2a1b      	cmp	r2, #27
  405980:	6003      	str	r3, [r0, #0]
  405982:	6043      	str	r3, [r0, #4]
  405984:	d916      	bls.n	4059b4 <_calloc_r+0x58>
  405986:	2a24      	cmp	r2, #36	; 0x24
  405988:	6083      	str	r3, [r0, #8]
  40598a:	60c3      	str	r3, [r0, #12]
  40598c:	bf11      	iteee	ne
  40598e:	f100 0210 	addne.w	r2, r0, #16
  405992:	6103      	streq	r3, [r0, #16]
  405994:	6143      	streq	r3, [r0, #20]
  405996:	f100 0218 	addeq.w	r2, r0, #24
  40599a:	2300      	movs	r3, #0
  40599c:	6013      	str	r3, [r2, #0]
  40599e:	6053      	str	r3, [r2, #4]
  4059a0:	6093      	str	r3, [r2, #8]
  4059a2:	4620      	mov	r0, r4
  4059a4:	bd10      	pop	{r4, pc}
  4059a6:	4602      	mov	r2, r0
  4059a8:	e7f7      	b.n	40599a <_calloc_r+0x3e>
  4059aa:	2100      	movs	r1, #0
  4059ac:	f7fc fd16 	bl	4023dc <memset>
  4059b0:	4620      	mov	r0, r4
  4059b2:	bd10      	pop	{r4, pc}
  4059b4:	f100 0208 	add.w	r2, r0, #8
  4059b8:	e7ef      	b.n	40599a <_calloc_r+0x3e>
  4059ba:	bf00      	nop

004059bc <_malloc_trim_r>:
  4059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4059be:	4f24      	ldr	r7, [pc, #144]	; (405a50 <_malloc_trim_r+0x94>)
  4059c0:	460c      	mov	r4, r1
  4059c2:	4606      	mov	r6, r0
  4059c4:	f7ff fb46 	bl	405054 <__malloc_lock>
  4059c8:	68bb      	ldr	r3, [r7, #8]
  4059ca:	685d      	ldr	r5, [r3, #4]
  4059cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  4059d0:	310f      	adds	r1, #15
  4059d2:	f025 0503 	bic.w	r5, r5, #3
  4059d6:	4429      	add	r1, r5
  4059d8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  4059dc:	f021 010f 	bic.w	r1, r1, #15
  4059e0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  4059e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  4059e8:	db07      	blt.n	4059fa <_malloc_trim_r+0x3e>
  4059ea:	2100      	movs	r1, #0
  4059ec:	4630      	mov	r0, r6
  4059ee:	f7ff fe37 	bl	405660 <_sbrk_r>
  4059f2:	68bb      	ldr	r3, [r7, #8]
  4059f4:	442b      	add	r3, r5
  4059f6:	4298      	cmp	r0, r3
  4059f8:	d004      	beq.n	405a04 <_malloc_trim_r+0x48>
  4059fa:	4630      	mov	r0, r6
  4059fc:	f7ff fb30 	bl	405060 <__malloc_unlock>
  405a00:	2000      	movs	r0, #0
  405a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a04:	4261      	negs	r1, r4
  405a06:	4630      	mov	r0, r6
  405a08:	f7ff fe2a 	bl	405660 <_sbrk_r>
  405a0c:	3001      	adds	r0, #1
  405a0e:	d00d      	beq.n	405a2c <_malloc_trim_r+0x70>
  405a10:	4b10      	ldr	r3, [pc, #64]	; (405a54 <_malloc_trim_r+0x98>)
  405a12:	68ba      	ldr	r2, [r7, #8]
  405a14:	6819      	ldr	r1, [r3, #0]
  405a16:	1b2d      	subs	r5, r5, r4
  405a18:	f045 0501 	orr.w	r5, r5, #1
  405a1c:	4630      	mov	r0, r6
  405a1e:	1b09      	subs	r1, r1, r4
  405a20:	6055      	str	r5, [r2, #4]
  405a22:	6019      	str	r1, [r3, #0]
  405a24:	f7ff fb1c 	bl	405060 <__malloc_unlock>
  405a28:	2001      	movs	r0, #1
  405a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405a2c:	2100      	movs	r1, #0
  405a2e:	4630      	mov	r0, r6
  405a30:	f7ff fe16 	bl	405660 <_sbrk_r>
  405a34:	68ba      	ldr	r2, [r7, #8]
  405a36:	1a83      	subs	r3, r0, r2
  405a38:	2b0f      	cmp	r3, #15
  405a3a:	ddde      	ble.n	4059fa <_malloc_trim_r+0x3e>
  405a3c:	4c06      	ldr	r4, [pc, #24]	; (405a58 <_malloc_trim_r+0x9c>)
  405a3e:	4905      	ldr	r1, [pc, #20]	; (405a54 <_malloc_trim_r+0x98>)
  405a40:	6824      	ldr	r4, [r4, #0]
  405a42:	f043 0301 	orr.w	r3, r3, #1
  405a46:	1b00      	subs	r0, r0, r4
  405a48:	6053      	str	r3, [r2, #4]
  405a4a:	6008      	str	r0, [r1, #0]
  405a4c:	e7d5      	b.n	4059fa <_malloc_trim_r+0x3e>
  405a4e:	bf00      	nop
  405a50:	20400454 	.word	0x20400454
  405a54:	20400c78 	.word	0x20400c78
  405a58:	2040085c 	.word	0x2040085c

00405a5c <_free_r>:
  405a5c:	2900      	cmp	r1, #0
  405a5e:	d044      	beq.n	405aea <_free_r+0x8e>
  405a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405a64:	460d      	mov	r5, r1
  405a66:	4680      	mov	r8, r0
  405a68:	f7ff faf4 	bl	405054 <__malloc_lock>
  405a6c:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405a70:	4969      	ldr	r1, [pc, #420]	; (405c18 <_free_r+0x1bc>)
  405a72:	f027 0301 	bic.w	r3, r7, #1
  405a76:	f1a5 0408 	sub.w	r4, r5, #8
  405a7a:	18e2      	adds	r2, r4, r3
  405a7c:	688e      	ldr	r6, [r1, #8]
  405a7e:	6850      	ldr	r0, [r2, #4]
  405a80:	42b2      	cmp	r2, r6
  405a82:	f020 0003 	bic.w	r0, r0, #3
  405a86:	d05e      	beq.n	405b46 <_free_r+0xea>
  405a88:	07fe      	lsls	r6, r7, #31
  405a8a:	6050      	str	r0, [r2, #4]
  405a8c:	d40b      	bmi.n	405aa6 <_free_r+0x4a>
  405a8e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405a92:	1be4      	subs	r4, r4, r7
  405a94:	f101 0e08 	add.w	lr, r1, #8
  405a98:	68a5      	ldr	r5, [r4, #8]
  405a9a:	4575      	cmp	r5, lr
  405a9c:	443b      	add	r3, r7
  405a9e:	d06d      	beq.n	405b7c <_free_r+0x120>
  405aa0:	68e7      	ldr	r7, [r4, #12]
  405aa2:	60ef      	str	r7, [r5, #12]
  405aa4:	60bd      	str	r5, [r7, #8]
  405aa6:	1815      	adds	r5, r2, r0
  405aa8:	686d      	ldr	r5, [r5, #4]
  405aaa:	07ed      	lsls	r5, r5, #31
  405aac:	d53e      	bpl.n	405b2c <_free_r+0xd0>
  405aae:	f043 0201 	orr.w	r2, r3, #1
  405ab2:	6062      	str	r2, [r4, #4]
  405ab4:	50e3      	str	r3, [r4, r3]
  405ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405aba:	d217      	bcs.n	405aec <_free_r+0x90>
  405abc:	08db      	lsrs	r3, r3, #3
  405abe:	1c58      	adds	r0, r3, #1
  405ac0:	109a      	asrs	r2, r3, #2
  405ac2:	684d      	ldr	r5, [r1, #4]
  405ac4:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405ac8:	60a7      	str	r7, [r4, #8]
  405aca:	2301      	movs	r3, #1
  405acc:	4093      	lsls	r3, r2
  405ace:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405ad2:	432b      	orrs	r3, r5
  405ad4:	3a08      	subs	r2, #8
  405ad6:	60e2      	str	r2, [r4, #12]
  405ad8:	604b      	str	r3, [r1, #4]
  405ada:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405ade:	60fc      	str	r4, [r7, #12]
  405ae0:	4640      	mov	r0, r8
  405ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ae6:	f7ff babb 	b.w	405060 <__malloc_unlock>
  405aea:	4770      	bx	lr
  405aec:	0a5a      	lsrs	r2, r3, #9
  405aee:	2a04      	cmp	r2, #4
  405af0:	d852      	bhi.n	405b98 <_free_r+0x13c>
  405af2:	099a      	lsrs	r2, r3, #6
  405af4:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405af8:	00ff      	lsls	r7, r7, #3
  405afa:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405afe:	19c8      	adds	r0, r1, r7
  405b00:	59ca      	ldr	r2, [r1, r7]
  405b02:	3808      	subs	r0, #8
  405b04:	4290      	cmp	r0, r2
  405b06:	d04f      	beq.n	405ba8 <_free_r+0x14c>
  405b08:	6851      	ldr	r1, [r2, #4]
  405b0a:	f021 0103 	bic.w	r1, r1, #3
  405b0e:	428b      	cmp	r3, r1
  405b10:	d232      	bcs.n	405b78 <_free_r+0x11c>
  405b12:	6892      	ldr	r2, [r2, #8]
  405b14:	4290      	cmp	r0, r2
  405b16:	d1f7      	bne.n	405b08 <_free_r+0xac>
  405b18:	68c3      	ldr	r3, [r0, #12]
  405b1a:	60a0      	str	r0, [r4, #8]
  405b1c:	60e3      	str	r3, [r4, #12]
  405b1e:	609c      	str	r4, [r3, #8]
  405b20:	60c4      	str	r4, [r0, #12]
  405b22:	4640      	mov	r0, r8
  405b24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405b28:	f7ff ba9a 	b.w	405060 <__malloc_unlock>
  405b2c:	6895      	ldr	r5, [r2, #8]
  405b2e:	4f3b      	ldr	r7, [pc, #236]	; (405c1c <_free_r+0x1c0>)
  405b30:	42bd      	cmp	r5, r7
  405b32:	4403      	add	r3, r0
  405b34:	d040      	beq.n	405bb8 <_free_r+0x15c>
  405b36:	68d0      	ldr	r0, [r2, #12]
  405b38:	60e8      	str	r0, [r5, #12]
  405b3a:	f043 0201 	orr.w	r2, r3, #1
  405b3e:	6085      	str	r5, [r0, #8]
  405b40:	6062      	str	r2, [r4, #4]
  405b42:	50e3      	str	r3, [r4, r3]
  405b44:	e7b7      	b.n	405ab6 <_free_r+0x5a>
  405b46:	07ff      	lsls	r7, r7, #31
  405b48:	4403      	add	r3, r0
  405b4a:	d407      	bmi.n	405b5c <_free_r+0x100>
  405b4c:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405b50:	1aa4      	subs	r4, r4, r2
  405b52:	4413      	add	r3, r2
  405b54:	68a0      	ldr	r0, [r4, #8]
  405b56:	68e2      	ldr	r2, [r4, #12]
  405b58:	60c2      	str	r2, [r0, #12]
  405b5a:	6090      	str	r0, [r2, #8]
  405b5c:	4a30      	ldr	r2, [pc, #192]	; (405c20 <_free_r+0x1c4>)
  405b5e:	6812      	ldr	r2, [r2, #0]
  405b60:	f043 0001 	orr.w	r0, r3, #1
  405b64:	4293      	cmp	r3, r2
  405b66:	6060      	str	r0, [r4, #4]
  405b68:	608c      	str	r4, [r1, #8]
  405b6a:	d3b9      	bcc.n	405ae0 <_free_r+0x84>
  405b6c:	4b2d      	ldr	r3, [pc, #180]	; (405c24 <_free_r+0x1c8>)
  405b6e:	4640      	mov	r0, r8
  405b70:	6819      	ldr	r1, [r3, #0]
  405b72:	f7ff ff23 	bl	4059bc <_malloc_trim_r>
  405b76:	e7b3      	b.n	405ae0 <_free_r+0x84>
  405b78:	4610      	mov	r0, r2
  405b7a:	e7cd      	b.n	405b18 <_free_r+0xbc>
  405b7c:	1811      	adds	r1, r2, r0
  405b7e:	6849      	ldr	r1, [r1, #4]
  405b80:	07c9      	lsls	r1, r1, #31
  405b82:	d444      	bmi.n	405c0e <_free_r+0x1b2>
  405b84:	6891      	ldr	r1, [r2, #8]
  405b86:	68d2      	ldr	r2, [r2, #12]
  405b88:	60ca      	str	r2, [r1, #12]
  405b8a:	4403      	add	r3, r0
  405b8c:	f043 0001 	orr.w	r0, r3, #1
  405b90:	6091      	str	r1, [r2, #8]
  405b92:	6060      	str	r0, [r4, #4]
  405b94:	50e3      	str	r3, [r4, r3]
  405b96:	e7a3      	b.n	405ae0 <_free_r+0x84>
  405b98:	2a14      	cmp	r2, #20
  405b9a:	d816      	bhi.n	405bca <_free_r+0x16e>
  405b9c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405ba0:	00ff      	lsls	r7, r7, #3
  405ba2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405ba6:	e7aa      	b.n	405afe <_free_r+0xa2>
  405ba8:	10aa      	asrs	r2, r5, #2
  405baa:	2301      	movs	r3, #1
  405bac:	684d      	ldr	r5, [r1, #4]
  405bae:	4093      	lsls	r3, r2
  405bb0:	432b      	orrs	r3, r5
  405bb2:	604b      	str	r3, [r1, #4]
  405bb4:	4603      	mov	r3, r0
  405bb6:	e7b0      	b.n	405b1a <_free_r+0xbe>
  405bb8:	f043 0201 	orr.w	r2, r3, #1
  405bbc:	614c      	str	r4, [r1, #20]
  405bbe:	610c      	str	r4, [r1, #16]
  405bc0:	60e5      	str	r5, [r4, #12]
  405bc2:	60a5      	str	r5, [r4, #8]
  405bc4:	6062      	str	r2, [r4, #4]
  405bc6:	50e3      	str	r3, [r4, r3]
  405bc8:	e78a      	b.n	405ae0 <_free_r+0x84>
  405bca:	2a54      	cmp	r2, #84	; 0x54
  405bcc:	d806      	bhi.n	405bdc <_free_r+0x180>
  405bce:	0b1a      	lsrs	r2, r3, #12
  405bd0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405bd4:	00ff      	lsls	r7, r7, #3
  405bd6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405bda:	e790      	b.n	405afe <_free_r+0xa2>
  405bdc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405be0:	d806      	bhi.n	405bf0 <_free_r+0x194>
  405be2:	0bda      	lsrs	r2, r3, #15
  405be4:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405be8:	00ff      	lsls	r7, r7, #3
  405bea:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405bee:	e786      	b.n	405afe <_free_r+0xa2>
  405bf0:	f240 5054 	movw	r0, #1364	; 0x554
  405bf4:	4282      	cmp	r2, r0
  405bf6:	d806      	bhi.n	405c06 <_free_r+0x1aa>
  405bf8:	0c9a      	lsrs	r2, r3, #18
  405bfa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405bfe:	00ff      	lsls	r7, r7, #3
  405c00:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405c04:	e77b      	b.n	405afe <_free_r+0xa2>
  405c06:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405c0a:	257e      	movs	r5, #126	; 0x7e
  405c0c:	e777      	b.n	405afe <_free_r+0xa2>
  405c0e:	f043 0101 	orr.w	r1, r3, #1
  405c12:	6061      	str	r1, [r4, #4]
  405c14:	6013      	str	r3, [r2, #0]
  405c16:	e763      	b.n	405ae0 <_free_r+0x84>
  405c18:	20400454 	.word	0x20400454
  405c1c:	2040045c 	.word	0x2040045c
  405c20:	20400860 	.word	0x20400860
  405c24:	20400ca8 	.word	0x20400ca8

00405c28 <__ascii_mbtowc>:
  405c28:	b082      	sub	sp, #8
  405c2a:	b149      	cbz	r1, 405c40 <__ascii_mbtowc+0x18>
  405c2c:	b15a      	cbz	r2, 405c46 <__ascii_mbtowc+0x1e>
  405c2e:	b16b      	cbz	r3, 405c4c <__ascii_mbtowc+0x24>
  405c30:	7813      	ldrb	r3, [r2, #0]
  405c32:	600b      	str	r3, [r1, #0]
  405c34:	7812      	ldrb	r2, [r2, #0]
  405c36:	1c10      	adds	r0, r2, #0
  405c38:	bf18      	it	ne
  405c3a:	2001      	movne	r0, #1
  405c3c:	b002      	add	sp, #8
  405c3e:	4770      	bx	lr
  405c40:	a901      	add	r1, sp, #4
  405c42:	2a00      	cmp	r2, #0
  405c44:	d1f3      	bne.n	405c2e <__ascii_mbtowc+0x6>
  405c46:	4610      	mov	r0, r2
  405c48:	b002      	add	sp, #8
  405c4a:	4770      	bx	lr
  405c4c:	f06f 0001 	mvn.w	r0, #1
  405c50:	e7f4      	b.n	405c3c <__ascii_mbtowc+0x14>
  405c52:	bf00      	nop

00405c54 <memmove>:
  405c54:	4288      	cmp	r0, r1
  405c56:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c58:	d90d      	bls.n	405c76 <memmove+0x22>
  405c5a:	188b      	adds	r3, r1, r2
  405c5c:	4298      	cmp	r0, r3
  405c5e:	d20a      	bcs.n	405c76 <memmove+0x22>
  405c60:	1884      	adds	r4, r0, r2
  405c62:	2a00      	cmp	r2, #0
  405c64:	d051      	beq.n	405d0a <memmove+0xb6>
  405c66:	4622      	mov	r2, r4
  405c68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405c6c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405c70:	4299      	cmp	r1, r3
  405c72:	d1f9      	bne.n	405c68 <memmove+0x14>
  405c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405c76:	2a0f      	cmp	r2, #15
  405c78:	d948      	bls.n	405d0c <memmove+0xb8>
  405c7a:	ea41 0300 	orr.w	r3, r1, r0
  405c7e:	079b      	lsls	r3, r3, #30
  405c80:	d146      	bne.n	405d10 <memmove+0xbc>
  405c82:	f100 0410 	add.w	r4, r0, #16
  405c86:	f101 0310 	add.w	r3, r1, #16
  405c8a:	4615      	mov	r5, r2
  405c8c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405c90:	f844 6c10 	str.w	r6, [r4, #-16]
  405c94:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405c98:	f844 6c0c 	str.w	r6, [r4, #-12]
  405c9c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405ca0:	f844 6c08 	str.w	r6, [r4, #-8]
  405ca4:	3d10      	subs	r5, #16
  405ca6:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405caa:	f844 6c04 	str.w	r6, [r4, #-4]
  405cae:	2d0f      	cmp	r5, #15
  405cb0:	f103 0310 	add.w	r3, r3, #16
  405cb4:	f104 0410 	add.w	r4, r4, #16
  405cb8:	d8e8      	bhi.n	405c8c <memmove+0x38>
  405cba:	f1a2 0310 	sub.w	r3, r2, #16
  405cbe:	f023 030f 	bic.w	r3, r3, #15
  405cc2:	f002 0e0f 	and.w	lr, r2, #15
  405cc6:	3310      	adds	r3, #16
  405cc8:	f1be 0f03 	cmp.w	lr, #3
  405ccc:	4419      	add	r1, r3
  405cce:	4403      	add	r3, r0
  405cd0:	d921      	bls.n	405d16 <memmove+0xc2>
  405cd2:	1f1e      	subs	r6, r3, #4
  405cd4:	460d      	mov	r5, r1
  405cd6:	4674      	mov	r4, lr
  405cd8:	3c04      	subs	r4, #4
  405cda:	f855 7b04 	ldr.w	r7, [r5], #4
  405cde:	f846 7f04 	str.w	r7, [r6, #4]!
  405ce2:	2c03      	cmp	r4, #3
  405ce4:	d8f8      	bhi.n	405cd8 <memmove+0x84>
  405ce6:	f1ae 0404 	sub.w	r4, lr, #4
  405cea:	f024 0403 	bic.w	r4, r4, #3
  405cee:	3404      	adds	r4, #4
  405cf0:	4421      	add	r1, r4
  405cf2:	4423      	add	r3, r4
  405cf4:	f002 0203 	and.w	r2, r2, #3
  405cf8:	b162      	cbz	r2, 405d14 <memmove+0xc0>
  405cfa:	3b01      	subs	r3, #1
  405cfc:	440a      	add	r2, r1
  405cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
  405d02:	f803 4f01 	strb.w	r4, [r3, #1]!
  405d06:	428a      	cmp	r2, r1
  405d08:	d1f9      	bne.n	405cfe <memmove+0xaa>
  405d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d0c:	4603      	mov	r3, r0
  405d0e:	e7f3      	b.n	405cf8 <memmove+0xa4>
  405d10:	4603      	mov	r3, r0
  405d12:	e7f2      	b.n	405cfa <memmove+0xa6>
  405d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405d16:	4672      	mov	r2, lr
  405d18:	e7ee      	b.n	405cf8 <memmove+0xa4>
  405d1a:	bf00      	nop

00405d1c <_realloc_r>:
  405d1c:	2900      	cmp	r1, #0
  405d1e:	f000 8095 	beq.w	405e4c <_realloc_r+0x130>
  405d22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405d26:	460d      	mov	r5, r1
  405d28:	4616      	mov	r6, r2
  405d2a:	b083      	sub	sp, #12
  405d2c:	4680      	mov	r8, r0
  405d2e:	f106 070b 	add.w	r7, r6, #11
  405d32:	f7ff f98f 	bl	405054 <__malloc_lock>
  405d36:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405d3a:	2f16      	cmp	r7, #22
  405d3c:	f02e 0403 	bic.w	r4, lr, #3
  405d40:	f1a5 0908 	sub.w	r9, r5, #8
  405d44:	d83c      	bhi.n	405dc0 <_realloc_r+0xa4>
  405d46:	2210      	movs	r2, #16
  405d48:	4617      	mov	r7, r2
  405d4a:	42be      	cmp	r6, r7
  405d4c:	d83d      	bhi.n	405dca <_realloc_r+0xae>
  405d4e:	4294      	cmp	r4, r2
  405d50:	da43      	bge.n	405dda <_realloc_r+0xbe>
  405d52:	4bc4      	ldr	r3, [pc, #784]	; (406064 <_realloc_r+0x348>)
  405d54:	6899      	ldr	r1, [r3, #8]
  405d56:	eb09 0004 	add.w	r0, r9, r4
  405d5a:	4288      	cmp	r0, r1
  405d5c:	f000 80b4 	beq.w	405ec8 <_realloc_r+0x1ac>
  405d60:	6843      	ldr	r3, [r0, #4]
  405d62:	f023 0101 	bic.w	r1, r3, #1
  405d66:	4401      	add	r1, r0
  405d68:	6849      	ldr	r1, [r1, #4]
  405d6a:	07c9      	lsls	r1, r1, #31
  405d6c:	d54c      	bpl.n	405e08 <_realloc_r+0xec>
  405d6e:	f01e 0f01 	tst.w	lr, #1
  405d72:	f000 809b 	beq.w	405eac <_realloc_r+0x190>
  405d76:	4631      	mov	r1, r6
  405d78:	4640      	mov	r0, r8
  405d7a:	f7fe fdcb 	bl	404914 <_malloc_r>
  405d7e:	4606      	mov	r6, r0
  405d80:	2800      	cmp	r0, #0
  405d82:	d03a      	beq.n	405dfa <_realloc_r+0xde>
  405d84:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405d88:	f023 0301 	bic.w	r3, r3, #1
  405d8c:	444b      	add	r3, r9
  405d8e:	f1a0 0208 	sub.w	r2, r0, #8
  405d92:	429a      	cmp	r2, r3
  405d94:	f000 8121 	beq.w	405fda <_realloc_r+0x2be>
  405d98:	1f22      	subs	r2, r4, #4
  405d9a:	2a24      	cmp	r2, #36	; 0x24
  405d9c:	f200 8107 	bhi.w	405fae <_realloc_r+0x292>
  405da0:	2a13      	cmp	r2, #19
  405da2:	f200 80db 	bhi.w	405f5c <_realloc_r+0x240>
  405da6:	4603      	mov	r3, r0
  405da8:	462a      	mov	r2, r5
  405daa:	6811      	ldr	r1, [r2, #0]
  405dac:	6019      	str	r1, [r3, #0]
  405dae:	6851      	ldr	r1, [r2, #4]
  405db0:	6059      	str	r1, [r3, #4]
  405db2:	6892      	ldr	r2, [r2, #8]
  405db4:	609a      	str	r2, [r3, #8]
  405db6:	4629      	mov	r1, r5
  405db8:	4640      	mov	r0, r8
  405dba:	f7ff fe4f 	bl	405a5c <_free_r>
  405dbe:	e01c      	b.n	405dfa <_realloc_r+0xde>
  405dc0:	f027 0707 	bic.w	r7, r7, #7
  405dc4:	2f00      	cmp	r7, #0
  405dc6:	463a      	mov	r2, r7
  405dc8:	dabf      	bge.n	405d4a <_realloc_r+0x2e>
  405dca:	2600      	movs	r6, #0
  405dcc:	230c      	movs	r3, #12
  405dce:	4630      	mov	r0, r6
  405dd0:	f8c8 3000 	str.w	r3, [r8]
  405dd4:	b003      	add	sp, #12
  405dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dda:	462e      	mov	r6, r5
  405ddc:	1be3      	subs	r3, r4, r7
  405dde:	2b0f      	cmp	r3, #15
  405de0:	d81e      	bhi.n	405e20 <_realloc_r+0x104>
  405de2:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405de6:	f003 0301 	and.w	r3, r3, #1
  405dea:	4323      	orrs	r3, r4
  405dec:	444c      	add	r4, r9
  405dee:	f8c9 3004 	str.w	r3, [r9, #4]
  405df2:	6863      	ldr	r3, [r4, #4]
  405df4:	f043 0301 	orr.w	r3, r3, #1
  405df8:	6063      	str	r3, [r4, #4]
  405dfa:	4640      	mov	r0, r8
  405dfc:	f7ff f930 	bl	405060 <__malloc_unlock>
  405e00:	4630      	mov	r0, r6
  405e02:	b003      	add	sp, #12
  405e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405e08:	f023 0303 	bic.w	r3, r3, #3
  405e0c:	18e1      	adds	r1, r4, r3
  405e0e:	4291      	cmp	r1, r2
  405e10:	db1f      	blt.n	405e52 <_realloc_r+0x136>
  405e12:	68c3      	ldr	r3, [r0, #12]
  405e14:	6882      	ldr	r2, [r0, #8]
  405e16:	462e      	mov	r6, r5
  405e18:	60d3      	str	r3, [r2, #12]
  405e1a:	460c      	mov	r4, r1
  405e1c:	609a      	str	r2, [r3, #8]
  405e1e:	e7dd      	b.n	405ddc <_realloc_r+0xc0>
  405e20:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405e24:	eb09 0107 	add.w	r1, r9, r7
  405e28:	f002 0201 	and.w	r2, r2, #1
  405e2c:	444c      	add	r4, r9
  405e2e:	f043 0301 	orr.w	r3, r3, #1
  405e32:	4317      	orrs	r7, r2
  405e34:	f8c9 7004 	str.w	r7, [r9, #4]
  405e38:	604b      	str	r3, [r1, #4]
  405e3a:	6863      	ldr	r3, [r4, #4]
  405e3c:	f043 0301 	orr.w	r3, r3, #1
  405e40:	3108      	adds	r1, #8
  405e42:	6063      	str	r3, [r4, #4]
  405e44:	4640      	mov	r0, r8
  405e46:	f7ff fe09 	bl	405a5c <_free_r>
  405e4a:	e7d6      	b.n	405dfa <_realloc_r+0xde>
  405e4c:	4611      	mov	r1, r2
  405e4e:	f7fe bd61 	b.w	404914 <_malloc_r>
  405e52:	f01e 0f01 	tst.w	lr, #1
  405e56:	d18e      	bne.n	405d76 <_realloc_r+0x5a>
  405e58:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405e5c:	eba9 0a01 	sub.w	sl, r9, r1
  405e60:	f8da 1004 	ldr.w	r1, [sl, #4]
  405e64:	f021 0103 	bic.w	r1, r1, #3
  405e68:	440b      	add	r3, r1
  405e6a:	4423      	add	r3, r4
  405e6c:	4293      	cmp	r3, r2
  405e6e:	db25      	blt.n	405ebc <_realloc_r+0x1a0>
  405e70:	68c2      	ldr	r2, [r0, #12]
  405e72:	6881      	ldr	r1, [r0, #8]
  405e74:	4656      	mov	r6, sl
  405e76:	60ca      	str	r2, [r1, #12]
  405e78:	6091      	str	r1, [r2, #8]
  405e7a:	f8da 100c 	ldr.w	r1, [sl, #12]
  405e7e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405e82:	1f22      	subs	r2, r4, #4
  405e84:	2a24      	cmp	r2, #36	; 0x24
  405e86:	60c1      	str	r1, [r0, #12]
  405e88:	6088      	str	r0, [r1, #8]
  405e8a:	f200 8094 	bhi.w	405fb6 <_realloc_r+0x29a>
  405e8e:	2a13      	cmp	r2, #19
  405e90:	d96f      	bls.n	405f72 <_realloc_r+0x256>
  405e92:	6829      	ldr	r1, [r5, #0]
  405e94:	f8ca 1008 	str.w	r1, [sl, #8]
  405e98:	6869      	ldr	r1, [r5, #4]
  405e9a:	f8ca 100c 	str.w	r1, [sl, #12]
  405e9e:	2a1b      	cmp	r2, #27
  405ea0:	f200 80a2 	bhi.w	405fe8 <_realloc_r+0x2cc>
  405ea4:	3508      	adds	r5, #8
  405ea6:	f10a 0210 	add.w	r2, sl, #16
  405eaa:	e063      	b.n	405f74 <_realloc_r+0x258>
  405eac:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405eb0:	eba9 0a03 	sub.w	sl, r9, r3
  405eb4:	f8da 1004 	ldr.w	r1, [sl, #4]
  405eb8:	f021 0103 	bic.w	r1, r1, #3
  405ebc:	1863      	adds	r3, r4, r1
  405ebe:	4293      	cmp	r3, r2
  405ec0:	f6ff af59 	blt.w	405d76 <_realloc_r+0x5a>
  405ec4:	4656      	mov	r6, sl
  405ec6:	e7d8      	b.n	405e7a <_realloc_r+0x15e>
  405ec8:	6841      	ldr	r1, [r0, #4]
  405eca:	f021 0b03 	bic.w	fp, r1, #3
  405ece:	44a3      	add	fp, r4
  405ed0:	f107 0010 	add.w	r0, r7, #16
  405ed4:	4583      	cmp	fp, r0
  405ed6:	da56      	bge.n	405f86 <_realloc_r+0x26a>
  405ed8:	f01e 0f01 	tst.w	lr, #1
  405edc:	f47f af4b 	bne.w	405d76 <_realloc_r+0x5a>
  405ee0:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405ee4:	eba9 0a01 	sub.w	sl, r9, r1
  405ee8:	f8da 1004 	ldr.w	r1, [sl, #4]
  405eec:	f021 0103 	bic.w	r1, r1, #3
  405ef0:	448b      	add	fp, r1
  405ef2:	4558      	cmp	r0, fp
  405ef4:	dce2      	bgt.n	405ebc <_realloc_r+0x1a0>
  405ef6:	4656      	mov	r6, sl
  405ef8:	f8da 100c 	ldr.w	r1, [sl, #12]
  405efc:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405f00:	1f22      	subs	r2, r4, #4
  405f02:	2a24      	cmp	r2, #36	; 0x24
  405f04:	60c1      	str	r1, [r0, #12]
  405f06:	6088      	str	r0, [r1, #8]
  405f08:	f200 808f 	bhi.w	40602a <_realloc_r+0x30e>
  405f0c:	2a13      	cmp	r2, #19
  405f0e:	f240 808a 	bls.w	406026 <_realloc_r+0x30a>
  405f12:	6829      	ldr	r1, [r5, #0]
  405f14:	f8ca 1008 	str.w	r1, [sl, #8]
  405f18:	6869      	ldr	r1, [r5, #4]
  405f1a:	f8ca 100c 	str.w	r1, [sl, #12]
  405f1e:	2a1b      	cmp	r2, #27
  405f20:	f200 808a 	bhi.w	406038 <_realloc_r+0x31c>
  405f24:	3508      	adds	r5, #8
  405f26:	f10a 0210 	add.w	r2, sl, #16
  405f2a:	6829      	ldr	r1, [r5, #0]
  405f2c:	6011      	str	r1, [r2, #0]
  405f2e:	6869      	ldr	r1, [r5, #4]
  405f30:	6051      	str	r1, [r2, #4]
  405f32:	68a9      	ldr	r1, [r5, #8]
  405f34:	6091      	str	r1, [r2, #8]
  405f36:	eb0a 0107 	add.w	r1, sl, r7
  405f3a:	ebab 0207 	sub.w	r2, fp, r7
  405f3e:	f042 0201 	orr.w	r2, r2, #1
  405f42:	6099      	str	r1, [r3, #8]
  405f44:	604a      	str	r2, [r1, #4]
  405f46:	f8da 3004 	ldr.w	r3, [sl, #4]
  405f4a:	f003 0301 	and.w	r3, r3, #1
  405f4e:	431f      	orrs	r7, r3
  405f50:	4640      	mov	r0, r8
  405f52:	f8ca 7004 	str.w	r7, [sl, #4]
  405f56:	f7ff f883 	bl	405060 <__malloc_unlock>
  405f5a:	e751      	b.n	405e00 <_realloc_r+0xe4>
  405f5c:	682b      	ldr	r3, [r5, #0]
  405f5e:	6003      	str	r3, [r0, #0]
  405f60:	686b      	ldr	r3, [r5, #4]
  405f62:	6043      	str	r3, [r0, #4]
  405f64:	2a1b      	cmp	r2, #27
  405f66:	d82d      	bhi.n	405fc4 <_realloc_r+0x2a8>
  405f68:	f100 0308 	add.w	r3, r0, #8
  405f6c:	f105 0208 	add.w	r2, r5, #8
  405f70:	e71b      	b.n	405daa <_realloc_r+0x8e>
  405f72:	4632      	mov	r2, r6
  405f74:	6829      	ldr	r1, [r5, #0]
  405f76:	6011      	str	r1, [r2, #0]
  405f78:	6869      	ldr	r1, [r5, #4]
  405f7a:	6051      	str	r1, [r2, #4]
  405f7c:	68a9      	ldr	r1, [r5, #8]
  405f7e:	6091      	str	r1, [r2, #8]
  405f80:	461c      	mov	r4, r3
  405f82:	46d1      	mov	r9, sl
  405f84:	e72a      	b.n	405ddc <_realloc_r+0xc0>
  405f86:	eb09 0107 	add.w	r1, r9, r7
  405f8a:	ebab 0b07 	sub.w	fp, fp, r7
  405f8e:	f04b 0201 	orr.w	r2, fp, #1
  405f92:	6099      	str	r1, [r3, #8]
  405f94:	604a      	str	r2, [r1, #4]
  405f96:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405f9a:	f003 0301 	and.w	r3, r3, #1
  405f9e:	431f      	orrs	r7, r3
  405fa0:	4640      	mov	r0, r8
  405fa2:	f845 7c04 	str.w	r7, [r5, #-4]
  405fa6:	f7ff f85b 	bl	405060 <__malloc_unlock>
  405faa:	462e      	mov	r6, r5
  405fac:	e728      	b.n	405e00 <_realloc_r+0xe4>
  405fae:	4629      	mov	r1, r5
  405fb0:	f7ff fe50 	bl	405c54 <memmove>
  405fb4:	e6ff      	b.n	405db6 <_realloc_r+0x9a>
  405fb6:	4629      	mov	r1, r5
  405fb8:	4630      	mov	r0, r6
  405fba:	461c      	mov	r4, r3
  405fbc:	46d1      	mov	r9, sl
  405fbe:	f7ff fe49 	bl	405c54 <memmove>
  405fc2:	e70b      	b.n	405ddc <_realloc_r+0xc0>
  405fc4:	68ab      	ldr	r3, [r5, #8]
  405fc6:	6083      	str	r3, [r0, #8]
  405fc8:	68eb      	ldr	r3, [r5, #12]
  405fca:	60c3      	str	r3, [r0, #12]
  405fcc:	2a24      	cmp	r2, #36	; 0x24
  405fce:	d017      	beq.n	406000 <_realloc_r+0x2e4>
  405fd0:	f100 0310 	add.w	r3, r0, #16
  405fd4:	f105 0210 	add.w	r2, r5, #16
  405fd8:	e6e7      	b.n	405daa <_realloc_r+0x8e>
  405fda:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405fde:	f023 0303 	bic.w	r3, r3, #3
  405fe2:	441c      	add	r4, r3
  405fe4:	462e      	mov	r6, r5
  405fe6:	e6f9      	b.n	405ddc <_realloc_r+0xc0>
  405fe8:	68a9      	ldr	r1, [r5, #8]
  405fea:	f8ca 1010 	str.w	r1, [sl, #16]
  405fee:	68e9      	ldr	r1, [r5, #12]
  405ff0:	f8ca 1014 	str.w	r1, [sl, #20]
  405ff4:	2a24      	cmp	r2, #36	; 0x24
  405ff6:	d00c      	beq.n	406012 <_realloc_r+0x2f6>
  405ff8:	3510      	adds	r5, #16
  405ffa:	f10a 0218 	add.w	r2, sl, #24
  405ffe:	e7b9      	b.n	405f74 <_realloc_r+0x258>
  406000:	692b      	ldr	r3, [r5, #16]
  406002:	6103      	str	r3, [r0, #16]
  406004:	696b      	ldr	r3, [r5, #20]
  406006:	6143      	str	r3, [r0, #20]
  406008:	f105 0218 	add.w	r2, r5, #24
  40600c:	f100 0318 	add.w	r3, r0, #24
  406010:	e6cb      	b.n	405daa <_realloc_r+0x8e>
  406012:	692a      	ldr	r2, [r5, #16]
  406014:	f8ca 2018 	str.w	r2, [sl, #24]
  406018:	696a      	ldr	r2, [r5, #20]
  40601a:	f8ca 201c 	str.w	r2, [sl, #28]
  40601e:	3518      	adds	r5, #24
  406020:	f10a 0220 	add.w	r2, sl, #32
  406024:	e7a6      	b.n	405f74 <_realloc_r+0x258>
  406026:	4632      	mov	r2, r6
  406028:	e77f      	b.n	405f2a <_realloc_r+0x20e>
  40602a:	4629      	mov	r1, r5
  40602c:	4630      	mov	r0, r6
  40602e:	9301      	str	r3, [sp, #4]
  406030:	f7ff fe10 	bl	405c54 <memmove>
  406034:	9b01      	ldr	r3, [sp, #4]
  406036:	e77e      	b.n	405f36 <_realloc_r+0x21a>
  406038:	68a9      	ldr	r1, [r5, #8]
  40603a:	f8ca 1010 	str.w	r1, [sl, #16]
  40603e:	68e9      	ldr	r1, [r5, #12]
  406040:	f8ca 1014 	str.w	r1, [sl, #20]
  406044:	2a24      	cmp	r2, #36	; 0x24
  406046:	d003      	beq.n	406050 <_realloc_r+0x334>
  406048:	3510      	adds	r5, #16
  40604a:	f10a 0218 	add.w	r2, sl, #24
  40604e:	e76c      	b.n	405f2a <_realloc_r+0x20e>
  406050:	692a      	ldr	r2, [r5, #16]
  406052:	f8ca 2018 	str.w	r2, [sl, #24]
  406056:	696a      	ldr	r2, [r5, #20]
  406058:	f8ca 201c 	str.w	r2, [sl, #28]
  40605c:	3518      	adds	r5, #24
  40605e:	f10a 0220 	add.w	r2, sl, #32
  406062:	e762      	b.n	405f2a <_realloc_r+0x20e>
  406064:	20400454 	.word	0x20400454

00406068 <__ascii_wctomb>:
  406068:	b121      	cbz	r1, 406074 <__ascii_wctomb+0xc>
  40606a:	2aff      	cmp	r2, #255	; 0xff
  40606c:	d804      	bhi.n	406078 <__ascii_wctomb+0x10>
  40606e:	700a      	strb	r2, [r1, #0]
  406070:	2001      	movs	r0, #1
  406072:	4770      	bx	lr
  406074:	4608      	mov	r0, r1
  406076:	4770      	bx	lr
  406078:	238a      	movs	r3, #138	; 0x8a
  40607a:	6003      	str	r3, [r0, #0]
  40607c:	f04f 30ff 	mov.w	r0, #4294967295
  406080:	4770      	bx	lr
  406082:	bf00      	nop

00406084 <__aeabi_drsub>:
  406084:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  406088:	e002      	b.n	406090 <__adddf3>
  40608a:	bf00      	nop

0040608c <__aeabi_dsub>:
  40608c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00406090 <__adddf3>:
  406090:	b530      	push	{r4, r5, lr}
  406092:	ea4f 0441 	mov.w	r4, r1, lsl #1
  406096:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40609a:	ea94 0f05 	teq	r4, r5
  40609e:	bf08      	it	eq
  4060a0:	ea90 0f02 	teqeq	r0, r2
  4060a4:	bf1f      	itttt	ne
  4060a6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4060aa:	ea55 0c02 	orrsne.w	ip, r5, r2
  4060ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4060b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4060b6:	f000 80e2 	beq.w	40627e <__adddf3+0x1ee>
  4060ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4060be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4060c2:	bfb8      	it	lt
  4060c4:	426d      	neglt	r5, r5
  4060c6:	dd0c      	ble.n	4060e2 <__adddf3+0x52>
  4060c8:	442c      	add	r4, r5
  4060ca:	ea80 0202 	eor.w	r2, r0, r2
  4060ce:	ea81 0303 	eor.w	r3, r1, r3
  4060d2:	ea82 0000 	eor.w	r0, r2, r0
  4060d6:	ea83 0101 	eor.w	r1, r3, r1
  4060da:	ea80 0202 	eor.w	r2, r0, r2
  4060de:	ea81 0303 	eor.w	r3, r1, r3
  4060e2:	2d36      	cmp	r5, #54	; 0x36
  4060e4:	bf88      	it	hi
  4060e6:	bd30      	pophi	{r4, r5, pc}
  4060e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4060ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4060f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  4060f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  4060f8:	d002      	beq.n	406100 <__adddf3+0x70>
  4060fa:	4240      	negs	r0, r0
  4060fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  406100:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  406104:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406108:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40610c:	d002      	beq.n	406114 <__adddf3+0x84>
  40610e:	4252      	negs	r2, r2
  406110:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  406114:	ea94 0f05 	teq	r4, r5
  406118:	f000 80a7 	beq.w	40626a <__adddf3+0x1da>
  40611c:	f1a4 0401 	sub.w	r4, r4, #1
  406120:	f1d5 0e20 	rsbs	lr, r5, #32
  406124:	db0d      	blt.n	406142 <__adddf3+0xb2>
  406126:	fa02 fc0e 	lsl.w	ip, r2, lr
  40612a:	fa22 f205 	lsr.w	r2, r2, r5
  40612e:	1880      	adds	r0, r0, r2
  406130:	f141 0100 	adc.w	r1, r1, #0
  406134:	fa03 f20e 	lsl.w	r2, r3, lr
  406138:	1880      	adds	r0, r0, r2
  40613a:	fa43 f305 	asr.w	r3, r3, r5
  40613e:	4159      	adcs	r1, r3
  406140:	e00e      	b.n	406160 <__adddf3+0xd0>
  406142:	f1a5 0520 	sub.w	r5, r5, #32
  406146:	f10e 0e20 	add.w	lr, lr, #32
  40614a:	2a01      	cmp	r2, #1
  40614c:	fa03 fc0e 	lsl.w	ip, r3, lr
  406150:	bf28      	it	cs
  406152:	f04c 0c02 	orrcs.w	ip, ip, #2
  406156:	fa43 f305 	asr.w	r3, r3, r5
  40615a:	18c0      	adds	r0, r0, r3
  40615c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  406160:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406164:	d507      	bpl.n	406176 <__adddf3+0xe6>
  406166:	f04f 0e00 	mov.w	lr, #0
  40616a:	f1dc 0c00 	rsbs	ip, ip, #0
  40616e:	eb7e 0000 	sbcs.w	r0, lr, r0
  406172:	eb6e 0101 	sbc.w	r1, lr, r1
  406176:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40617a:	d31b      	bcc.n	4061b4 <__adddf3+0x124>
  40617c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  406180:	d30c      	bcc.n	40619c <__adddf3+0x10c>
  406182:	0849      	lsrs	r1, r1, #1
  406184:	ea5f 0030 	movs.w	r0, r0, rrx
  406188:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40618c:	f104 0401 	add.w	r4, r4, #1
  406190:	ea4f 5244 	mov.w	r2, r4, lsl #21
  406194:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  406198:	f080 809a 	bcs.w	4062d0 <__adddf3+0x240>
  40619c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4061a0:	bf08      	it	eq
  4061a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4061a6:	f150 0000 	adcs.w	r0, r0, #0
  4061aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4061ae:	ea41 0105 	orr.w	r1, r1, r5
  4061b2:	bd30      	pop	{r4, r5, pc}
  4061b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4061b8:	4140      	adcs	r0, r0
  4061ba:	eb41 0101 	adc.w	r1, r1, r1
  4061be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4061c2:	f1a4 0401 	sub.w	r4, r4, #1
  4061c6:	d1e9      	bne.n	40619c <__adddf3+0x10c>
  4061c8:	f091 0f00 	teq	r1, #0
  4061cc:	bf04      	itt	eq
  4061ce:	4601      	moveq	r1, r0
  4061d0:	2000      	moveq	r0, #0
  4061d2:	fab1 f381 	clz	r3, r1
  4061d6:	bf08      	it	eq
  4061d8:	3320      	addeq	r3, #32
  4061da:	f1a3 030b 	sub.w	r3, r3, #11
  4061de:	f1b3 0220 	subs.w	r2, r3, #32
  4061e2:	da0c      	bge.n	4061fe <__adddf3+0x16e>
  4061e4:	320c      	adds	r2, #12
  4061e6:	dd08      	ble.n	4061fa <__adddf3+0x16a>
  4061e8:	f102 0c14 	add.w	ip, r2, #20
  4061ec:	f1c2 020c 	rsb	r2, r2, #12
  4061f0:	fa01 f00c 	lsl.w	r0, r1, ip
  4061f4:	fa21 f102 	lsr.w	r1, r1, r2
  4061f8:	e00c      	b.n	406214 <__adddf3+0x184>
  4061fa:	f102 0214 	add.w	r2, r2, #20
  4061fe:	bfd8      	it	le
  406200:	f1c2 0c20 	rsble	ip, r2, #32
  406204:	fa01 f102 	lsl.w	r1, r1, r2
  406208:	fa20 fc0c 	lsr.w	ip, r0, ip
  40620c:	bfdc      	itt	le
  40620e:	ea41 010c 	orrle.w	r1, r1, ip
  406212:	4090      	lslle	r0, r2
  406214:	1ae4      	subs	r4, r4, r3
  406216:	bfa2      	ittt	ge
  406218:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40621c:	4329      	orrge	r1, r5
  40621e:	bd30      	popge	{r4, r5, pc}
  406220:	ea6f 0404 	mvn.w	r4, r4
  406224:	3c1f      	subs	r4, #31
  406226:	da1c      	bge.n	406262 <__adddf3+0x1d2>
  406228:	340c      	adds	r4, #12
  40622a:	dc0e      	bgt.n	40624a <__adddf3+0x1ba>
  40622c:	f104 0414 	add.w	r4, r4, #20
  406230:	f1c4 0220 	rsb	r2, r4, #32
  406234:	fa20 f004 	lsr.w	r0, r0, r4
  406238:	fa01 f302 	lsl.w	r3, r1, r2
  40623c:	ea40 0003 	orr.w	r0, r0, r3
  406240:	fa21 f304 	lsr.w	r3, r1, r4
  406244:	ea45 0103 	orr.w	r1, r5, r3
  406248:	bd30      	pop	{r4, r5, pc}
  40624a:	f1c4 040c 	rsb	r4, r4, #12
  40624e:	f1c4 0220 	rsb	r2, r4, #32
  406252:	fa20 f002 	lsr.w	r0, r0, r2
  406256:	fa01 f304 	lsl.w	r3, r1, r4
  40625a:	ea40 0003 	orr.w	r0, r0, r3
  40625e:	4629      	mov	r1, r5
  406260:	bd30      	pop	{r4, r5, pc}
  406262:	fa21 f004 	lsr.w	r0, r1, r4
  406266:	4629      	mov	r1, r5
  406268:	bd30      	pop	{r4, r5, pc}
  40626a:	f094 0f00 	teq	r4, #0
  40626e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  406272:	bf06      	itte	eq
  406274:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  406278:	3401      	addeq	r4, #1
  40627a:	3d01      	subne	r5, #1
  40627c:	e74e      	b.n	40611c <__adddf3+0x8c>
  40627e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  406282:	bf18      	it	ne
  406284:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  406288:	d029      	beq.n	4062de <__adddf3+0x24e>
  40628a:	ea94 0f05 	teq	r4, r5
  40628e:	bf08      	it	eq
  406290:	ea90 0f02 	teqeq	r0, r2
  406294:	d005      	beq.n	4062a2 <__adddf3+0x212>
  406296:	ea54 0c00 	orrs.w	ip, r4, r0
  40629a:	bf04      	itt	eq
  40629c:	4619      	moveq	r1, r3
  40629e:	4610      	moveq	r0, r2
  4062a0:	bd30      	pop	{r4, r5, pc}
  4062a2:	ea91 0f03 	teq	r1, r3
  4062a6:	bf1e      	ittt	ne
  4062a8:	2100      	movne	r1, #0
  4062aa:	2000      	movne	r0, #0
  4062ac:	bd30      	popne	{r4, r5, pc}
  4062ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4062b2:	d105      	bne.n	4062c0 <__adddf3+0x230>
  4062b4:	0040      	lsls	r0, r0, #1
  4062b6:	4149      	adcs	r1, r1
  4062b8:	bf28      	it	cs
  4062ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4062be:	bd30      	pop	{r4, r5, pc}
  4062c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4062c4:	bf3c      	itt	cc
  4062c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4062ca:	bd30      	popcc	{r4, r5, pc}
  4062cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4062d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4062d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4062d8:	f04f 0000 	mov.w	r0, #0
  4062dc:	bd30      	pop	{r4, r5, pc}
  4062de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4062e2:	bf1a      	itte	ne
  4062e4:	4619      	movne	r1, r3
  4062e6:	4610      	movne	r0, r2
  4062e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  4062ec:	bf1c      	itt	ne
  4062ee:	460b      	movne	r3, r1
  4062f0:	4602      	movne	r2, r0
  4062f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4062f6:	bf06      	itte	eq
  4062f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  4062fc:	ea91 0f03 	teqeq	r1, r3
  406300:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  406304:	bd30      	pop	{r4, r5, pc}
  406306:	bf00      	nop

00406308 <__aeabi_ui2d>:
  406308:	f090 0f00 	teq	r0, #0
  40630c:	bf04      	itt	eq
  40630e:	2100      	moveq	r1, #0
  406310:	4770      	bxeq	lr
  406312:	b530      	push	{r4, r5, lr}
  406314:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406318:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40631c:	f04f 0500 	mov.w	r5, #0
  406320:	f04f 0100 	mov.w	r1, #0
  406324:	e750      	b.n	4061c8 <__adddf3+0x138>
  406326:	bf00      	nop

00406328 <__aeabi_i2d>:
  406328:	f090 0f00 	teq	r0, #0
  40632c:	bf04      	itt	eq
  40632e:	2100      	moveq	r1, #0
  406330:	4770      	bxeq	lr
  406332:	b530      	push	{r4, r5, lr}
  406334:	f44f 6480 	mov.w	r4, #1024	; 0x400
  406338:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40633c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  406340:	bf48      	it	mi
  406342:	4240      	negmi	r0, r0
  406344:	f04f 0100 	mov.w	r1, #0
  406348:	e73e      	b.n	4061c8 <__adddf3+0x138>
  40634a:	bf00      	nop

0040634c <__aeabi_f2d>:
  40634c:	0042      	lsls	r2, r0, #1
  40634e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  406352:	ea4f 0131 	mov.w	r1, r1, rrx
  406356:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40635a:	bf1f      	itttt	ne
  40635c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  406360:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406364:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  406368:	4770      	bxne	lr
  40636a:	f092 0f00 	teq	r2, #0
  40636e:	bf14      	ite	ne
  406370:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  406374:	4770      	bxeq	lr
  406376:	b530      	push	{r4, r5, lr}
  406378:	f44f 7460 	mov.w	r4, #896	; 0x380
  40637c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  406380:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406384:	e720      	b.n	4061c8 <__adddf3+0x138>
  406386:	bf00      	nop

00406388 <__aeabi_ul2d>:
  406388:	ea50 0201 	orrs.w	r2, r0, r1
  40638c:	bf08      	it	eq
  40638e:	4770      	bxeq	lr
  406390:	b530      	push	{r4, r5, lr}
  406392:	f04f 0500 	mov.w	r5, #0
  406396:	e00a      	b.n	4063ae <__aeabi_l2d+0x16>

00406398 <__aeabi_l2d>:
  406398:	ea50 0201 	orrs.w	r2, r0, r1
  40639c:	bf08      	it	eq
  40639e:	4770      	bxeq	lr
  4063a0:	b530      	push	{r4, r5, lr}
  4063a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4063a6:	d502      	bpl.n	4063ae <__aeabi_l2d+0x16>
  4063a8:	4240      	negs	r0, r0
  4063aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4063ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4063b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4063b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4063ba:	f43f aedc 	beq.w	406176 <__adddf3+0xe6>
  4063be:	f04f 0203 	mov.w	r2, #3
  4063c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4063c6:	bf18      	it	ne
  4063c8:	3203      	addne	r2, #3
  4063ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4063ce:	bf18      	it	ne
  4063d0:	3203      	addne	r2, #3
  4063d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4063d6:	f1c2 0320 	rsb	r3, r2, #32
  4063da:	fa00 fc03 	lsl.w	ip, r0, r3
  4063de:	fa20 f002 	lsr.w	r0, r0, r2
  4063e2:	fa01 fe03 	lsl.w	lr, r1, r3
  4063e6:	ea40 000e 	orr.w	r0, r0, lr
  4063ea:	fa21 f102 	lsr.w	r1, r1, r2
  4063ee:	4414      	add	r4, r2
  4063f0:	e6c1      	b.n	406176 <__adddf3+0xe6>
  4063f2:	bf00      	nop

004063f4 <__aeabi_dmul>:
  4063f4:	b570      	push	{r4, r5, r6, lr}
  4063f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4063fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4063fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406402:	bf1d      	ittte	ne
  406404:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  406408:	ea94 0f0c 	teqne	r4, ip
  40640c:	ea95 0f0c 	teqne	r5, ip
  406410:	f000 f8de 	bleq	4065d0 <__aeabi_dmul+0x1dc>
  406414:	442c      	add	r4, r5
  406416:	ea81 0603 	eor.w	r6, r1, r3
  40641a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40641e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  406422:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  406426:	bf18      	it	ne
  406428:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40642c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  406434:	d038      	beq.n	4064a8 <__aeabi_dmul+0xb4>
  406436:	fba0 ce02 	umull	ip, lr, r0, r2
  40643a:	f04f 0500 	mov.w	r5, #0
  40643e:	fbe1 e502 	umlal	lr, r5, r1, r2
  406442:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  406446:	fbe0 e503 	umlal	lr, r5, r0, r3
  40644a:	f04f 0600 	mov.w	r6, #0
  40644e:	fbe1 5603 	umlal	r5, r6, r1, r3
  406452:	f09c 0f00 	teq	ip, #0
  406456:	bf18      	it	ne
  406458:	f04e 0e01 	orrne.w	lr, lr, #1
  40645c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  406460:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  406464:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  406468:	d204      	bcs.n	406474 <__aeabi_dmul+0x80>
  40646a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40646e:	416d      	adcs	r5, r5
  406470:	eb46 0606 	adc.w	r6, r6, r6
  406474:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  406478:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  40647c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  406480:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  406484:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  406488:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40648c:	bf88      	it	hi
  40648e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406492:	d81e      	bhi.n	4064d2 <__aeabi_dmul+0xde>
  406494:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  406498:	bf08      	it	eq
  40649a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40649e:	f150 0000 	adcs.w	r0, r0, #0
  4064a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4064a6:	bd70      	pop	{r4, r5, r6, pc}
  4064a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4064ac:	ea46 0101 	orr.w	r1, r6, r1
  4064b0:	ea40 0002 	orr.w	r0, r0, r2
  4064b4:	ea81 0103 	eor.w	r1, r1, r3
  4064b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4064bc:	bfc2      	ittt	gt
  4064be:	ebd4 050c 	rsbsgt	r5, r4, ip
  4064c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4064c6:	bd70      	popgt	{r4, r5, r6, pc}
  4064c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4064cc:	f04f 0e00 	mov.w	lr, #0
  4064d0:	3c01      	subs	r4, #1
  4064d2:	f300 80ab 	bgt.w	40662c <__aeabi_dmul+0x238>
  4064d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4064da:	bfde      	ittt	le
  4064dc:	2000      	movle	r0, #0
  4064de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  4064e2:	bd70      	pople	{r4, r5, r6, pc}
  4064e4:	f1c4 0400 	rsb	r4, r4, #0
  4064e8:	3c20      	subs	r4, #32
  4064ea:	da35      	bge.n	406558 <__aeabi_dmul+0x164>
  4064ec:	340c      	adds	r4, #12
  4064ee:	dc1b      	bgt.n	406528 <__aeabi_dmul+0x134>
  4064f0:	f104 0414 	add.w	r4, r4, #20
  4064f4:	f1c4 0520 	rsb	r5, r4, #32
  4064f8:	fa00 f305 	lsl.w	r3, r0, r5
  4064fc:	fa20 f004 	lsr.w	r0, r0, r4
  406500:	fa01 f205 	lsl.w	r2, r1, r5
  406504:	ea40 0002 	orr.w	r0, r0, r2
  406508:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40650c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  406510:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406514:	fa21 f604 	lsr.w	r6, r1, r4
  406518:	eb42 0106 	adc.w	r1, r2, r6
  40651c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406520:	bf08      	it	eq
  406522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406526:	bd70      	pop	{r4, r5, r6, pc}
  406528:	f1c4 040c 	rsb	r4, r4, #12
  40652c:	f1c4 0520 	rsb	r5, r4, #32
  406530:	fa00 f304 	lsl.w	r3, r0, r4
  406534:	fa20 f005 	lsr.w	r0, r0, r5
  406538:	fa01 f204 	lsl.w	r2, r1, r4
  40653c:	ea40 0002 	orr.w	r0, r0, r2
  406540:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406544:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  406548:	f141 0100 	adc.w	r1, r1, #0
  40654c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406550:	bf08      	it	eq
  406552:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  406556:	bd70      	pop	{r4, r5, r6, pc}
  406558:	f1c4 0520 	rsb	r5, r4, #32
  40655c:	fa00 f205 	lsl.w	r2, r0, r5
  406560:	ea4e 0e02 	orr.w	lr, lr, r2
  406564:	fa20 f304 	lsr.w	r3, r0, r4
  406568:	fa01 f205 	lsl.w	r2, r1, r5
  40656c:	ea43 0302 	orr.w	r3, r3, r2
  406570:	fa21 f004 	lsr.w	r0, r1, r4
  406574:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406578:	fa21 f204 	lsr.w	r2, r1, r4
  40657c:	ea20 0002 	bic.w	r0, r0, r2
  406580:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406584:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406588:	bf08      	it	eq
  40658a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40658e:	bd70      	pop	{r4, r5, r6, pc}
  406590:	f094 0f00 	teq	r4, #0
  406594:	d10f      	bne.n	4065b6 <__aeabi_dmul+0x1c2>
  406596:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40659a:	0040      	lsls	r0, r0, #1
  40659c:	eb41 0101 	adc.w	r1, r1, r1
  4065a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4065a4:	bf08      	it	eq
  4065a6:	3c01      	subeq	r4, #1
  4065a8:	d0f7      	beq.n	40659a <__aeabi_dmul+0x1a6>
  4065aa:	ea41 0106 	orr.w	r1, r1, r6
  4065ae:	f095 0f00 	teq	r5, #0
  4065b2:	bf18      	it	ne
  4065b4:	4770      	bxne	lr
  4065b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4065ba:	0052      	lsls	r2, r2, #1
  4065bc:	eb43 0303 	adc.w	r3, r3, r3
  4065c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4065c4:	bf08      	it	eq
  4065c6:	3d01      	subeq	r5, #1
  4065c8:	d0f7      	beq.n	4065ba <__aeabi_dmul+0x1c6>
  4065ca:	ea43 0306 	orr.w	r3, r3, r6
  4065ce:	4770      	bx	lr
  4065d0:	ea94 0f0c 	teq	r4, ip
  4065d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4065d8:	bf18      	it	ne
  4065da:	ea95 0f0c 	teqne	r5, ip
  4065de:	d00c      	beq.n	4065fa <__aeabi_dmul+0x206>
  4065e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4065e4:	bf18      	it	ne
  4065e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  4065ea:	d1d1      	bne.n	406590 <__aeabi_dmul+0x19c>
  4065ec:	ea81 0103 	eor.w	r1, r1, r3
  4065f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4065f4:	f04f 0000 	mov.w	r0, #0
  4065f8:	bd70      	pop	{r4, r5, r6, pc}
  4065fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4065fe:	bf06      	itte	eq
  406600:	4610      	moveq	r0, r2
  406602:	4619      	moveq	r1, r3
  406604:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406608:	d019      	beq.n	40663e <__aeabi_dmul+0x24a>
  40660a:	ea94 0f0c 	teq	r4, ip
  40660e:	d102      	bne.n	406616 <__aeabi_dmul+0x222>
  406610:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406614:	d113      	bne.n	40663e <__aeabi_dmul+0x24a>
  406616:	ea95 0f0c 	teq	r5, ip
  40661a:	d105      	bne.n	406628 <__aeabi_dmul+0x234>
  40661c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  406620:	bf1c      	itt	ne
  406622:	4610      	movne	r0, r2
  406624:	4619      	movne	r1, r3
  406626:	d10a      	bne.n	40663e <__aeabi_dmul+0x24a>
  406628:	ea81 0103 	eor.w	r1, r1, r3
  40662c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406630:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406634:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  406638:	f04f 0000 	mov.w	r0, #0
  40663c:	bd70      	pop	{r4, r5, r6, pc}
  40663e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  406642:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  406646:	bd70      	pop	{r4, r5, r6, pc}

00406648 <__aeabi_ddiv>:
  406648:	b570      	push	{r4, r5, r6, lr}
  40664a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40664e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  406652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  406656:	bf1d      	ittte	ne
  406658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40665c:	ea94 0f0c 	teqne	r4, ip
  406660:	ea95 0f0c 	teqne	r5, ip
  406664:	f000 f8a7 	bleq	4067b6 <__aeabi_ddiv+0x16e>
  406668:	eba4 0405 	sub.w	r4, r4, r5
  40666c:	ea81 0e03 	eor.w	lr, r1, r3
  406670:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  406674:	ea4f 3101 	mov.w	r1, r1, lsl #12
  406678:	f000 8088 	beq.w	40678c <__aeabi_ddiv+0x144>
  40667c:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406680:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406684:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406688:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40668c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406690:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406694:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406698:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40669c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4066a0:	429d      	cmp	r5, r3
  4066a2:	bf08      	it	eq
  4066a4:	4296      	cmpeq	r6, r2
  4066a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4066aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4066ae:	d202      	bcs.n	4066b6 <__aeabi_ddiv+0x6e>
  4066b0:	085b      	lsrs	r3, r3, #1
  4066b2:	ea4f 0232 	mov.w	r2, r2, rrx
  4066b6:	1ab6      	subs	r6, r6, r2
  4066b8:	eb65 0503 	sbc.w	r5, r5, r3
  4066bc:	085b      	lsrs	r3, r3, #1
  4066be:	ea4f 0232 	mov.w	r2, r2, rrx
  4066c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4066c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4066ca:	ebb6 0e02 	subs.w	lr, r6, r2
  4066ce:	eb75 0e03 	sbcs.w	lr, r5, r3
  4066d2:	bf22      	ittt	cs
  4066d4:	1ab6      	subcs	r6, r6, r2
  4066d6:	4675      	movcs	r5, lr
  4066d8:	ea40 000c 	orrcs.w	r0, r0, ip
  4066dc:	085b      	lsrs	r3, r3, #1
  4066de:	ea4f 0232 	mov.w	r2, r2, rrx
  4066e2:	ebb6 0e02 	subs.w	lr, r6, r2
  4066e6:	eb75 0e03 	sbcs.w	lr, r5, r3
  4066ea:	bf22      	ittt	cs
  4066ec:	1ab6      	subcs	r6, r6, r2
  4066ee:	4675      	movcs	r5, lr
  4066f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  4066f4:	085b      	lsrs	r3, r3, #1
  4066f6:	ea4f 0232 	mov.w	r2, r2, rrx
  4066fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4066fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  406702:	bf22      	ittt	cs
  406704:	1ab6      	subcs	r6, r6, r2
  406706:	4675      	movcs	r5, lr
  406708:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40670c:	085b      	lsrs	r3, r3, #1
  40670e:	ea4f 0232 	mov.w	r2, r2, rrx
  406712:	ebb6 0e02 	subs.w	lr, r6, r2
  406716:	eb75 0e03 	sbcs.w	lr, r5, r3
  40671a:	bf22      	ittt	cs
  40671c:	1ab6      	subcs	r6, r6, r2
  40671e:	4675      	movcs	r5, lr
  406720:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  406724:	ea55 0e06 	orrs.w	lr, r5, r6
  406728:	d018      	beq.n	40675c <__aeabi_ddiv+0x114>
  40672a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40672e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  406732:	ea4f 1606 	mov.w	r6, r6, lsl #4
  406736:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40673a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40673e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  406742:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  406746:	d1c0      	bne.n	4066ca <__aeabi_ddiv+0x82>
  406748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40674c:	d10b      	bne.n	406766 <__aeabi_ddiv+0x11e>
  40674e:	ea41 0100 	orr.w	r1, r1, r0
  406752:	f04f 0000 	mov.w	r0, #0
  406756:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40675a:	e7b6      	b.n	4066ca <__aeabi_ddiv+0x82>
  40675c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406760:	bf04      	itt	eq
  406762:	4301      	orreq	r1, r0
  406764:	2000      	moveq	r0, #0
  406766:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40676a:	bf88      	it	hi
  40676c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  406770:	f63f aeaf 	bhi.w	4064d2 <__aeabi_dmul+0xde>
  406774:	ebb5 0c03 	subs.w	ip, r5, r3
  406778:	bf04      	itt	eq
  40677a:	ebb6 0c02 	subseq.w	ip, r6, r2
  40677e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406782:	f150 0000 	adcs.w	r0, r0, #0
  406786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40678a:	bd70      	pop	{r4, r5, r6, pc}
  40678c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406790:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406794:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406798:	bfc2      	ittt	gt
  40679a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40679e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4067a2:	bd70      	popgt	{r4, r5, r6, pc}
  4067a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4067a8:	f04f 0e00 	mov.w	lr, #0
  4067ac:	3c01      	subs	r4, #1
  4067ae:	e690      	b.n	4064d2 <__aeabi_dmul+0xde>
  4067b0:	ea45 0e06 	orr.w	lr, r5, r6
  4067b4:	e68d      	b.n	4064d2 <__aeabi_dmul+0xde>
  4067b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4067ba:	ea94 0f0c 	teq	r4, ip
  4067be:	bf08      	it	eq
  4067c0:	ea95 0f0c 	teqeq	r5, ip
  4067c4:	f43f af3b 	beq.w	40663e <__aeabi_dmul+0x24a>
  4067c8:	ea94 0f0c 	teq	r4, ip
  4067cc:	d10a      	bne.n	4067e4 <__aeabi_ddiv+0x19c>
  4067ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4067d2:	f47f af34 	bne.w	40663e <__aeabi_dmul+0x24a>
  4067d6:	ea95 0f0c 	teq	r5, ip
  4067da:	f47f af25 	bne.w	406628 <__aeabi_dmul+0x234>
  4067de:	4610      	mov	r0, r2
  4067e0:	4619      	mov	r1, r3
  4067e2:	e72c      	b.n	40663e <__aeabi_dmul+0x24a>
  4067e4:	ea95 0f0c 	teq	r5, ip
  4067e8:	d106      	bne.n	4067f8 <__aeabi_ddiv+0x1b0>
  4067ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4067ee:	f43f aefd 	beq.w	4065ec <__aeabi_dmul+0x1f8>
  4067f2:	4610      	mov	r0, r2
  4067f4:	4619      	mov	r1, r3
  4067f6:	e722      	b.n	40663e <__aeabi_dmul+0x24a>
  4067f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  4067fc:	bf18      	it	ne
  4067fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406802:	f47f aec5 	bne.w	406590 <__aeabi_dmul+0x19c>
  406806:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40680a:	f47f af0d 	bne.w	406628 <__aeabi_dmul+0x234>
  40680e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406812:	f47f aeeb 	bne.w	4065ec <__aeabi_dmul+0x1f8>
  406816:	e712      	b.n	40663e <__aeabi_dmul+0x24a>

00406818 <__gedf2>:
  406818:	f04f 3cff 	mov.w	ip, #4294967295
  40681c:	e006      	b.n	40682c <__cmpdf2+0x4>
  40681e:	bf00      	nop

00406820 <__ledf2>:
  406820:	f04f 0c01 	mov.w	ip, #1
  406824:	e002      	b.n	40682c <__cmpdf2+0x4>
  406826:	bf00      	nop

00406828 <__cmpdf2>:
  406828:	f04f 0c01 	mov.w	ip, #1
  40682c:	f84d cd04 	str.w	ip, [sp, #-4]!
  406830:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406838:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40683c:	bf18      	it	ne
  40683e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  406842:	d01b      	beq.n	40687c <__cmpdf2+0x54>
  406844:	b001      	add	sp, #4
  406846:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  40684a:	bf0c      	ite	eq
  40684c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  406850:	ea91 0f03 	teqne	r1, r3
  406854:	bf02      	ittt	eq
  406856:	ea90 0f02 	teqeq	r0, r2
  40685a:	2000      	moveq	r0, #0
  40685c:	4770      	bxeq	lr
  40685e:	f110 0f00 	cmn.w	r0, #0
  406862:	ea91 0f03 	teq	r1, r3
  406866:	bf58      	it	pl
  406868:	4299      	cmppl	r1, r3
  40686a:	bf08      	it	eq
  40686c:	4290      	cmpeq	r0, r2
  40686e:	bf2c      	ite	cs
  406870:	17d8      	asrcs	r0, r3, #31
  406872:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  406876:	f040 0001 	orr.w	r0, r0, #1
  40687a:	4770      	bx	lr
  40687c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406880:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406884:	d102      	bne.n	40688c <__cmpdf2+0x64>
  406886:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40688a:	d107      	bne.n	40689c <__cmpdf2+0x74>
  40688c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406890:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406894:	d1d6      	bne.n	406844 <__cmpdf2+0x1c>
  406896:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40689a:	d0d3      	beq.n	406844 <__cmpdf2+0x1c>
  40689c:	f85d 0b04 	ldr.w	r0, [sp], #4
  4068a0:	4770      	bx	lr
  4068a2:	bf00      	nop

004068a4 <__aeabi_cdrcmple>:
  4068a4:	4684      	mov	ip, r0
  4068a6:	4610      	mov	r0, r2
  4068a8:	4662      	mov	r2, ip
  4068aa:	468c      	mov	ip, r1
  4068ac:	4619      	mov	r1, r3
  4068ae:	4663      	mov	r3, ip
  4068b0:	e000      	b.n	4068b4 <__aeabi_cdcmpeq>
  4068b2:	bf00      	nop

004068b4 <__aeabi_cdcmpeq>:
  4068b4:	b501      	push	{r0, lr}
  4068b6:	f7ff ffb7 	bl	406828 <__cmpdf2>
  4068ba:	2800      	cmp	r0, #0
  4068bc:	bf48      	it	mi
  4068be:	f110 0f00 	cmnmi.w	r0, #0
  4068c2:	bd01      	pop	{r0, pc}

004068c4 <__aeabi_dcmpeq>:
  4068c4:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068c8:	f7ff fff4 	bl	4068b4 <__aeabi_cdcmpeq>
  4068cc:	bf0c      	ite	eq
  4068ce:	2001      	moveq	r0, #1
  4068d0:	2000      	movne	r0, #0
  4068d2:	f85d fb08 	ldr.w	pc, [sp], #8
  4068d6:	bf00      	nop

004068d8 <__aeabi_dcmplt>:
  4068d8:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068dc:	f7ff ffea 	bl	4068b4 <__aeabi_cdcmpeq>
  4068e0:	bf34      	ite	cc
  4068e2:	2001      	movcc	r0, #1
  4068e4:	2000      	movcs	r0, #0
  4068e6:	f85d fb08 	ldr.w	pc, [sp], #8
  4068ea:	bf00      	nop

004068ec <__aeabi_dcmple>:
  4068ec:	f84d ed08 	str.w	lr, [sp, #-8]!
  4068f0:	f7ff ffe0 	bl	4068b4 <__aeabi_cdcmpeq>
  4068f4:	bf94      	ite	ls
  4068f6:	2001      	movls	r0, #1
  4068f8:	2000      	movhi	r0, #0
  4068fa:	f85d fb08 	ldr.w	pc, [sp], #8
  4068fe:	bf00      	nop

00406900 <__aeabi_dcmpge>:
  406900:	f84d ed08 	str.w	lr, [sp, #-8]!
  406904:	f7ff ffce 	bl	4068a4 <__aeabi_cdrcmple>
  406908:	bf94      	ite	ls
  40690a:	2001      	movls	r0, #1
  40690c:	2000      	movhi	r0, #0
  40690e:	f85d fb08 	ldr.w	pc, [sp], #8
  406912:	bf00      	nop

00406914 <__aeabi_dcmpgt>:
  406914:	f84d ed08 	str.w	lr, [sp, #-8]!
  406918:	f7ff ffc4 	bl	4068a4 <__aeabi_cdrcmple>
  40691c:	bf34      	ite	cc
  40691e:	2001      	movcc	r0, #1
  406920:	2000      	movcs	r0, #0
  406922:	f85d fb08 	ldr.w	pc, [sp], #8
  406926:	bf00      	nop

00406928 <__aeabi_dcmpun>:
  406928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  40692c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406930:	d102      	bne.n	406938 <__aeabi_dcmpun+0x10>
  406932:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  406936:	d10a      	bne.n	40694e <__aeabi_dcmpun+0x26>
  406938:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  40693c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406940:	d102      	bne.n	406948 <__aeabi_dcmpun+0x20>
  406942:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  406946:	d102      	bne.n	40694e <__aeabi_dcmpun+0x26>
  406948:	f04f 0000 	mov.w	r0, #0
  40694c:	4770      	bx	lr
  40694e:	f04f 0001 	mov.w	r0, #1
  406952:	4770      	bx	lr

00406954 <__aeabi_d2iz>:
  406954:	ea4f 0241 	mov.w	r2, r1, lsl #1
  406958:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  40695c:	d215      	bcs.n	40698a <__aeabi_d2iz+0x36>
  40695e:	d511      	bpl.n	406984 <__aeabi_d2iz+0x30>
  406960:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  406964:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  406968:	d912      	bls.n	406990 <__aeabi_d2iz+0x3c>
  40696a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  40696e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  406972:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  406976:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40697a:	fa23 f002 	lsr.w	r0, r3, r2
  40697e:	bf18      	it	ne
  406980:	4240      	negne	r0, r0
  406982:	4770      	bx	lr
  406984:	f04f 0000 	mov.w	r0, #0
  406988:	4770      	bx	lr
  40698a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40698e:	d105      	bne.n	40699c <__aeabi_d2iz+0x48>
  406990:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406994:	bf08      	it	eq
  406996:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40699a:	4770      	bx	lr
  40699c:	f04f 0000 	mov.w	r0, #0
  4069a0:	4770      	bx	lr
  4069a2:	bf00      	nop

004069a4 <sysfont_glyphs>:
	...
  4069c4:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  4069d4:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  4069e4:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  4069fc:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  406a0c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  406a1c:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  406a34:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  406a44:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  406a54:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  406a6c:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  406a88:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406a98:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  406aa8:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  406ab8:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  406ae0:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406b08:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  406b18:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  406b3c:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  406b4c:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  406b5c:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  406b6c:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  406b84:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  406b94:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  406ba4:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  406bbc:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  406bcc:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  406bdc:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  406bf4:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406c04:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  406c14:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  406c2c:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  406c3c:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  406c4c:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  406c64:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  406c74:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  406c84:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  406ca0:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  406cb0:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  406cc0:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  406cdc:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  406cf4:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406d0c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406d1c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406d2c:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406d44:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406d54:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406d64:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406d7c:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406d8c:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406d9c:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406db4:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406dc4:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406dd4:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406dec:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406dfc:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406e0c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  406e24:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406e34:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406e44:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  406e5c:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  406e6c:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  406e7c:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  406e94:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  406ea4:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  406eb4:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  406ecc:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406edc:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  406eec:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  406f04:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406f14:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  406f24:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  406f3c:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  406f4c:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406f5c:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  406f74:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  406f84:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  406f94:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  406fac:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  406fbc:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  406fcc:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  406fe4:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  406ff4:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  407004:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  40701c:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  40702c:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  40703c:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  407054:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  407064:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  407074:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  40709c:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  4070ac:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  4070c8:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  4070e0:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  4070f0:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  407100:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  407118:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  407128:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  407138:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  407150:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  407160:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  407170:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  407180:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  407190:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  4071a0:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  4071b0:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  4071c0:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  4071d0:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  4071e0:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  4071f8:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  407208:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  407218:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  407234:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  407250:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  40726c:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  40727c:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  40728c:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  4072a4:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  4072c0:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  4072dc:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  4072f8:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  407314:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  407330:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  40734c:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  407368:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  407378:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  407388:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  407398:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  4073a8:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  4073b8:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  4073c8:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  4073d8:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  4073e8:	0000 0000 07e2 0000 0003 0000 0013 0000     ................
  4073f8:	000c 0000 000f 0000 002d 0000 0001 0000     ........-.......
  407408:	2020 2020 2020 2020 2020 0000 6c25 0075               ..%lu.

00407418 <_global_impure_ptr>:
  407418:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  407428:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  407438:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  407448:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  407458:	296c 0000 0030 0000                         l)..0...

00407460 <blanks.7223>:
  407460:	2020 2020 2020 2020 2020 2020 2020 2020                     

00407470 <zeroes.7224>:
  407470:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  407480:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00407490 <__mprec_bigtens>:
  407490:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  4074a0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  4074b0:	bf3c 7f73 4fdd 7515                         <.s..O.u

004074b8 <__mprec_tens>:
  4074b8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  4074c8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  4074d8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4074e8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4074f8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407508:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  407518:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  407528:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  407538:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  407548:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  407558:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  407568:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  407578:	9db4 79d9 7843 44ea                         ...yCx.D

00407580 <p05.6055>:
  407580:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  407590:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040759c <_ctype_>:
  40759c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  4075ac:	2020 2020 2020 2020 2020 2020 2020 2020                     
  4075bc:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  4075cc:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  4075dc:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4075ec:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4075fc:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40760c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  40761c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

004076a0 <_init>:
  4076a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4076a2:	bf00      	nop
  4076a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4076a6:	bc08      	pop	{r3}
  4076a8:	469e      	mov	lr, r3
  4076aa:	4770      	bx	lr

004076ac <__init_array_start>:
  4076ac:	00403921 	.word	0x00403921

004076b0 <__frame_dummy_init_array_entry>:
  4076b0:	00400165                                e.@.

004076b4 <_fini>:
  4076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4076b6:	bf00      	nop
  4076b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4076ba:	bc08      	pop	{r3}
  4076bc:	469e      	mov	lr, r3
  4076be:	4770      	bx	lr

004076c0 <__fini_array_start>:
  4076c0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 69a4 0040 0e0a 7d20               .....i@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0cac 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	6069 0040 5c29 0040 0000 0000 759c 0040     i`@.)\@......u@.
20400954:	7598 0040 743c 0040 743c 0040 743c 0040     .u@.<t@.<t@.<t@.
20400964:	743c 0040 743c 0040 743c 0040 743c 0040     <t@.<t@.<t@.<t@.
20400974:	743c 0040 743c 0040 ffff ffff ffff ffff     <t@.<t@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
